// Code generated by mdatagen. DO NOT EDIT.

package metadata

import "go.opentelemetry.io/collector/confmap"

// MetricConfig provides common config for a particular metric.
type MetricConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms, confmap.WithErrorUnused())
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsConfig provides config for kafkametrics metrics.
type MetricsConfig struct {
	KafkaBrokers                           MetricConfig `mapstructure:"kafka.brokers"`
	KafkaConsumerGroupLag                  MetricConfig `mapstructure:"kafka.consumer_group.lag"`
	KafkaConsumerGroupLagSum               MetricConfig `mapstructure:"kafka.consumer_group.lag_sum"`
	KafkaConsumerGroupMembers              MetricConfig `mapstructure:"kafka.consumer_group.members"`
	KafkaConsumerGroupOffset               MetricConfig `mapstructure:"kafka.consumer_group.offset"`
	KafkaConsumerGroupOffsetSum            MetricConfig `mapstructure:"kafka.consumer_group.offset_sum"`
	KafkaPartitionCurrentOffset            MetricConfig `mapstructure:"kafka.partition.current_offset"`
	KafkaPartitionOldestOffset             MetricConfig `mapstructure:"kafka.partition.oldest_offset"`
	KafkaPartitionReplicas                 MetricConfig `mapstructure:"kafka.partition.replicas"`
	KafkaPartitionReplicasInSync           MetricConfig `mapstructure:"kafka.partition.replicas_in_sync"`
	KafkaTopicPartitions                   MetricConfig `mapstructure:"kafka.topic.partitions"`
	MessagingKafkaBrokerConsumerFetchCount MetricConfig `mapstructure:"messaging.kafka.broker.consumer_fetch_count"`
	MessagingKafkaBrokerConsumerFetchRate  MetricConfig `mapstructure:"messaging.kafka.broker.consumer_fetch_rate"`
	MessagingKafkaBrokerCount              MetricConfig `mapstructure:"messaging.kafka.broker.count"`
	MessagingKafkaBrokerIncomingByteRate   MetricConfig `mapstructure:"messaging.kafka.broker.incoming_byte_rate"`
	MessagingKafkaBrokerOutgoingByteRate   MetricConfig `mapstructure:"messaging.kafka.broker.outgoing_byte_rate"`
	MessagingKafkaBrokerRequestLatency     MetricConfig `mapstructure:"messaging.kafka.broker.request_latency"`
	MessagingKafkaBrokerRequestRate        MetricConfig `mapstructure:"messaging.kafka.broker.request_rate"`
	MessagingKafkaBrokerRequestSize        MetricConfig `mapstructure:"messaging.kafka.broker.request_size"`
	MessagingKafkaBrokerRequestsInFlight   MetricConfig `mapstructure:"messaging.kafka.broker.requests_in_flight"`
	MessagingKafkaBrokerResponseRate       MetricConfig `mapstructure:"messaging.kafka.broker.response_rate"`
	MessagingKafkaBrokerResponseSize       MetricConfig `mapstructure:"messaging.kafka.broker.response_size"`
}

func DefaultMetricsConfig() MetricsConfig {
	return MetricsConfig{
		KafkaBrokers: MetricConfig{
			Enabled: true,
		},
		KafkaConsumerGroupLag: MetricConfig{
			Enabled: true,
		},
		KafkaConsumerGroupLagSum: MetricConfig{
			Enabled: true,
		},
		KafkaConsumerGroupMembers: MetricConfig{
			Enabled: true,
		},
		KafkaConsumerGroupOffset: MetricConfig{
			Enabled: true,
		},
		KafkaConsumerGroupOffsetSum: MetricConfig{
			Enabled: true,
		},
		KafkaPartitionCurrentOffset: MetricConfig{
			Enabled: true,
		},
		KafkaPartitionOldestOffset: MetricConfig{
			Enabled: true,
		},
		KafkaPartitionReplicas: MetricConfig{
			Enabled: true,
		},
		KafkaPartitionReplicasInSync: MetricConfig{
			Enabled: true,
		},
		KafkaTopicPartitions: MetricConfig{
			Enabled: true,
		},
		MessagingKafkaBrokerConsumerFetchCount: MetricConfig{
			Enabled: false,
		},
		MessagingKafkaBrokerConsumerFetchRate: MetricConfig{
			Enabled: false,
		},
		MessagingKafkaBrokerCount: MetricConfig{
			Enabled: false,
		},
		MessagingKafkaBrokerIncomingByteRate: MetricConfig{
			Enabled: false,
		},
		MessagingKafkaBrokerOutgoingByteRate: MetricConfig{
			Enabled: true,
		},
		MessagingKafkaBrokerRequestLatency: MetricConfig{
			Enabled: false,
		},
		MessagingKafkaBrokerRequestRate: MetricConfig{
			Enabled: false,
		},
		MessagingKafkaBrokerRequestSize: MetricConfig{
			Enabled: false,
		},
		MessagingKafkaBrokerRequestsInFlight: MetricConfig{
			Enabled: false,
		},
		MessagingKafkaBrokerResponseRate: MetricConfig{
			Enabled: false,
		},
		MessagingKafkaBrokerResponseSize: MetricConfig{
			Enabled: false,
		},
	}
}

// MetricsBuilderConfig is a configuration for kafkametrics metrics builder.
type MetricsBuilderConfig struct {
	Metrics MetricsConfig `mapstructure:"metrics"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics: DefaultMetricsConfig(),
	}
}
