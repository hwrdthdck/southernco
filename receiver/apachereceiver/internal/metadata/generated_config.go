// Code generated by mdatagen. DO NOT EDIT.

package metadata

import "go.opentelemetry.io/collector/confmap"

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricSettings) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms, confmap.WithErrorUnused())
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsSettings provides settings for apachereceiver metrics.
type MetricsSettings struct {
	ApacheCPULoad            MetricSettings `mapstructure:"apache.cpu.load"`
	ApacheCPUTime            MetricSettings `mapstructure:"apache.cpu.time"`
	ApacheCurrentConnections MetricSettings `mapstructure:"apache.current_connections"`
	ApacheLoad1              MetricSettings `mapstructure:"apache.load.1"`
	ApacheLoad15             MetricSettings `mapstructure:"apache.load.15"`
	ApacheLoad5              MetricSettings `mapstructure:"apache.load.5"`
	ApacheRequestTime        MetricSettings `mapstructure:"apache.request.time"`
	ApacheRequests           MetricSettings `mapstructure:"apache.requests"`
	ApacheScoreboard         MetricSettings `mapstructure:"apache.scoreboard"`
	ApacheTraffic            MetricSettings `mapstructure:"apache.traffic"`
	ApacheUptime             MetricSettings `mapstructure:"apache.uptime"`
	ApacheWorkers            MetricSettings `mapstructure:"apache.workers"`
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		ApacheCPULoad: MetricSettings{
			Enabled: true,
		},
		ApacheCPUTime: MetricSettings{
			Enabled: true,
		},
		ApacheCurrentConnections: MetricSettings{
			Enabled: true,
		},
		ApacheLoad1: MetricSettings{
			Enabled: true,
		},
		ApacheLoad15: MetricSettings{
			Enabled: true,
		},
		ApacheLoad5: MetricSettings{
			Enabled: true,
		},
		ApacheRequestTime: MetricSettings{
			Enabled: true,
		},
		ApacheRequests: MetricSettings{
			Enabled: true,
		},
		ApacheScoreboard: MetricSettings{
			Enabled: true,
		},
		ApacheTraffic: MetricSettings{
			Enabled: true,
		},
		ApacheUptime: MetricSettings{
			Enabled: true,
		},
		ApacheWorkers: MetricSettings{
			Enabled: true,
		},
	}
}

// ResourceAttributeSettings provides common settings for a particular resource attribute.
type ResourceAttributeSettings struct {
	Enabled bool `mapstructure:"enabled"`
}

// ResourceAttributesSettings provides settings for apachereceiver resource attributes.
type ResourceAttributesSettings struct {
	ApacheServerName ResourceAttributeSettings `mapstructure:"apache.server.name"`
	ApacheServerPort ResourceAttributeSettings `mapstructure:"apache.server.port"`
}

func DefaultResourceAttributesSettings() ResourceAttributesSettings {
	return ResourceAttributesSettings{
		ApacheServerName: ResourceAttributeSettings{
			Enabled: true,
		},
		ApacheServerPort: ResourceAttributeSettings{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for apachereceiver metrics builder.
type MetricsBuilderConfig struct {
	Metrics            MetricsSettings            `mapstructure:"metrics"`
	ResourceAttributes ResourceAttributesSettings `mapstructure:"resource_attributes"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics:            DefaultMetricsSettings(),
		ResourceAttributes: DefaultResourceAttributesSettings(),
	}
}
