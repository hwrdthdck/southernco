// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
)

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`
}

// MetricsSettings provides settings for bigipreceiver metrics.
type MetricsSettings struct {
	BigipNodeAvailability             MetricSettings `mapstructure:"bigip.node.availability"`
	BigipNodeConnectionCount          MetricSettings `mapstructure:"bigip.node.connection.count"`
	BigipNodeDataTransmitted          MetricSettings `mapstructure:"bigip.node.data.transmitted"`
	BigipNodeEnabled                  MetricSettings `mapstructure:"bigip.node.enabled"`
	BigipNodePacketCount              MetricSettings `mapstructure:"bigip.node.packet.count"`
	BigipNodeRequestCount             MetricSettings `mapstructure:"bigip.node.request.count"`
	BigipNodeSessionCount             MetricSettings `mapstructure:"bigip.node.session.count"`
	BigipPoolActiveMemberCount        MetricSettings `mapstructure:"bigip.pool.active_member.count"`
	BigipPoolAvailability             MetricSettings `mapstructure:"bigip.pool.availability"`
	BigipPoolAvailableMemberCount     MetricSettings `mapstructure:"bigip.pool.available_member.count"`
	BigipPoolConnectionCount          MetricSettings `mapstructure:"bigip.pool.connection.count"`
	BigipPoolDataTransmitted          MetricSettings `mapstructure:"bigip.pool.data.transmitted"`
	BigipPoolEnabled                  MetricSettings `mapstructure:"bigip.pool.enabled"`
	BigipPoolMemberCount              MetricSettings `mapstructure:"bigip.pool.member.count"`
	BigipPoolPacketCount              MetricSettings `mapstructure:"bigip.pool.packet.count"`
	BigipPoolRequestCount             MetricSettings `mapstructure:"bigip.pool.request.count"`
	BigipPoolMemberAvailability       MetricSettings `mapstructure:"bigip.pool_member.availability"`
	BigipPoolMemberConnectionCount    MetricSettings `mapstructure:"bigip.pool_member.connection.count"`
	BigipPoolMemberDataTransmitted    MetricSettings `mapstructure:"bigip.pool_member.data.transmitted"`
	BigipPoolMemberEnabled            MetricSettings `mapstructure:"bigip.pool_member.enabled"`
	BigipPoolMemberPacketCount        MetricSettings `mapstructure:"bigip.pool_member.packet.count"`
	BigipPoolMemberRequestCount       MetricSettings `mapstructure:"bigip.pool_member.request.count"`
	BigipPoolMemberSessionCount       MetricSettings `mapstructure:"bigip.pool_member.session.count"`
	BigipVirtualServerAvailability    MetricSettings `mapstructure:"bigip.virtual_server.availability"`
	BigipVirtualServerConnectionCount MetricSettings `mapstructure:"bigip.virtual_server.connection.count"`
	BigipVirtualServerDataTransmitted MetricSettings `mapstructure:"bigip.virtual_server.data.transmitted"`
	BigipVirtualServerEnabled         MetricSettings `mapstructure:"bigip.virtual_server.enabled"`
	BigipVirtualServerPacketCount     MetricSettings `mapstructure:"bigip.virtual_server.packet.count"`
	BigipVirtualServerRequestCount    MetricSettings `mapstructure:"bigip.virtual_server.request.count"`
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		BigipNodeAvailability: MetricSettings{
			Enabled: true,
		},
		BigipNodeConnectionCount: MetricSettings{
			Enabled: true,
		},
		BigipNodeDataTransmitted: MetricSettings{
			Enabled: true,
		},
		BigipNodeEnabled: MetricSettings{
			Enabled: true,
		},
		BigipNodePacketCount: MetricSettings{
			Enabled: true,
		},
		BigipNodeRequestCount: MetricSettings{
			Enabled: true,
		},
		BigipNodeSessionCount: MetricSettings{
			Enabled: true,
		},
		BigipPoolActiveMemberCount: MetricSettings{
			Enabled: true,
		},
		BigipPoolAvailability: MetricSettings{
			Enabled: true,
		},
		BigipPoolAvailableMemberCount: MetricSettings{
			Enabled: true,
		},
		BigipPoolConnectionCount: MetricSettings{
			Enabled: true,
		},
		BigipPoolDataTransmitted: MetricSettings{
			Enabled: true,
		},
		BigipPoolEnabled: MetricSettings{
			Enabled: true,
		},
		BigipPoolMemberCount: MetricSettings{
			Enabled: true,
		},
		BigipPoolPacketCount: MetricSettings{
			Enabled: true,
		},
		BigipPoolRequestCount: MetricSettings{
			Enabled: true,
		},
		BigipPoolMemberAvailability: MetricSettings{
			Enabled: true,
		},
		BigipPoolMemberConnectionCount: MetricSettings{
			Enabled: true,
		},
		BigipPoolMemberDataTransmitted: MetricSettings{
			Enabled: true,
		},
		BigipPoolMemberEnabled: MetricSettings{
			Enabled: true,
		},
		BigipPoolMemberPacketCount: MetricSettings{
			Enabled: true,
		},
		BigipPoolMemberRequestCount: MetricSettings{
			Enabled: true,
		},
		BigipPoolMemberSessionCount: MetricSettings{
			Enabled: true,
		},
		BigipVirtualServerAvailability: MetricSettings{
			Enabled: true,
		},
		BigipVirtualServerConnectionCount: MetricSettings{
			Enabled: true,
		},
		BigipVirtualServerDataTransmitted: MetricSettings{
			Enabled: true,
		},
		BigipVirtualServerEnabled: MetricSettings{
			Enabled: true,
		},
		BigipVirtualServerPacketCount: MetricSettings{
			Enabled: true,
		},
		BigipVirtualServerRequestCount: MetricSettings{
			Enabled: true,
		},
	}
}

type metricBigipNodeAvailability struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.node.availability metric with initial data.
func (m *metricBigipNodeAvailability) init() {
	m.data.SetName("bigip.node.availability")
	m.data.SetDescription("Availability of the node.")
	m.data.SetUnit("1")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBigipNodeAvailability) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, availabilityStatusAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.AvailabilityStatus, pcommon.NewValueString(availabilityStatusAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipNodeAvailability) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipNodeAvailability) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipNodeAvailability(settings MetricSettings) metricBigipNodeAvailability {
	m := metricBigipNodeAvailability{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipNodeConnectionCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.node.connection.count metric with initial data.
func (m *metricBigipNodeConnectionCount) init() {
	m.data.SetName("bigip.node.connection.count")
	m.data.SetDescription("Current number of connections to the node.")
	m.data.SetUnit("{connections}")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricBigipNodeConnectionCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipNodeConnectionCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipNodeConnectionCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipNodeConnectionCount(settings MetricSettings) metricBigipNodeConnectionCount {
	m := metricBigipNodeConnectionCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipNodeDataTransmitted struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.node.data.transmitted metric with initial data.
func (m *metricBigipNodeDataTransmitted) init() {
	m.data.SetName("bigip.node.data.transmitted")
	m.data.SetDescription("Amount of data transmitted to and from the node.")
	m.data.SetUnit("By")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBigipNodeDataTransmitted) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, directionAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Direction, pcommon.NewValueString(directionAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipNodeDataTransmitted) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipNodeDataTransmitted) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipNodeDataTransmitted(settings MetricSettings) metricBigipNodeDataTransmitted {
	m := metricBigipNodeDataTransmitted{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipNodeEnabled struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.node.enabled metric with initial data.
func (m *metricBigipNodeEnabled) init() {
	m.data.SetName("bigip.node.enabled")
	m.data.SetDescription("Enabled state of of the node.")
	m.data.SetUnit("1")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBigipNodeEnabled) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, enabledStatusAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.EnabledStatus, pcommon.NewValueString(enabledStatusAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipNodeEnabled) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipNodeEnabled) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipNodeEnabled(settings MetricSettings) metricBigipNodeEnabled {
	m := metricBigipNodeEnabled{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipNodePacketCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.node.packet.count metric with initial data.
func (m *metricBigipNodePacketCount) init() {
	m.data.SetName("bigip.node.packet.count")
	m.data.SetDescription("Number of packets transmitted to and from the node.")
	m.data.SetUnit("{packets}")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBigipNodePacketCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, directionAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Direction, pcommon.NewValueString(directionAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipNodePacketCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipNodePacketCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipNodePacketCount(settings MetricSettings) metricBigipNodePacketCount {
	m := metricBigipNodePacketCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipNodeRequestCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.node.request.count metric with initial data.
func (m *metricBigipNodeRequestCount) init() {
	m.data.SetName("bigip.node.request.count")
	m.data.SetDescription("Number of requests to the node.")
	m.data.SetUnit("{requests}")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricBigipNodeRequestCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipNodeRequestCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipNodeRequestCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipNodeRequestCount(settings MetricSettings) metricBigipNodeRequestCount {
	m := metricBigipNodeRequestCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipNodeSessionCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.node.session.count metric with initial data.
func (m *metricBigipNodeSessionCount) init() {
	m.data.SetName("bigip.node.session.count")
	m.data.SetDescription("Current number of sessions for the node.")
	m.data.SetUnit("{sessions}")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricBigipNodeSessionCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipNodeSessionCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipNodeSessionCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipNodeSessionCount(settings MetricSettings) metricBigipNodeSessionCount {
	m := metricBigipNodeSessionCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipPoolActiveMemberCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.pool.active_member.count metric with initial data.
func (m *metricBigipPoolActiveMemberCount) init() {
	m.data.SetName("bigip.pool.active_member.count")
	m.data.SetDescription("Number of active pool members.")
	m.data.SetUnit("{members}")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricBigipPoolActiveMemberCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipPoolActiveMemberCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipPoolActiveMemberCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipPoolActiveMemberCount(settings MetricSettings) metricBigipPoolActiveMemberCount {
	m := metricBigipPoolActiveMemberCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipPoolAvailability struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.pool.availability metric with initial data.
func (m *metricBigipPoolAvailability) init() {
	m.data.SetName("bigip.pool.availability")
	m.data.SetDescription("Availability of the pool.")
	m.data.SetUnit("1")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBigipPoolAvailability) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, availabilityStatusAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.AvailabilityStatus, pcommon.NewValueString(availabilityStatusAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipPoolAvailability) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipPoolAvailability) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipPoolAvailability(settings MetricSettings) metricBigipPoolAvailability {
	m := metricBigipPoolAvailability{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipPoolAvailableMemberCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.pool.available_member.count metric with initial data.
func (m *metricBigipPoolAvailableMemberCount) init() {
	m.data.SetName("bigip.pool.available_member.count")
	m.data.SetDescription("Number of available pool members.")
	m.data.SetUnit("{members}")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricBigipPoolAvailableMemberCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipPoolAvailableMemberCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipPoolAvailableMemberCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipPoolAvailableMemberCount(settings MetricSettings) metricBigipPoolAvailableMemberCount {
	m := metricBigipPoolAvailableMemberCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipPoolConnectionCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.pool.connection.count metric with initial data.
func (m *metricBigipPoolConnectionCount) init() {
	m.data.SetName("bigip.pool.connection.count")
	m.data.SetDescription("Current number of connections to the pool.")
	m.data.SetUnit("{connections}")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricBigipPoolConnectionCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipPoolConnectionCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipPoolConnectionCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipPoolConnectionCount(settings MetricSettings) metricBigipPoolConnectionCount {
	m := metricBigipPoolConnectionCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipPoolDataTransmitted struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.pool.data.transmitted metric with initial data.
func (m *metricBigipPoolDataTransmitted) init() {
	m.data.SetName("bigip.pool.data.transmitted")
	m.data.SetDescription("Amount of data transmitted to and from the pool.")
	m.data.SetUnit("By")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBigipPoolDataTransmitted) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, directionAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Direction, pcommon.NewValueString(directionAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipPoolDataTransmitted) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipPoolDataTransmitted) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipPoolDataTransmitted(settings MetricSettings) metricBigipPoolDataTransmitted {
	m := metricBigipPoolDataTransmitted{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipPoolEnabled struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.pool.enabled metric with initial data.
func (m *metricBigipPoolEnabled) init() {
	m.data.SetName("bigip.pool.enabled")
	m.data.SetDescription("Enabled state of of the pool.")
	m.data.SetUnit("1")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBigipPoolEnabled) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, enabledStatusAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.EnabledStatus, pcommon.NewValueString(enabledStatusAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipPoolEnabled) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipPoolEnabled) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipPoolEnabled(settings MetricSettings) metricBigipPoolEnabled {
	m := metricBigipPoolEnabled{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipPoolMemberCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.pool.member.count metric with initial data.
func (m *metricBigipPoolMemberCount) init() {
	m.data.SetName("bigip.pool.member.count")
	m.data.SetDescription("Total number of pool members.")
	m.data.SetUnit("{members}")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricBigipPoolMemberCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipPoolMemberCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipPoolMemberCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipPoolMemberCount(settings MetricSettings) metricBigipPoolMemberCount {
	m := metricBigipPoolMemberCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipPoolPacketCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.pool.packet.count metric with initial data.
func (m *metricBigipPoolPacketCount) init() {
	m.data.SetName("bigip.pool.packet.count")
	m.data.SetDescription("Number of packets transmitted to and from the pool.")
	m.data.SetUnit("{packets}")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBigipPoolPacketCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, directionAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Direction, pcommon.NewValueString(directionAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipPoolPacketCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipPoolPacketCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipPoolPacketCount(settings MetricSettings) metricBigipPoolPacketCount {
	m := metricBigipPoolPacketCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipPoolRequestCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.pool.request.count metric with initial data.
func (m *metricBigipPoolRequestCount) init() {
	m.data.SetName("bigip.pool.request.count")
	m.data.SetDescription("Number of requests to the pool.")
	m.data.SetUnit("{requests}")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricBigipPoolRequestCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipPoolRequestCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipPoolRequestCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipPoolRequestCount(settings MetricSettings) metricBigipPoolRequestCount {
	m := metricBigipPoolRequestCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipPoolMemberAvailability struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.pool_member.availability metric with initial data.
func (m *metricBigipPoolMemberAvailability) init() {
	m.data.SetName("bigip.pool_member.availability")
	m.data.SetDescription("Availability of the pool member.")
	m.data.SetUnit("1")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBigipPoolMemberAvailability) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, availabilityStatusAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.AvailabilityStatus, pcommon.NewValueString(availabilityStatusAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipPoolMemberAvailability) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipPoolMemberAvailability) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipPoolMemberAvailability(settings MetricSettings) metricBigipPoolMemberAvailability {
	m := metricBigipPoolMemberAvailability{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipPoolMemberConnectionCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.pool_member.connection.count metric with initial data.
func (m *metricBigipPoolMemberConnectionCount) init() {
	m.data.SetName("bigip.pool_member.connection.count")
	m.data.SetDescription("Current number of connections to the pool member.")
	m.data.SetUnit("{connections}")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricBigipPoolMemberConnectionCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipPoolMemberConnectionCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipPoolMemberConnectionCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipPoolMemberConnectionCount(settings MetricSettings) metricBigipPoolMemberConnectionCount {
	m := metricBigipPoolMemberConnectionCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipPoolMemberDataTransmitted struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.pool_member.data.transmitted metric with initial data.
func (m *metricBigipPoolMemberDataTransmitted) init() {
	m.data.SetName("bigip.pool_member.data.transmitted")
	m.data.SetDescription("Amount of data transmitted to and from the pool member.")
	m.data.SetUnit("By")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBigipPoolMemberDataTransmitted) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, directionAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Direction, pcommon.NewValueString(directionAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipPoolMemberDataTransmitted) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipPoolMemberDataTransmitted) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipPoolMemberDataTransmitted(settings MetricSettings) metricBigipPoolMemberDataTransmitted {
	m := metricBigipPoolMemberDataTransmitted{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipPoolMemberEnabled struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.pool_member.enabled metric with initial data.
func (m *metricBigipPoolMemberEnabled) init() {
	m.data.SetName("bigip.pool_member.enabled")
	m.data.SetDescription("Enabled state of of the pool member.")
	m.data.SetUnit("1")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBigipPoolMemberEnabled) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, enabledStatusAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.EnabledStatus, pcommon.NewValueString(enabledStatusAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipPoolMemberEnabled) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipPoolMemberEnabled) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipPoolMemberEnabled(settings MetricSettings) metricBigipPoolMemberEnabled {
	m := metricBigipPoolMemberEnabled{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipPoolMemberPacketCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.pool_member.packet.count metric with initial data.
func (m *metricBigipPoolMemberPacketCount) init() {
	m.data.SetName("bigip.pool_member.packet.count")
	m.data.SetDescription("Number of packets transmitted to and from the pool member.")
	m.data.SetUnit("{packets}")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBigipPoolMemberPacketCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, directionAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Direction, pcommon.NewValueString(directionAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipPoolMemberPacketCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipPoolMemberPacketCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipPoolMemberPacketCount(settings MetricSettings) metricBigipPoolMemberPacketCount {
	m := metricBigipPoolMemberPacketCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipPoolMemberRequestCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.pool_member.request.count metric with initial data.
func (m *metricBigipPoolMemberRequestCount) init() {
	m.data.SetName("bigip.pool_member.request.count")
	m.data.SetDescription("Number of requests to the pool member.")
	m.data.SetUnit("{requests}")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricBigipPoolMemberRequestCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipPoolMemberRequestCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipPoolMemberRequestCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipPoolMemberRequestCount(settings MetricSettings) metricBigipPoolMemberRequestCount {
	m := metricBigipPoolMemberRequestCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipPoolMemberSessionCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.pool_member.session.count metric with initial data.
func (m *metricBigipPoolMemberSessionCount) init() {
	m.data.SetName("bigip.pool_member.session.count")
	m.data.SetDescription("Current number of sessions for the pool member.")
	m.data.SetUnit("{sessions}")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricBigipPoolMemberSessionCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipPoolMemberSessionCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipPoolMemberSessionCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipPoolMemberSessionCount(settings MetricSettings) metricBigipPoolMemberSessionCount {
	m := metricBigipPoolMemberSessionCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipVirtualServerAvailability struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.virtual_server.availability metric with initial data.
func (m *metricBigipVirtualServerAvailability) init() {
	m.data.SetName("bigip.virtual_server.availability")
	m.data.SetDescription("Availability of the virtual server.")
	m.data.SetUnit("1")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBigipVirtualServerAvailability) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, availabilityStatusAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.AvailabilityStatus, pcommon.NewValueString(availabilityStatusAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipVirtualServerAvailability) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipVirtualServerAvailability) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipVirtualServerAvailability(settings MetricSettings) metricBigipVirtualServerAvailability {
	m := metricBigipVirtualServerAvailability{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipVirtualServerConnectionCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.virtual_server.connection.count metric with initial data.
func (m *metricBigipVirtualServerConnectionCount) init() {
	m.data.SetName("bigip.virtual_server.connection.count")
	m.data.SetDescription("Current number of connections to the virtual server.")
	m.data.SetUnit("{connections}")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricBigipVirtualServerConnectionCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipVirtualServerConnectionCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipVirtualServerConnectionCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipVirtualServerConnectionCount(settings MetricSettings) metricBigipVirtualServerConnectionCount {
	m := metricBigipVirtualServerConnectionCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipVirtualServerDataTransmitted struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.virtual_server.data.transmitted metric with initial data.
func (m *metricBigipVirtualServerDataTransmitted) init() {
	m.data.SetName("bigip.virtual_server.data.transmitted")
	m.data.SetDescription("Amount of data transmitted to and from the virtual server.")
	m.data.SetUnit("By")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBigipVirtualServerDataTransmitted) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, directionAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Direction, pcommon.NewValueString(directionAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipVirtualServerDataTransmitted) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipVirtualServerDataTransmitted) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipVirtualServerDataTransmitted(settings MetricSettings) metricBigipVirtualServerDataTransmitted {
	m := metricBigipVirtualServerDataTransmitted{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipVirtualServerEnabled struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.virtual_server.enabled metric with initial data.
func (m *metricBigipVirtualServerEnabled) init() {
	m.data.SetName("bigip.virtual_server.enabled")
	m.data.SetDescription("Enabled state of of the virtual server.")
	m.data.SetUnit("1")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBigipVirtualServerEnabled) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, enabledStatusAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.EnabledStatus, pcommon.NewValueString(enabledStatusAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipVirtualServerEnabled) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipVirtualServerEnabled) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipVirtualServerEnabled(settings MetricSettings) metricBigipVirtualServerEnabled {
	m := metricBigipVirtualServerEnabled{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipVirtualServerPacketCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.virtual_server.packet.count metric with initial data.
func (m *metricBigipVirtualServerPacketCount) init() {
	m.data.SetName("bigip.virtual_server.packet.count")
	m.data.SetDescription("Number of packets transmitted to and from the virtual server.")
	m.data.SetUnit("{packets}")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBigipVirtualServerPacketCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, directionAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Direction, pcommon.NewValueString(directionAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipVirtualServerPacketCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipVirtualServerPacketCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipVirtualServerPacketCount(settings MetricSettings) metricBigipVirtualServerPacketCount {
	m := metricBigipVirtualServerPacketCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBigipVirtualServerRequestCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills bigip.virtual_server.request.count metric with initial data.
func (m *metricBigipVirtualServerRequestCount) init() {
	m.data.SetName("bigip.virtual_server.request.count")
	m.data.SetDescription("Number of requests to the virtual server.")
	m.data.SetUnit("{requests}")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricBigipVirtualServerRequestCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBigipVirtualServerRequestCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBigipVirtualServerRequestCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBigipVirtualServerRequestCount(settings MetricSettings) metricBigipVirtualServerRequestCount {
	m := metricBigipVirtualServerRequestCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user settings.
type MetricsBuilder struct {
	startTime                               pcommon.Timestamp // start time that will be applied to all recorded data points.
	metricsCapacity                         int               // maximum observed number of metrics per resource.
	resourceCapacity                        int               // maximum observed number of resource attributes.
	metricsBuffer                           pmetric.Metrics   // accumulates metrics data before emitting.
	metricBigipNodeAvailability             metricBigipNodeAvailability
	metricBigipNodeConnectionCount          metricBigipNodeConnectionCount
	metricBigipNodeDataTransmitted          metricBigipNodeDataTransmitted
	metricBigipNodeEnabled                  metricBigipNodeEnabled
	metricBigipNodePacketCount              metricBigipNodePacketCount
	metricBigipNodeRequestCount             metricBigipNodeRequestCount
	metricBigipNodeSessionCount             metricBigipNodeSessionCount
	metricBigipPoolActiveMemberCount        metricBigipPoolActiveMemberCount
	metricBigipPoolAvailability             metricBigipPoolAvailability
	metricBigipPoolAvailableMemberCount     metricBigipPoolAvailableMemberCount
	metricBigipPoolConnectionCount          metricBigipPoolConnectionCount
	metricBigipPoolDataTransmitted          metricBigipPoolDataTransmitted
	metricBigipPoolEnabled                  metricBigipPoolEnabled
	metricBigipPoolMemberCount              metricBigipPoolMemberCount
	metricBigipPoolPacketCount              metricBigipPoolPacketCount
	metricBigipPoolRequestCount             metricBigipPoolRequestCount
	metricBigipPoolMemberAvailability       metricBigipPoolMemberAvailability
	metricBigipPoolMemberConnectionCount    metricBigipPoolMemberConnectionCount
	metricBigipPoolMemberDataTransmitted    metricBigipPoolMemberDataTransmitted
	metricBigipPoolMemberEnabled            metricBigipPoolMemberEnabled
	metricBigipPoolMemberPacketCount        metricBigipPoolMemberPacketCount
	metricBigipPoolMemberRequestCount       metricBigipPoolMemberRequestCount
	metricBigipPoolMemberSessionCount       metricBigipPoolMemberSessionCount
	metricBigipVirtualServerAvailability    metricBigipVirtualServerAvailability
	metricBigipVirtualServerConnectionCount metricBigipVirtualServerConnectionCount
	metricBigipVirtualServerDataTransmitted metricBigipVirtualServerDataTransmitted
	metricBigipVirtualServerEnabled         metricBigipVirtualServerEnabled
	metricBigipVirtualServerPacketCount     metricBigipVirtualServerPacketCount
	metricBigipVirtualServerRequestCount    metricBigipVirtualServerRequestCount
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func NewMetricsBuilder(settings MetricsSettings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		startTime:                               pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:                           pmetric.NewMetrics(),
		metricBigipNodeAvailability:             newMetricBigipNodeAvailability(settings.BigipNodeAvailability),
		metricBigipNodeConnectionCount:          newMetricBigipNodeConnectionCount(settings.BigipNodeConnectionCount),
		metricBigipNodeDataTransmitted:          newMetricBigipNodeDataTransmitted(settings.BigipNodeDataTransmitted),
		metricBigipNodeEnabled:                  newMetricBigipNodeEnabled(settings.BigipNodeEnabled),
		metricBigipNodePacketCount:              newMetricBigipNodePacketCount(settings.BigipNodePacketCount),
		metricBigipNodeRequestCount:             newMetricBigipNodeRequestCount(settings.BigipNodeRequestCount),
		metricBigipNodeSessionCount:             newMetricBigipNodeSessionCount(settings.BigipNodeSessionCount),
		metricBigipPoolActiveMemberCount:        newMetricBigipPoolActiveMemberCount(settings.BigipPoolActiveMemberCount),
		metricBigipPoolAvailability:             newMetricBigipPoolAvailability(settings.BigipPoolAvailability),
		metricBigipPoolAvailableMemberCount:     newMetricBigipPoolAvailableMemberCount(settings.BigipPoolAvailableMemberCount),
		metricBigipPoolConnectionCount:          newMetricBigipPoolConnectionCount(settings.BigipPoolConnectionCount),
		metricBigipPoolDataTransmitted:          newMetricBigipPoolDataTransmitted(settings.BigipPoolDataTransmitted),
		metricBigipPoolEnabled:                  newMetricBigipPoolEnabled(settings.BigipPoolEnabled),
		metricBigipPoolMemberCount:              newMetricBigipPoolMemberCount(settings.BigipPoolMemberCount),
		metricBigipPoolPacketCount:              newMetricBigipPoolPacketCount(settings.BigipPoolPacketCount),
		metricBigipPoolRequestCount:             newMetricBigipPoolRequestCount(settings.BigipPoolRequestCount),
		metricBigipPoolMemberAvailability:       newMetricBigipPoolMemberAvailability(settings.BigipPoolMemberAvailability),
		metricBigipPoolMemberConnectionCount:    newMetricBigipPoolMemberConnectionCount(settings.BigipPoolMemberConnectionCount),
		metricBigipPoolMemberDataTransmitted:    newMetricBigipPoolMemberDataTransmitted(settings.BigipPoolMemberDataTransmitted),
		metricBigipPoolMemberEnabled:            newMetricBigipPoolMemberEnabled(settings.BigipPoolMemberEnabled),
		metricBigipPoolMemberPacketCount:        newMetricBigipPoolMemberPacketCount(settings.BigipPoolMemberPacketCount),
		metricBigipPoolMemberRequestCount:       newMetricBigipPoolMemberRequestCount(settings.BigipPoolMemberRequestCount),
		metricBigipPoolMemberSessionCount:       newMetricBigipPoolMemberSessionCount(settings.BigipPoolMemberSessionCount),
		metricBigipVirtualServerAvailability:    newMetricBigipVirtualServerAvailability(settings.BigipVirtualServerAvailability),
		metricBigipVirtualServerConnectionCount: newMetricBigipVirtualServerConnectionCount(settings.BigipVirtualServerConnectionCount),
		metricBigipVirtualServerDataTransmitted: newMetricBigipVirtualServerDataTransmitted(settings.BigipVirtualServerDataTransmitted),
		metricBigipVirtualServerEnabled:         newMetricBigipVirtualServerEnabled(settings.BigipVirtualServerEnabled),
		metricBigipVirtualServerPacketCount:     newMetricBigipVirtualServerPacketCount(settings.BigipVirtualServerPacketCount),
		metricBigipVirtualServerRequestCount:    newMetricBigipVirtualServerRequestCount(settings.BigipVirtualServerRequestCount),
	}
	for _, op := range options {
		op(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
	if mb.resourceCapacity < rm.Resource().Attributes().Len() {
		mb.resourceCapacity = rm.Resource().Attributes().Len()
	}
}

// ResourceOption applies changes to provided resource.
type ResourceOption func(pcommon.Resource)

// WithBigipNodeIPAddress sets provided value as "bigip.node.ip_address" attribute for current resource.
func WithBigipNodeIPAddress(val string) ResourceOption {
	return func(r pcommon.Resource) {
		r.Attributes().UpsertString("bigip.node.ip_address", val)
	}
}

// WithBigipNodeName sets provided value as "bigip.node.name" attribute for current resource.
func WithBigipNodeName(val string) ResourceOption {
	return func(r pcommon.Resource) {
		r.Attributes().UpsertString("bigip.node.name", val)
	}
}

// WithBigipPoolName sets provided value as "bigip.pool.name" attribute for current resource.
func WithBigipPoolName(val string) ResourceOption {
	return func(r pcommon.Resource) {
		r.Attributes().UpsertString("bigip.pool.name", val)
	}
}

// WithBigipPoolMemberIPAddress sets provided value as "bigip.pool_member.ip_address" attribute for current resource.
func WithBigipPoolMemberIPAddress(val string) ResourceOption {
	return func(r pcommon.Resource) {
		r.Attributes().UpsertString("bigip.pool_member.ip_address", val)
	}
}

// WithBigipPoolMemberName sets provided value as "bigip.pool_member.name" attribute for current resource.
func WithBigipPoolMemberName(val string) ResourceOption {
	return func(r pcommon.Resource) {
		r.Attributes().UpsertString("bigip.pool_member.name", val)
	}
}

// WithBigipVirtualServerDestination sets provided value as "bigip.virtual_server.destination" attribute for current resource.
func WithBigipVirtualServerDestination(val string) ResourceOption {
	return func(r pcommon.Resource) {
		r.Attributes().UpsertString("bigip.virtual_server.destination", val)
	}
}

// WithBigipVirtualServerName sets provided value as "bigip.virtual_server.name" attribute for current resource.
func WithBigipVirtualServerName(val string) ResourceOption {
	return func(r pcommon.Resource) {
		r.Attributes().UpsertString("bigip.virtual_server.name", val)
	}
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead. Resource attributes should be provided as ResourceOption arguments.
func (mb *MetricsBuilder) EmitForResource(ro ...ResourceOption) {
	rm := pmetric.NewResourceMetrics()
	rm.Resource().Attributes().EnsureCapacity(mb.resourceCapacity)
	for _, op := range ro {
		op(rm.Resource())
	}
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("otelcol/bigipreceiver")
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricBigipNodeAvailability.emit(ils.Metrics())
	mb.metricBigipNodeConnectionCount.emit(ils.Metrics())
	mb.metricBigipNodeDataTransmitted.emit(ils.Metrics())
	mb.metricBigipNodeEnabled.emit(ils.Metrics())
	mb.metricBigipNodePacketCount.emit(ils.Metrics())
	mb.metricBigipNodeRequestCount.emit(ils.Metrics())
	mb.metricBigipNodeSessionCount.emit(ils.Metrics())
	mb.metricBigipPoolActiveMemberCount.emit(ils.Metrics())
	mb.metricBigipPoolAvailability.emit(ils.Metrics())
	mb.metricBigipPoolAvailableMemberCount.emit(ils.Metrics())
	mb.metricBigipPoolConnectionCount.emit(ils.Metrics())
	mb.metricBigipPoolDataTransmitted.emit(ils.Metrics())
	mb.metricBigipPoolEnabled.emit(ils.Metrics())
	mb.metricBigipPoolMemberCount.emit(ils.Metrics())
	mb.metricBigipPoolPacketCount.emit(ils.Metrics())
	mb.metricBigipPoolRequestCount.emit(ils.Metrics())
	mb.metricBigipPoolMemberAvailability.emit(ils.Metrics())
	mb.metricBigipPoolMemberConnectionCount.emit(ils.Metrics())
	mb.metricBigipPoolMemberDataTransmitted.emit(ils.Metrics())
	mb.metricBigipPoolMemberEnabled.emit(ils.Metrics())
	mb.metricBigipPoolMemberPacketCount.emit(ils.Metrics())
	mb.metricBigipPoolMemberRequestCount.emit(ils.Metrics())
	mb.metricBigipPoolMemberSessionCount.emit(ils.Metrics())
	mb.metricBigipVirtualServerAvailability.emit(ils.Metrics())
	mb.metricBigipVirtualServerConnectionCount.emit(ils.Metrics())
	mb.metricBigipVirtualServerDataTransmitted.emit(ils.Metrics())
	mb.metricBigipVirtualServerEnabled.emit(ils.Metrics())
	mb.metricBigipVirtualServerPacketCount.emit(ils.Metrics())
	mb.metricBigipVirtualServerRequestCount.emit(ils.Metrics())
	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user settings, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(ro ...ResourceOption) pmetric.Metrics {
	mb.EmitForResource(ro...)
	metrics := pmetric.NewMetrics()
	mb.metricsBuffer.MoveTo(metrics)
	return metrics
}

// RecordBigipNodeAvailabilityDataPoint adds a data point to bigip.node.availability metric.
func (mb *MetricsBuilder) RecordBigipNodeAvailabilityDataPoint(ts pcommon.Timestamp, val int64, availabilityStatusAttributeValue string) {
	mb.metricBigipNodeAvailability.recordDataPoint(mb.startTime, ts, val, availabilityStatusAttributeValue)
}

// RecordBigipNodeConnectionCountDataPoint adds a data point to bigip.node.connection.count metric.
func (mb *MetricsBuilder) RecordBigipNodeConnectionCountDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricBigipNodeConnectionCount.recordDataPoint(mb.startTime, ts, val)
}

// RecordBigipNodeDataTransmittedDataPoint adds a data point to bigip.node.data.transmitted metric.
func (mb *MetricsBuilder) RecordBigipNodeDataTransmittedDataPoint(ts pcommon.Timestamp, val int64, directionAttributeValue string) {
	mb.metricBigipNodeDataTransmitted.recordDataPoint(mb.startTime, ts, val, directionAttributeValue)
}

// RecordBigipNodeEnabledDataPoint adds a data point to bigip.node.enabled metric.
func (mb *MetricsBuilder) RecordBigipNodeEnabledDataPoint(ts pcommon.Timestamp, val int64, enabledStatusAttributeValue string) {
	mb.metricBigipNodeEnabled.recordDataPoint(mb.startTime, ts, val, enabledStatusAttributeValue)
}

// RecordBigipNodePacketCountDataPoint adds a data point to bigip.node.packet.count metric.
func (mb *MetricsBuilder) RecordBigipNodePacketCountDataPoint(ts pcommon.Timestamp, val int64, directionAttributeValue string) {
	mb.metricBigipNodePacketCount.recordDataPoint(mb.startTime, ts, val, directionAttributeValue)
}

// RecordBigipNodeRequestCountDataPoint adds a data point to bigip.node.request.count metric.
func (mb *MetricsBuilder) RecordBigipNodeRequestCountDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricBigipNodeRequestCount.recordDataPoint(mb.startTime, ts, val)
}

// RecordBigipNodeSessionCountDataPoint adds a data point to bigip.node.session.count metric.
func (mb *MetricsBuilder) RecordBigipNodeSessionCountDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricBigipNodeSessionCount.recordDataPoint(mb.startTime, ts, val)
}

// RecordBigipPoolActiveMemberCountDataPoint adds a data point to bigip.pool.active_member.count metric.
func (mb *MetricsBuilder) RecordBigipPoolActiveMemberCountDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricBigipPoolActiveMemberCount.recordDataPoint(mb.startTime, ts, val)
}

// RecordBigipPoolAvailabilityDataPoint adds a data point to bigip.pool.availability metric.
func (mb *MetricsBuilder) RecordBigipPoolAvailabilityDataPoint(ts pcommon.Timestamp, val int64, availabilityStatusAttributeValue string) {
	mb.metricBigipPoolAvailability.recordDataPoint(mb.startTime, ts, val, availabilityStatusAttributeValue)
}

// RecordBigipPoolAvailableMemberCountDataPoint adds a data point to bigip.pool.available_member.count metric.
func (mb *MetricsBuilder) RecordBigipPoolAvailableMemberCountDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricBigipPoolAvailableMemberCount.recordDataPoint(mb.startTime, ts, val)
}

// RecordBigipPoolConnectionCountDataPoint adds a data point to bigip.pool.connection.count metric.
func (mb *MetricsBuilder) RecordBigipPoolConnectionCountDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricBigipPoolConnectionCount.recordDataPoint(mb.startTime, ts, val)
}

// RecordBigipPoolDataTransmittedDataPoint adds a data point to bigip.pool.data.transmitted metric.
func (mb *MetricsBuilder) RecordBigipPoolDataTransmittedDataPoint(ts pcommon.Timestamp, val int64, directionAttributeValue string) {
	mb.metricBigipPoolDataTransmitted.recordDataPoint(mb.startTime, ts, val, directionAttributeValue)
}

// RecordBigipPoolEnabledDataPoint adds a data point to bigip.pool.enabled metric.
func (mb *MetricsBuilder) RecordBigipPoolEnabledDataPoint(ts pcommon.Timestamp, val int64, enabledStatusAttributeValue string) {
	mb.metricBigipPoolEnabled.recordDataPoint(mb.startTime, ts, val, enabledStatusAttributeValue)
}

// RecordBigipPoolMemberCountDataPoint adds a data point to bigip.pool.member.count metric.
func (mb *MetricsBuilder) RecordBigipPoolMemberCountDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricBigipPoolMemberCount.recordDataPoint(mb.startTime, ts, val)
}

// RecordBigipPoolPacketCountDataPoint adds a data point to bigip.pool.packet.count metric.
func (mb *MetricsBuilder) RecordBigipPoolPacketCountDataPoint(ts pcommon.Timestamp, val int64, directionAttributeValue string) {
	mb.metricBigipPoolPacketCount.recordDataPoint(mb.startTime, ts, val, directionAttributeValue)
}

// RecordBigipPoolRequestCountDataPoint adds a data point to bigip.pool.request.count metric.
func (mb *MetricsBuilder) RecordBigipPoolRequestCountDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricBigipPoolRequestCount.recordDataPoint(mb.startTime, ts, val)
}

// RecordBigipPoolMemberAvailabilityDataPoint adds a data point to bigip.pool_member.availability metric.
func (mb *MetricsBuilder) RecordBigipPoolMemberAvailabilityDataPoint(ts pcommon.Timestamp, val int64, availabilityStatusAttributeValue string) {
	mb.metricBigipPoolMemberAvailability.recordDataPoint(mb.startTime, ts, val, availabilityStatusAttributeValue)
}

// RecordBigipPoolMemberConnectionCountDataPoint adds a data point to bigip.pool_member.connection.count metric.
func (mb *MetricsBuilder) RecordBigipPoolMemberConnectionCountDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricBigipPoolMemberConnectionCount.recordDataPoint(mb.startTime, ts, val)
}

// RecordBigipPoolMemberDataTransmittedDataPoint adds a data point to bigip.pool_member.data.transmitted metric.
func (mb *MetricsBuilder) RecordBigipPoolMemberDataTransmittedDataPoint(ts pcommon.Timestamp, val int64, directionAttributeValue string) {
	mb.metricBigipPoolMemberDataTransmitted.recordDataPoint(mb.startTime, ts, val, directionAttributeValue)
}

// RecordBigipPoolMemberEnabledDataPoint adds a data point to bigip.pool_member.enabled metric.
func (mb *MetricsBuilder) RecordBigipPoolMemberEnabledDataPoint(ts pcommon.Timestamp, val int64, enabledStatusAttributeValue string) {
	mb.metricBigipPoolMemberEnabled.recordDataPoint(mb.startTime, ts, val, enabledStatusAttributeValue)
}

// RecordBigipPoolMemberPacketCountDataPoint adds a data point to bigip.pool_member.packet.count metric.
func (mb *MetricsBuilder) RecordBigipPoolMemberPacketCountDataPoint(ts pcommon.Timestamp, val int64, directionAttributeValue string) {
	mb.metricBigipPoolMemberPacketCount.recordDataPoint(mb.startTime, ts, val, directionAttributeValue)
}

// RecordBigipPoolMemberRequestCountDataPoint adds a data point to bigip.pool_member.request.count metric.
func (mb *MetricsBuilder) RecordBigipPoolMemberRequestCountDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricBigipPoolMemberRequestCount.recordDataPoint(mb.startTime, ts, val)
}

// RecordBigipPoolMemberSessionCountDataPoint adds a data point to bigip.pool_member.session.count metric.
func (mb *MetricsBuilder) RecordBigipPoolMemberSessionCountDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricBigipPoolMemberSessionCount.recordDataPoint(mb.startTime, ts, val)
}

// RecordBigipVirtualServerAvailabilityDataPoint adds a data point to bigip.virtual_server.availability metric.
func (mb *MetricsBuilder) RecordBigipVirtualServerAvailabilityDataPoint(ts pcommon.Timestamp, val int64, availabilityStatusAttributeValue string) {
	mb.metricBigipVirtualServerAvailability.recordDataPoint(mb.startTime, ts, val, availabilityStatusAttributeValue)
}

// RecordBigipVirtualServerConnectionCountDataPoint adds a data point to bigip.virtual_server.connection.count metric.
func (mb *MetricsBuilder) RecordBigipVirtualServerConnectionCountDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricBigipVirtualServerConnectionCount.recordDataPoint(mb.startTime, ts, val)
}

// RecordBigipVirtualServerDataTransmittedDataPoint adds a data point to bigip.virtual_server.data.transmitted metric.
func (mb *MetricsBuilder) RecordBigipVirtualServerDataTransmittedDataPoint(ts pcommon.Timestamp, val int64, directionAttributeValue string) {
	mb.metricBigipVirtualServerDataTransmitted.recordDataPoint(mb.startTime, ts, val, directionAttributeValue)
}

// RecordBigipVirtualServerEnabledDataPoint adds a data point to bigip.virtual_server.enabled metric.
func (mb *MetricsBuilder) RecordBigipVirtualServerEnabledDataPoint(ts pcommon.Timestamp, val int64, enabledStatusAttributeValue string) {
	mb.metricBigipVirtualServerEnabled.recordDataPoint(mb.startTime, ts, val, enabledStatusAttributeValue)
}

// RecordBigipVirtualServerPacketCountDataPoint adds a data point to bigip.virtual_server.packet.count metric.
func (mb *MetricsBuilder) RecordBigipVirtualServerPacketCountDataPoint(ts pcommon.Timestamp, val int64, directionAttributeValue string) {
	mb.metricBigipVirtualServerPacketCount.recordDataPoint(mb.startTime, ts, val, directionAttributeValue)
}

// RecordBigipVirtualServerRequestCountDataPoint adds a data point to bigip.virtual_server.request.count metric.
func (mb *MetricsBuilder) RecordBigipVirtualServerRequestCountDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricBigipVirtualServerRequestCount.recordDataPoint(mb.startTime, ts, val)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}

// Attributes contains the possible metric attributes that can be used.
var Attributes = struct {
	// AvailabilityStatus (The availability status.)
	AvailabilityStatus string
	// Direction (The direction of data.)
	Direction string
	// EnabledStatus (The enabled status.)
	EnabledStatus string
}{
	"status",
	"direction",
	"status",
}

// A is an alias for Attributes.
var A = Attributes

// AttributeAvailabilityStatus are the possible values that the attribute "availability.status" can have.
var AttributeAvailabilityStatus = struct {
	Offline   string
	Unknown   string
	Available string
}{
	"offline",
	"unknown",
	"available",
}

// AttributeDirection are the possible values that the attribute "direction" can have.
var AttributeDirection = struct {
	Sent     string
	Received string
}{
	"sent",
	"received",
}

// AttributeEnabledStatus are the possible values that the attribute "enabled.status" can have.
var AttributeEnabledStatus = struct {
	Disabled string
	Enabled  string
}{
	"disabled",
	"enabled",
}
