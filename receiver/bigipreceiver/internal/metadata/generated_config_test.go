// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"path/filepath"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/confmap/confmaptest"
)

func TestResourceAttributesConfig(t *testing.T) {
	tests := []struct {
		name string
		want ResourceAttributesSettings
	}{
		{
			name: "default",
			want: DefaultResourceAttributesSettings(),
		},
		{
			name: "all_set",
			want: ResourceAttributesSettings{
				BigipNodeIPAddress:            ResourceAttributeSettings{Enabled: true},
				BigipNodeName:                 ResourceAttributeSettings{Enabled: true},
				BigipPoolName:                 ResourceAttributeSettings{Enabled: true},
				BigipPoolMemberIPAddress:      ResourceAttributeSettings{Enabled: true},
				BigipPoolMemberName:           ResourceAttributeSettings{Enabled: true},
				BigipVirtualServerDestination: ResourceAttributeSettings{Enabled: true},
				BigipVirtualServerName:        ResourceAttributeSettings{Enabled: true},
			},
		},
		{
			name: "none_set",
			want: ResourceAttributesSettings{
				BigipNodeIPAddress:            ResourceAttributeSettings{Enabled: false},
				BigipNodeName:                 ResourceAttributeSettings{Enabled: false},
				BigipPoolName:                 ResourceAttributeSettings{Enabled: false},
				BigipPoolMemberIPAddress:      ResourceAttributeSettings{Enabled: false},
				BigipPoolMemberName:           ResourceAttributeSettings{Enabled: false},
				BigipVirtualServerDestination: ResourceAttributeSettings{Enabled: false},
				BigipVirtualServerName:        ResourceAttributeSettings{Enabled: false},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadResourceAttributesSettings(t, tt.name)
			if diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(ResourceAttributeSettings{})); diff != "" {
				t.Errorf("Config mismatch (-expected +actual):\n%s", diff)
			}
		})
	}
}

func TestMetricsBuilderConfig(t *testing.T) {
	tests := []struct {
		name string
		want MetricsBuilderConfig
	}{
		{
			name: "default",
			want: DefaultMetricsBuilderConfig(),
		},
		{
			name: "all_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsSettings{
					BigipNodeAvailability:             MetricSettings{Enabled: true},
					BigipNodeConnectionCount:          MetricSettings{Enabled: true},
					BigipNodeDataTransmitted:          MetricSettings{Enabled: true},
					BigipNodeEnabled:                  MetricSettings{Enabled: true},
					BigipNodePacketCount:              MetricSettings{Enabled: true},
					BigipNodeRequestCount:             MetricSettings{Enabled: true},
					BigipNodeSessionCount:             MetricSettings{Enabled: true},
					BigipPoolAvailability:             MetricSettings{Enabled: true},
					BigipPoolConnectionCount:          MetricSettings{Enabled: true},
					BigipPoolDataTransmitted:          MetricSettings{Enabled: true},
					BigipPoolEnabled:                  MetricSettings{Enabled: true},
					BigipPoolMemberCount:              MetricSettings{Enabled: true},
					BigipPoolPacketCount:              MetricSettings{Enabled: true},
					BigipPoolRequestCount:             MetricSettings{Enabled: true},
					BigipPoolMemberAvailability:       MetricSettings{Enabled: true},
					BigipPoolMemberConnectionCount:    MetricSettings{Enabled: true},
					BigipPoolMemberDataTransmitted:    MetricSettings{Enabled: true},
					BigipPoolMemberEnabled:            MetricSettings{Enabled: true},
					BigipPoolMemberPacketCount:        MetricSettings{Enabled: true},
					BigipPoolMemberRequestCount:       MetricSettings{Enabled: true},
					BigipPoolMemberSessionCount:       MetricSettings{Enabled: true},
					BigipVirtualServerAvailability:    MetricSettings{Enabled: true},
					BigipVirtualServerConnectionCount: MetricSettings{Enabled: true},
					BigipVirtualServerDataTransmitted: MetricSettings{Enabled: true},
					BigipVirtualServerEnabled:         MetricSettings{Enabled: true},
					BigipVirtualServerPacketCount:     MetricSettings{Enabled: true},
					BigipVirtualServerRequestCount:    MetricSettings{Enabled: true},
				},
				ResourceAttributes: ResourceAttributesSettings{
					BigipNodeIPAddress:            ResourceAttributeSettings{Enabled: true},
					BigipNodeName:                 ResourceAttributeSettings{Enabled: true},
					BigipPoolName:                 ResourceAttributeSettings{Enabled: true},
					BigipPoolMemberIPAddress:      ResourceAttributeSettings{Enabled: true},
					BigipPoolMemberName:           ResourceAttributeSettings{Enabled: true},
					BigipVirtualServerDestination: ResourceAttributeSettings{Enabled: true},
					BigipVirtualServerName:        ResourceAttributeSettings{Enabled: true},
				},
			},
		},
		{
			name: "none_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsSettings{
					BigipNodeAvailability:             MetricSettings{Enabled: false},
					BigipNodeConnectionCount:          MetricSettings{Enabled: false},
					BigipNodeDataTransmitted:          MetricSettings{Enabled: false},
					BigipNodeEnabled:                  MetricSettings{Enabled: false},
					BigipNodePacketCount:              MetricSettings{Enabled: false},
					BigipNodeRequestCount:             MetricSettings{Enabled: false},
					BigipNodeSessionCount:             MetricSettings{Enabled: false},
					BigipPoolAvailability:             MetricSettings{Enabled: false},
					BigipPoolConnectionCount:          MetricSettings{Enabled: false},
					BigipPoolDataTransmitted:          MetricSettings{Enabled: false},
					BigipPoolEnabled:                  MetricSettings{Enabled: false},
					BigipPoolMemberCount:              MetricSettings{Enabled: false},
					BigipPoolPacketCount:              MetricSettings{Enabled: false},
					BigipPoolRequestCount:             MetricSettings{Enabled: false},
					BigipPoolMemberAvailability:       MetricSettings{Enabled: false},
					BigipPoolMemberConnectionCount:    MetricSettings{Enabled: false},
					BigipPoolMemberDataTransmitted:    MetricSettings{Enabled: false},
					BigipPoolMemberEnabled:            MetricSettings{Enabled: false},
					BigipPoolMemberPacketCount:        MetricSettings{Enabled: false},
					BigipPoolMemberRequestCount:       MetricSettings{Enabled: false},
					BigipPoolMemberSessionCount:       MetricSettings{Enabled: false},
					BigipVirtualServerAvailability:    MetricSettings{Enabled: false},
					BigipVirtualServerConnectionCount: MetricSettings{Enabled: false},
					BigipVirtualServerDataTransmitted: MetricSettings{Enabled: false},
					BigipVirtualServerEnabled:         MetricSettings{Enabled: false},
					BigipVirtualServerPacketCount:     MetricSettings{Enabled: false},
					BigipVirtualServerRequestCount:    MetricSettings{Enabled: false},
				},
				ResourceAttributes: ResourceAttributesSettings{
					BigipNodeIPAddress:            ResourceAttributeSettings{Enabled: false},
					BigipNodeName:                 ResourceAttributeSettings{Enabled: false},
					BigipPoolName:                 ResourceAttributeSettings{Enabled: false},
					BigipPoolMemberIPAddress:      ResourceAttributeSettings{Enabled: false},
					BigipPoolMemberName:           ResourceAttributeSettings{Enabled: false},
					BigipVirtualServerDestination: ResourceAttributeSettings{Enabled: false},
					BigipVirtualServerName:        ResourceAttributeSettings{Enabled: false},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadMetricsBuilderConfig(t, tt.name)
			if diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(MetricSettings{}, ResourceAttributeSettings{})); diff != "" {
				t.Errorf("Config mismatch (-expected +actual):\n%s", diff)
			}
		})
	}
}

func loadResourceAttributesSettings(t *testing.T, name string) ResourceAttributesSettings {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	sub, err = sub.Sub("resource_attributes")
	require.NoError(t, err)
	cfg := DefaultResourceAttributesSettings()
	require.NoError(t, component.UnmarshalConfig(sub, &cfg))
	return cfg
}

func loadMetricsBuilderConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, component.UnmarshalConfig(sub, &cfg))
	return cfg
}
