// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/model/pdata"
	conventions "go.opentelemetry.io/collector/model/semconv/v1.6.1"
)

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`
}

// MetricsSettings provides settings for couchbasereceiver metrics.
type MetricsSettings struct {
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{}
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user settings.
type MetricsBuilder struct {
	startTime        pdata.Timestamp
	settings         MetricsSettings
	resourceBuilders []*ResourceBuilder
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pdata.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func NewMetricsBuilder(settings MetricsSettings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		startTime: pdata.NewTimestampFromTime(time.Now()),
		settings:  settings,
	}
	for _, op := range options {
		op(mb)
	}
	return mb
}

// emitOption applies changes to pdata.Metrics emitted.
type emitOption func(*pdata.Metrics)

// WithResource copies the pdata.Resource into the emitted pdata.Metrics.
func WithResource(resource pdata.Resource) emitOption {
	return func(md *pdata.Metrics) {
		resource.CopyTo(md.ResourceMetrics().At(0).Resource())
	}
}

// WithCapacity calls EnsureCapacity on the pdata.Metrics.
func WithCapacity(capacity int) emitOption {
	return func(md *pdata.Metrics) {
		if capacity > 0 {
			md.ResourceMetrics().At(0).InstrumentationLibraryMetrics().At(0).Metrics().EnsureCapacity(capacity)
		}
	}
}

// Emit appends generated metrics to a pdata.MetricsSlice and updates the internal state to be ready for recording
// another set of data points. This function will be doing all transformations required to produce metric representation
// defined in metadata and user settings, e.g. delta/cumulative translation.
func (mb *MetricsBuilder) Emit(options ...emitOption) pdata.Metrics {
	md := mb.newMetricData()

	for _, rb := range mb.resourceBuilders {
		rm := md.ResourceMetrics().AppendEmpty()
		ilm := rm.InstrumentationLibraryMetrics().AppendEmpty()
		ilm.InstrumentationLibrary().SetName("otelcol/couchbasereceiver")
		rm.SetSchemaUrl(conventions.SchemaURL)
		rb.emit(rm)
	}
	return md
}

type ResourceBuilder struct {
	resource  pdata.Resource
	startTime pdata.Timestamp
}

func (rb *ResourceBuilder) Attributes() pdata.AttributeMap {
	return rb.resource.Attributes()
}

func (rb *ResourceBuilder) emit(rm pdata.ResourceMetrics) {
	rb.resource.CopyTo(rm.Resource())

}

func (mb *MetricsBuilder) NewResourceBuilder() *ResourceBuilder {
	rb := ResourceBuilder{
		resource: pdata.NewResource(),
	}
	mb.resourceBuilders = append(mb.resourceBuilders, &rb)
	return &rb
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pdata.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}

// newMetricData creates new pdata.Metrics and sets the InstrumentationLibrary
// name on the ResourceMetrics.
func (mb *MetricsBuilder) newMetricData() pdata.Metrics {
	md := pdata.NewMetrics()
	return md
}

// Attributes contains the possible metric attributes that can be used.
var Attributes = struct {
}{}

// A is an alias for Attributes.
var A = Attributes
