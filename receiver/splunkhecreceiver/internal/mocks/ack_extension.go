// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	component "go.opentelemetry.io/collector/component"

	mock "github.com/stretchr/testify/mock"
)

// AckExtension is an autogenerated mock type for the AckExtension type
type AckExtension struct {
	mock.Mock
}

// Ack provides a mock function with given fields: partitionID, ackID
func (_m *AckExtension) Ack(partitionID string, ackID uint64) {
	_m.Called(partitionID, ackID)
}

// ProcessEvent provides a mock function with given fields: partitionID
func (_m *AckExtension) ProcessEvent(partitionID string) uint64 {
	ret := _m.Called(partitionID)

	if len(ret) == 0 {
		panic("no return value specified for ProcessEvent")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(partitionID)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// QueryAcks provides a mock function with given fields: partitionID, ackIDs
func (_m *AckExtension) QueryAcks(partitionID string, ackIDs []uint64) map[uint64]bool {
	ret := _m.Called(partitionID, ackIDs)

	if len(ret) == 0 {
		panic("no return value specified for QueryAcks")
	}

	var r0 map[uint64]bool
	if rf, ok := ret.Get(0).(func(string, []uint64) map[uint64]bool); ok {
		r0 = rf(partitionID, ackIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint64]bool)
		}
	}

	return r0
}

// Shutdown provides a mock function with given fields: ctx
func (_m *AckExtension) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: ctx, host
func (_m *AckExtension) Start(ctx context.Context, host component.Host) error {
	ret := _m.Called(ctx, host)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, component.Host) error); ok {
		r0 = rf(ctx, host)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAckExtension creates a new instance of AckExtension. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAckExtension(t interface {
	mock.TestingT
	Cleanup(func())
}) *AckExtension {
	mock := &AckExtension{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}