// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"path/filepath"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/confmap/confmaptest"
)

func TestResourceAttributesConfig(t *testing.T) {
	tests := []struct {
		name string
		want ResourceAttributesSettings
	}{
		{
			name: "default",
			want: DefaultResourceAttributesSettings(),
		},
		{
			name: "all_set",
			want: ResourceAttributesSettings{
				AwsVolumeID:                  ResourceAttributeSettings{Enabled: true},
				ContainerID:                  ResourceAttributeSettings{Enabled: true},
				FsType:                       ResourceAttributeSettings{Enabled: true},
				GcePdName:                    ResourceAttributeSettings{Enabled: true},
				GlusterfsEndpointsName:       ResourceAttributeSettings{Enabled: true},
				GlusterfsPath:                ResourceAttributeSettings{Enabled: true},
				K8sContainerName:             ResourceAttributeSettings{Enabled: true},
				K8sNamespaceName:             ResourceAttributeSettings{Enabled: true},
				K8sNodeName:                  ResourceAttributeSettings{Enabled: true},
				K8sPersistentvolumeclaimName: ResourceAttributeSettings{Enabled: true},
				K8sPodName:                   ResourceAttributeSettings{Enabled: true},
				K8sPodUID:                    ResourceAttributeSettings{Enabled: true},
				K8sVolumeName:                ResourceAttributeSettings{Enabled: true},
				K8sVolumeType:                ResourceAttributeSettings{Enabled: true},
				Partition:                    ResourceAttributeSettings{Enabled: true},
			},
		},
		{
			name: "none_set",
			want: ResourceAttributesSettings{
				AwsVolumeID:                  ResourceAttributeSettings{Enabled: false},
				ContainerID:                  ResourceAttributeSettings{Enabled: false},
				FsType:                       ResourceAttributeSettings{Enabled: false},
				GcePdName:                    ResourceAttributeSettings{Enabled: false},
				GlusterfsEndpointsName:       ResourceAttributeSettings{Enabled: false},
				GlusterfsPath:                ResourceAttributeSettings{Enabled: false},
				K8sContainerName:             ResourceAttributeSettings{Enabled: false},
				K8sNamespaceName:             ResourceAttributeSettings{Enabled: false},
				K8sNodeName:                  ResourceAttributeSettings{Enabled: false},
				K8sPersistentvolumeclaimName: ResourceAttributeSettings{Enabled: false},
				K8sPodName:                   ResourceAttributeSettings{Enabled: false},
				K8sPodUID:                    ResourceAttributeSettings{Enabled: false},
				K8sVolumeName:                ResourceAttributeSettings{Enabled: false},
				K8sVolumeType:                ResourceAttributeSettings{Enabled: false},
				Partition:                    ResourceAttributeSettings{Enabled: false},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadResourceAttributesSettings(t, tt.name)
			if diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(ResourceAttributeSettings{})); diff != "" {
				t.Errorf("Config mismatch (-expected +actual):\n%s", diff)
			}
		})
	}
}

func TestMetricsBuilderConfig(t *testing.T) {
	tests := []struct {
		name string
		want MetricsBuilderConfig
	}{
		{
			name: "default",
			want: DefaultMetricsBuilderConfig(),
		},
		{
			name: "all_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsSettings{
					ContainerCPUTime:               MetricSettings{Enabled: true},
					ContainerCPUUtilization:        MetricSettings{Enabled: true},
					ContainerFilesystemAvailable:   MetricSettings{Enabled: true},
					ContainerFilesystemCapacity:    MetricSettings{Enabled: true},
					ContainerFilesystemUsage:       MetricSettings{Enabled: true},
					ContainerMemoryAvailable:       MetricSettings{Enabled: true},
					ContainerMemoryMajorPageFaults: MetricSettings{Enabled: true},
					ContainerMemoryPageFaults:      MetricSettings{Enabled: true},
					ContainerMemoryRss:             MetricSettings{Enabled: true},
					ContainerMemoryUsage:           MetricSettings{Enabled: true},
					ContainerMemoryWorkingSet:      MetricSettings{Enabled: true},
					K8sNodeCPUTime:                 MetricSettings{Enabled: true},
					K8sNodeCPUUtilization:          MetricSettings{Enabled: true},
					K8sNodeFilesystemAvailable:     MetricSettings{Enabled: true},
					K8sNodeFilesystemCapacity:      MetricSettings{Enabled: true},
					K8sNodeFilesystemUsage:         MetricSettings{Enabled: true},
					K8sNodeMemoryAvailable:         MetricSettings{Enabled: true},
					K8sNodeMemoryMajorPageFaults:   MetricSettings{Enabled: true},
					K8sNodeMemoryPageFaults:        MetricSettings{Enabled: true},
					K8sNodeMemoryRss:               MetricSettings{Enabled: true},
					K8sNodeMemoryUsage:             MetricSettings{Enabled: true},
					K8sNodeMemoryWorkingSet:        MetricSettings{Enabled: true},
					K8sNodeNetworkErrors:           MetricSettings{Enabled: true},
					K8sNodeNetworkIo:               MetricSettings{Enabled: true},
					K8sPodCPUTime:                  MetricSettings{Enabled: true},
					K8sPodCPUUtilization:           MetricSettings{Enabled: true},
					K8sPodFilesystemAvailable:      MetricSettings{Enabled: true},
					K8sPodFilesystemCapacity:       MetricSettings{Enabled: true},
					K8sPodFilesystemUsage:          MetricSettings{Enabled: true},
					K8sPodMemoryAvailable:          MetricSettings{Enabled: true},
					K8sPodMemoryMajorPageFaults:    MetricSettings{Enabled: true},
					K8sPodMemoryPageFaults:         MetricSettings{Enabled: true},
					K8sPodMemoryRss:                MetricSettings{Enabled: true},
					K8sPodMemoryUsage:              MetricSettings{Enabled: true},
					K8sPodMemoryWorkingSet:         MetricSettings{Enabled: true},
					K8sPodNetworkErrors:            MetricSettings{Enabled: true},
					K8sPodNetworkIo:                MetricSettings{Enabled: true},
					K8sVolumeAvailable:             MetricSettings{Enabled: true},
					K8sVolumeCapacity:              MetricSettings{Enabled: true},
					K8sVolumeInodes:                MetricSettings{Enabled: true},
					K8sVolumeInodesFree:            MetricSettings{Enabled: true},
					K8sVolumeInodesUsed:            MetricSettings{Enabled: true},
				},
				ResourceAttributes: ResourceAttributesSettings{
					AwsVolumeID:                  ResourceAttributeSettings{Enabled: true},
					ContainerID:                  ResourceAttributeSettings{Enabled: true},
					FsType:                       ResourceAttributeSettings{Enabled: true},
					GcePdName:                    ResourceAttributeSettings{Enabled: true},
					GlusterfsEndpointsName:       ResourceAttributeSettings{Enabled: true},
					GlusterfsPath:                ResourceAttributeSettings{Enabled: true},
					K8sContainerName:             ResourceAttributeSettings{Enabled: true},
					K8sNamespaceName:             ResourceAttributeSettings{Enabled: true},
					K8sNodeName:                  ResourceAttributeSettings{Enabled: true},
					K8sPersistentvolumeclaimName: ResourceAttributeSettings{Enabled: true},
					K8sPodName:                   ResourceAttributeSettings{Enabled: true},
					K8sPodUID:                    ResourceAttributeSettings{Enabled: true},
					K8sVolumeName:                ResourceAttributeSettings{Enabled: true},
					K8sVolumeType:                ResourceAttributeSettings{Enabled: true},
					Partition:                    ResourceAttributeSettings{Enabled: true},
				},
			},
		},
		{
			name: "none_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsSettings{
					ContainerCPUTime:               MetricSettings{Enabled: false},
					ContainerCPUUtilization:        MetricSettings{Enabled: false},
					ContainerFilesystemAvailable:   MetricSettings{Enabled: false},
					ContainerFilesystemCapacity:    MetricSettings{Enabled: false},
					ContainerFilesystemUsage:       MetricSettings{Enabled: false},
					ContainerMemoryAvailable:       MetricSettings{Enabled: false},
					ContainerMemoryMajorPageFaults: MetricSettings{Enabled: false},
					ContainerMemoryPageFaults:      MetricSettings{Enabled: false},
					ContainerMemoryRss:             MetricSettings{Enabled: false},
					ContainerMemoryUsage:           MetricSettings{Enabled: false},
					ContainerMemoryWorkingSet:      MetricSettings{Enabled: false},
					K8sNodeCPUTime:                 MetricSettings{Enabled: false},
					K8sNodeCPUUtilization:          MetricSettings{Enabled: false},
					K8sNodeFilesystemAvailable:     MetricSettings{Enabled: false},
					K8sNodeFilesystemCapacity:      MetricSettings{Enabled: false},
					K8sNodeFilesystemUsage:         MetricSettings{Enabled: false},
					K8sNodeMemoryAvailable:         MetricSettings{Enabled: false},
					K8sNodeMemoryMajorPageFaults:   MetricSettings{Enabled: false},
					K8sNodeMemoryPageFaults:        MetricSettings{Enabled: false},
					K8sNodeMemoryRss:               MetricSettings{Enabled: false},
					K8sNodeMemoryUsage:             MetricSettings{Enabled: false},
					K8sNodeMemoryWorkingSet:        MetricSettings{Enabled: false},
					K8sNodeNetworkErrors:           MetricSettings{Enabled: false},
					K8sNodeNetworkIo:               MetricSettings{Enabled: false},
					K8sPodCPUTime:                  MetricSettings{Enabled: false},
					K8sPodCPUUtilization:           MetricSettings{Enabled: false},
					K8sPodFilesystemAvailable:      MetricSettings{Enabled: false},
					K8sPodFilesystemCapacity:       MetricSettings{Enabled: false},
					K8sPodFilesystemUsage:          MetricSettings{Enabled: false},
					K8sPodMemoryAvailable:          MetricSettings{Enabled: false},
					K8sPodMemoryMajorPageFaults:    MetricSettings{Enabled: false},
					K8sPodMemoryPageFaults:         MetricSettings{Enabled: false},
					K8sPodMemoryRss:                MetricSettings{Enabled: false},
					K8sPodMemoryUsage:              MetricSettings{Enabled: false},
					K8sPodMemoryWorkingSet:         MetricSettings{Enabled: false},
					K8sPodNetworkErrors:            MetricSettings{Enabled: false},
					K8sPodNetworkIo:                MetricSettings{Enabled: false},
					K8sVolumeAvailable:             MetricSettings{Enabled: false},
					K8sVolumeCapacity:              MetricSettings{Enabled: false},
					K8sVolumeInodes:                MetricSettings{Enabled: false},
					K8sVolumeInodesFree:            MetricSettings{Enabled: false},
					K8sVolumeInodesUsed:            MetricSettings{Enabled: false},
				},
				ResourceAttributes: ResourceAttributesSettings{
					AwsVolumeID:                  ResourceAttributeSettings{Enabled: false},
					ContainerID:                  ResourceAttributeSettings{Enabled: false},
					FsType:                       ResourceAttributeSettings{Enabled: false},
					GcePdName:                    ResourceAttributeSettings{Enabled: false},
					GlusterfsEndpointsName:       ResourceAttributeSettings{Enabled: false},
					GlusterfsPath:                ResourceAttributeSettings{Enabled: false},
					K8sContainerName:             ResourceAttributeSettings{Enabled: false},
					K8sNamespaceName:             ResourceAttributeSettings{Enabled: false},
					K8sNodeName:                  ResourceAttributeSettings{Enabled: false},
					K8sPersistentvolumeclaimName: ResourceAttributeSettings{Enabled: false},
					K8sPodName:                   ResourceAttributeSettings{Enabled: false},
					K8sPodUID:                    ResourceAttributeSettings{Enabled: false},
					K8sVolumeName:                ResourceAttributeSettings{Enabled: false},
					K8sVolumeType:                ResourceAttributeSettings{Enabled: false},
					Partition:                    ResourceAttributeSettings{Enabled: false},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadMetricsBuilderConfig(t, tt.name)
			if diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(MetricSettings{}, ResourceAttributeSettings{})); diff != "" {
				t.Errorf("Config mismatch (-expected +actual):\n%s", diff)
			}
		})
	}
}

func loadResourceAttributesSettings(t *testing.T, name string) ResourceAttributesSettings {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	sub, err = sub.Sub("resource_attributes")
	require.NoError(t, err)
	cfg := DefaultResourceAttributesSettings()
	require.NoError(t, component.UnmarshalConfig(sub, &cfg))
	return cfg
}

func loadMetricsBuilderConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, component.UnmarshalConfig(sub, &cfg))
	return cfg
}
