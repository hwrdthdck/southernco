// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"errors"

	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/config/configtelemetry"
)

// Deprecated: [v0.108.0] use LeveledMeter instead.
func Meter(settings component.TelemetrySettings) metric.Meter {
	return settings.MeterProvider.Meter("github.com/open-telemetry/opentelemetry-collector-contrib/receiver/jaegerreceiver")
}

func LeveledMeter(settings component.TelemetrySettings, level configtelemetry.Level) metric.Meter {
	return settings.LeveledMeterProvider(level).Meter("github.com/open-telemetry/opentelemetry-collector-contrib/receiver/jaegerreceiver")
}

func Tracer(settings component.TelemetrySettings) trace.Tracer {
	return settings.TracerProvider.Tracer("github.com/open-telemetry/opentelemetry-collector-contrib/receiver/jaegerreceiver")
}

// TelemetryBuilder provides an interface for components to report telemetry
// as defined in metadata and user config.
type TelemetryBuilder struct {
	meter                                         metric.Meter
	JaegerReceiverThriftUDPServerPacketsDropped   metric.Int64UpDownCounter
	JaegerReceiverThriftUDPServerPacketsProcessed metric.Int64UpDownCounter
	meters                                        map[configtelemetry.Level]metric.Meter
}

// telemetryBuilderOption applies changes to default builder.
type telemetryBuilderOption func(*TelemetryBuilder)

// NewTelemetryBuilder provides a struct with methods to update all internal telemetry
// for a component
func NewTelemetryBuilder(settings component.TelemetrySettings, options ...telemetryBuilderOption) (*TelemetryBuilder, error) {
	builder := TelemetryBuilder{meters: map[configtelemetry.Level]metric.Meter{}}
	for _, op := range options {
		op(&builder)
	}
	builder.meters[configtelemetry.LevelBasic] = LeveledMeter(settings, configtelemetry.LevelBasic)
	var err, errs error
	builder.JaegerReceiverThriftUDPServerPacketsDropped, err = builder.meters[configtelemetry.LevelBasic].Int64UpDownCounter(
		"otelcol_jaeger.receiver.thrift.udp.server.packets.dropped",
		metric.WithDescription("Number of thrift packets discarded due to a full receive queue"),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.JaegerReceiverThriftUDPServerPacketsProcessed, err = builder.meters[configtelemetry.LevelBasic].Int64UpDownCounter(
		"otelcol_jaeger.receiver.thrift.udp.server.packets.processed",
		metric.WithDescription("Number of successfully processed thrift packets"),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	return &builder, errs
}
