// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"path/filepath"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/confmap/confmaptest"
)

func TestMetricsBuilderConfig(t *testing.T) {
	tests := []struct {
		name string
		want MetricsBuilderConfig
	}{
		{
			name: "default",
			want: DefaultMetricsBuilderConfig(),
		},
		{
			name: "all_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsSettings{
					ProcessRuntimeMemstatsBuckHashSys:   MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsFrees:         MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsGcCPUFraction: MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsGcSys:         MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsHeapAlloc:     MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsHeapIdle:      MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsHeapInuse:     MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsHeapObjects:   MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsHeapReleased:  MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsHeapSys:       MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsLastPause:     MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsLookups:       MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsMallocs:       MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsMcacheInuse:   MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsMcacheSys:     MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsMspanInuse:    MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsMspanSys:      MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsNextGc:        MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsNumForcedGc:   MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsNumGc:         MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsOtherSys:      MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsPauseTotal:    MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsStackInuse:    MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsStackSys:      MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsSys:           MetricSettings{Enabled: true},
					ProcessRuntimeMemstatsTotalAlloc:    MetricSettings{Enabled: true},
				},
				ResourceAttributes: ResourceAttributesSettings{},
			},
		},
		{
			name: "none_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsSettings{
					ProcessRuntimeMemstatsBuckHashSys:   MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsFrees:         MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsGcCPUFraction: MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsGcSys:         MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsHeapAlloc:     MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsHeapIdle:      MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsHeapInuse:     MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsHeapObjects:   MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsHeapReleased:  MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsHeapSys:       MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsLastPause:     MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsLookups:       MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsMallocs:       MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsMcacheInuse:   MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsMcacheSys:     MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsMspanInuse:    MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsMspanSys:      MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsNextGc:        MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsNumForcedGc:   MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsNumGc:         MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsOtherSys:      MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsPauseTotal:    MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsStackInuse:    MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsStackSys:      MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsSys:           MetricSettings{Enabled: false},
					ProcessRuntimeMemstatsTotalAlloc:    MetricSettings{Enabled: false},
				},
				ResourceAttributes: ResourceAttributesSettings{},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadMetricsBuilderConfig(t, tt.name)
			if diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(MetricSettings{}, ResourceAttributeSettings{})); diff != "" {
				t.Errorf("Config mismatch (-expected +actual):\n%s", diff)
			}
		})
	}
}

func loadMetricsBuilderConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, component.UnmarshalConfig(sub, &cfg))
	return cfg
}
