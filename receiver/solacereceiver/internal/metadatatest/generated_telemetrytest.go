// Code generated by mdatagen. DO NOT EDIT.

package metadatatest

import (
	"context"
	"testing"

	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/component/componenttest"
	"go.opentelemetry.io/collector/receiver"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.opentelemetry.io/otel/sdk/metric/metricdata"
	"go.opentelemetry.io/otel/sdk/metric/metricdata/metricdatatest"
)

type Telemetry struct {
	componenttest.Telemetry
}

func SetupTelemetry(opts ...componenttest.TelemetryOption) Telemetry {
	return Telemetry{Telemetry: componenttest.NewTelemetry(opts...)}
}

func (tt *Telemetry) NewSettings() receiver.Settings {
	set := receivertest.NewNopSettings()
	set.ID = component.NewID(component.MustNewType("solace"))
	set.TelemetrySettings = tt.NewTelemetrySettings()
	return set
}

func (tt *Telemetry) AssertMetrics(t *testing.T, expected []metricdata.Metrics, opts ...metricdatatest.Option) {
	var md metricdata.ResourceMetrics
	require.NoError(t, tt.Reader.Collect(context.Background(), &md))
	// ensure all required metrics are present
	for _, want := range expected {
		got := getMetricFromResource(want.Name, md)
		metricdatatest.AssertEqual(t, want, got, opts...)
	}

	// ensure no additional metrics are emitted
	require.Equal(t, len(expected), lenMetrics(md))
}

func AssertEqualSolacereceiverDroppedEgressSpans(t *testing.T, tt componenttest.Telemetry, dps []metricdata.DataPoint[int64], opts ...metricdatatest.Option) {
	want := metricdata.Metrics{
		Name:        "otelcol_solacereceiver_dropped_egress_spans",
		Description: "Number of dropped egress spans",
		Unit:        "1",
		Data: metricdata.Sum[int64]{
			Temporality: metricdata.CumulativeTemporality,
			IsMonotonic: true,
			DataPoints:  dps,
		},
	}
	got := getMetric(t, tt, "otelcol_solacereceiver_dropped_egress_spans")
	metricdatatest.AssertEqual(t, want, got, opts...)
}

func AssertEqualSolacereceiverDroppedSpanMessages(t *testing.T, tt componenttest.Telemetry, dps []metricdata.DataPoint[int64], opts ...metricdatatest.Option) {
	want := metricdata.Metrics{
		Name:        "otelcol_solacereceiver_dropped_span_messages",
		Description: "Number of dropped span messages",
		Unit:        "1",
		Data: metricdata.Sum[int64]{
			Temporality: metricdata.CumulativeTemporality,
			IsMonotonic: true,
			DataPoints:  dps,
		},
	}
	got := getMetric(t, tt, "otelcol_solacereceiver_dropped_span_messages")
	metricdatatest.AssertEqual(t, want, got, opts...)
}

func AssertEqualSolacereceiverFailedReconnections(t *testing.T, tt componenttest.Telemetry, dps []metricdata.DataPoint[int64], opts ...metricdatatest.Option) {
	want := metricdata.Metrics{
		Name:        "otelcol_solacereceiver_failed_reconnections",
		Description: "Number of failed broker reconnections",
		Unit:        "1",
		Data: metricdata.Sum[int64]{
			Temporality: metricdata.CumulativeTemporality,
			IsMonotonic: true,
			DataPoints:  dps,
		},
	}
	got := getMetric(t, tt, "otelcol_solacereceiver_failed_reconnections")
	metricdatatest.AssertEqual(t, want, got, opts...)
}

func AssertEqualSolacereceiverFatalUnmarshallingErrors(t *testing.T, tt componenttest.Telemetry, dps []metricdata.DataPoint[int64], opts ...metricdatatest.Option) {
	want := metricdata.Metrics{
		Name:        "otelcol_solacereceiver_fatal_unmarshalling_errors",
		Description: "Number of fatal message unmarshalling errors",
		Unit:        "1",
		Data: metricdata.Sum[int64]{
			Temporality: metricdata.CumulativeTemporality,
			IsMonotonic: true,
			DataPoints:  dps,
		},
	}
	got := getMetric(t, tt, "otelcol_solacereceiver_fatal_unmarshalling_errors")
	metricdatatest.AssertEqual(t, want, got, opts...)
}

func AssertEqualSolacereceiverNeedUpgrade(t *testing.T, tt componenttest.Telemetry, dps []metricdata.DataPoint[int64], opts ...metricdatatest.Option) {
	want := metricdata.Metrics{
		Name:        "otelcol_solacereceiver_need_upgrade",
		Description: "Indicates with value 1 that receiver requires an upgrade and is not compatible with messages received from a broker",
		Unit:        "1",
		Data: metricdata.Gauge[int64]{
			DataPoints: dps,
		},
	}
	got := getMetric(t, tt, "otelcol_solacereceiver_need_upgrade")
	metricdatatest.AssertEqual(t, want, got, opts...)
}

func AssertEqualSolacereceiverReceivedSpanMessages(t *testing.T, tt componenttest.Telemetry, dps []metricdata.DataPoint[int64], opts ...metricdatatest.Option) {
	want := metricdata.Metrics{
		Name:        "otelcol_solacereceiver_received_span_messages",
		Description: "Number of received span messages",
		Unit:        "1",
		Data: metricdata.Sum[int64]{
			Temporality: metricdata.CumulativeTemporality,
			IsMonotonic: true,
			DataPoints:  dps,
		},
	}
	got := getMetric(t, tt, "otelcol_solacereceiver_received_span_messages")
	metricdatatest.AssertEqual(t, want, got, opts...)
}

func AssertEqualSolacereceiverReceiverFlowControlRecentRetries(t *testing.T, tt componenttest.Telemetry, dps []metricdata.DataPoint[int64], opts ...metricdatatest.Option) {
	want := metricdata.Metrics{
		Name:        "otelcol_solacereceiver_receiver_flow_control_recent_retries",
		Description: "Most recent/current retry count when flow controlled",
		Unit:        "1",
		Data: metricdata.Gauge[int64]{
			DataPoints: dps,
		},
	}
	got := getMetric(t, tt, "otelcol_solacereceiver_receiver_flow_control_recent_retries")
	metricdatatest.AssertEqual(t, want, got, opts...)
}

func AssertEqualSolacereceiverReceiverFlowControlStatus(t *testing.T, tt componenttest.Telemetry, dps []metricdata.DataPoint[int64], opts ...metricdatatest.Option) {
	want := metricdata.Metrics{
		Name:        "otelcol_solacereceiver_receiver_flow_control_status",
		Description: "Indicates the flow control status of the receiver. 0 = not flow controlled, 1 = currently flow controlled",
		Unit:        "1",
		Data: metricdata.Gauge[int64]{
			DataPoints: dps,
		},
	}
	got := getMetric(t, tt, "otelcol_solacereceiver_receiver_flow_control_status")
	metricdatatest.AssertEqual(t, want, got, opts...)
}

func AssertEqualSolacereceiverReceiverFlowControlTotal(t *testing.T, tt componenttest.Telemetry, dps []metricdata.DataPoint[int64], opts ...metricdatatest.Option) {
	want := metricdata.Metrics{
		Name:        "otelcol_solacereceiver_receiver_flow_control_total",
		Description: "Number of times the receiver instance became flow controlled",
		Unit:        "1",
		Data: metricdata.Sum[int64]{
			Temporality: metricdata.CumulativeTemporality,
			IsMonotonic: true,
			DataPoints:  dps,
		},
	}
	got := getMetric(t, tt, "otelcol_solacereceiver_receiver_flow_control_total")
	metricdatatest.AssertEqual(t, want, got, opts...)
}

func AssertEqualSolacereceiverReceiverFlowControlWithSingleSuccessfulRetry(t *testing.T, tt componenttest.Telemetry, dps []metricdata.DataPoint[int64], opts ...metricdatatest.Option) {
	want := metricdata.Metrics{
		Name:        "otelcol_solacereceiver_receiver_flow_control_with_single_successful_retry",
		Description: "Number of times the receiver instance became flow controlled and resolved situations after the first retry",
		Unit:        "1",
		Data: metricdata.Sum[int64]{
			Temporality: metricdata.CumulativeTemporality,
			IsMonotonic: true,
			DataPoints:  dps,
		},
	}
	got := getMetric(t, tt, "otelcol_solacereceiver_receiver_flow_control_with_single_successful_retry")
	metricdatatest.AssertEqual(t, want, got, opts...)
}

func AssertEqualSolacereceiverReceiverStatus(t *testing.T, tt componenttest.Telemetry, dps []metricdata.DataPoint[int64], opts ...metricdatatest.Option) {
	want := metricdata.Metrics{
		Name:        "otelcol_solacereceiver_receiver_status",
		Description: "Indicates the status of the receiver as an enum. 0 = starting, 1 = connecting, 2 = connected, 3 = disabled (often paired with needs_upgrade), 4 = terminating, 5 = terminated",
		Unit:        "1",
		Data: metricdata.Gauge[int64]{
			DataPoints: dps,
		},
	}
	got := getMetric(t, tt, "otelcol_solacereceiver_receiver_status")
	metricdatatest.AssertEqual(t, want, got, opts...)
}

func AssertEqualSolacereceiverRecoverableUnmarshallingErrors(t *testing.T, tt componenttest.Telemetry, dps []metricdata.DataPoint[int64], opts ...metricdatatest.Option) {
	want := metricdata.Metrics{
		Name:        "otelcol_solacereceiver_recoverable_unmarshalling_errors",
		Description: "Number of recoverable message unmarshalling errors",
		Unit:        "1",
		Data: metricdata.Sum[int64]{
			Temporality: metricdata.CumulativeTemporality,
			IsMonotonic: true,
			DataPoints:  dps,
		},
	}
	got := getMetric(t, tt, "otelcol_solacereceiver_recoverable_unmarshalling_errors")
	metricdatatest.AssertEqual(t, want, got, opts...)
}

func AssertEqualSolacereceiverReportedSpans(t *testing.T, tt componenttest.Telemetry, dps []metricdata.DataPoint[int64], opts ...metricdatatest.Option) {
	want := metricdata.Metrics{
		Name:        "otelcol_solacereceiver_reported_spans",
		Description: "Number of reported spans",
		Unit:        "1",
		Data: metricdata.Sum[int64]{
			Temporality: metricdata.CumulativeTemporality,
			IsMonotonic: true,
			DataPoints:  dps,
		},
	}
	got := getMetric(t, tt, "otelcol_solacereceiver_reported_spans")
	metricdatatest.AssertEqual(t, want, got, opts...)
}

func getMetric(t *testing.T, tt componenttest.Telemetry, name string) metricdata.Metrics {
	var md metricdata.ResourceMetrics
	require.NoError(t, tt.Reader.Collect(context.Background(), &md))
	return getMetricFromResource(name, md)
}

func getMetricFromResource(name string, got metricdata.ResourceMetrics) metricdata.Metrics {
	for _, sm := range got.ScopeMetrics {
		for _, m := range sm.Metrics {
			if m.Name == name {
				return m
			}
		}
	}

	return metricdata.Metrics{}
}

func lenMetrics(got metricdata.ResourceMetrics) int {
	metricsCount := 0
	for _, sm := range got.ScopeMetrics {
		metricsCount += len(sm.Metrics)
	}

	return metricsCount
}
