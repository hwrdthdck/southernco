// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/config"
	"go.opentelemetry.io/collector/model/pdata"
)

// Type is the component type name.
const Type config.Type = "mongoatlasreceiver"

// MetricIntf is an interface to generically interact with generated metric.
type MetricIntf interface {
	Name() string
	New() pdata.Metric
	Init(metric pdata.Metric)
}

// Intentionally not exposing this so that it is opaque and can change freely.
type metricImpl struct {
	name     string
	initFunc func(pdata.Metric)
}

// Name returns the metric name.
func (m *metricImpl) Name() string {
	return m.name
}

// New creates a metric object preinitialized.
func (m *metricImpl) New() pdata.Metric {
	metric := pdata.NewMetric()
	m.Init(metric)
	return metric
}

// Init initializes the provided metric object.
func (m *metricImpl) Init(metric pdata.Metric) {
	m.initFunc(metric)
}

type metricStruct struct {
	MongodbatlasDbCounts                                  MetricIntf
	MongodbatlasDbSize                                    MetricIntf
	MongodbatlasDiskPartitionIops                         MetricIntf
	MongodbatlasDiskPartitionLatency                      MetricIntf
	MongodbatlasDiskPartitionSpace                        MetricIntf
	MongodbatlasDiskPartitionUtilization                  MetricIntf
	MongodbatlasProcessAsserts                            MetricIntf
	MongodbatlasProcessBackgroundFlush                    MetricIntf
	MongodbatlasProcessCacheIo                            MetricIntf
	MongodbatlasProcessCacheSize                          MetricIntf
	MongodbatlasProcessConnections                        MetricIntf
	MongodbatlasProcessCPUChildrenNormalizedUsage         MetricIntf
	MongodbatlasProcessCPUChildrenUsage                   MetricIntf
	MongodbatlasProcessCPUNormalizedUsage                 MetricIntf
	MongodbatlasProcessCPUUsage                           MetricIntf
	MongodbatlasProcessCursors                            MetricIntf
	MongodbatlasProcessDbDocumentRate                     MetricIntf
	MongodbatlasProcessDbOperationsRate                   MetricIntf
	MongodbatlasProcessDbOperationsTime                   MetricIntf
	MongodbatlasProcessDbQueryExecutorScanned             MetricIntf
	MongodbatlasProcessDbQueryTargetingScannedPerReturned MetricIntf
	MongodbatlasProcessDbStorage                          MetricIntf
	MongodbatlasProcessFtsCPUNormalizedUsage              MetricIntf
	MongodbatlasProcessFtsCPUUsage                        MetricIntf
	MongodbatlasProcessFtsDiskUsage                       MetricIntf
	MongodbatlasProcessFtsMemoryUsage                     MetricIntf
	MongodbatlasProcessGlobalLock                         MetricIntf
	MongodbatlasProcessIndexBtreeMissRatio                MetricIntf
	MongodbatlasProcessIndexCounters                      MetricIntf
	MongodbatlasProcessJournalingCommits                  MetricIntf
	MongodbatlasProcessJournalingDataFiles                MetricIntf
	MongodbatlasProcessJournalingWritten                  MetricIntf
	MongodbatlasProcessMemoryUsage                        MetricIntf
	MongodbatlasProcessNetworkIo                          MetricIntf
	MongodbatlasProcessNetworkRequests                    MetricIntf
	MongodbatlasProcessOplogRate                          MetricIntf
	MongodbatlasProcessOplogTime                          MetricIntf
	MongodbatlasProcessPageFaults                         MetricIntf
	MongodbatlasProcessRestarts                           MetricIntf
	MongodbatlasProcessTickets                            MetricIntf
	MongodbatlasSystemCPUNormalizedUsage                  MetricIntf
	MongodbatlasSystemCPUUsage                            MetricIntf
	MongodbatlasSystemFtsCPUNormalizedUsage               MetricIntf
	MongodbatlasSystemFtsCPUUsage                         MetricIntf
	MongodbatlasSystemFtsDiskUtilization                  MetricIntf
	MongodbatlasSystemFtsMemoryUsage                      MetricIntf
	MongodbatlasSystemMemoryUsage                         MetricIntf
	MongodbatlasSystemNetworkIo                           MetricIntf
	MongodbatlasSystemPagingIo                            MetricIntf
	MongodbatlasSystemPagingUsage                         MetricIntf
}

// Names returns a list of all the metric name strings.
func (m *metricStruct) Names() []string {
	return []string{
		"mongodbatlas.db.counts",
		"mongodbatlas.db.size",
		"mongodbatlas.disk.partition.iops",
		"mongodbatlas.disk.partition.latency",
		"mongodbatlas.disk.partition.space",
		"mongodbatlas.disk.partition.utilization",
		"mongodbatlas.process.asserts",
		"mongodbatlas.process.background_flush",
		"mongodbatlas.process.cache.io",
		"mongodbatlas.process.cache.size",
		"mongodbatlas.process.connections",
		"mongodbatlas.process.cpu.children.normalized.usage",
		"mongodbatlas.process.cpu.children.usage",
		"mongodbatlas.process.cpu.normalized.usage",
		"mongodbatlas.process.cpu.usage",
		"mongodbatlas.process.cursors",
		"mongodbatlas.process.db.document.rate",
		"mongodbatlas.process.db.operations.rate",
		"mongodbatlas.process.db.operations.time",
		"mongodbatlas.process.db.query_executor.scanned",
		"mongodbatlas.process.db.query_targeting.scanned_per_returned",
		"mongodbatlas.process.db.storage",
		"mongodbatlas.process.fts.cpu.normalized.usage",
		"mongodbatlas.process.fts.cpu.usage",
		"mongodbatlas.process.fts.disk.usage",
		"mongodbatlas.process.fts.memory.usage",
		"mongodbatlas.process.global_lock",
		"mongodbatlas.process.index.btree_miss_ratio",
		"mongodbatlas.process.index.counters",
		"mongodbatlas.process.journaling.commits",
		"mongodbatlas.process.journaling.data_files",
		"mongodbatlas.process.journaling.written",
		"mongodbatlas.process.memory.usage",
		"mongodbatlas.process.network.io",
		"mongodbatlas.process.network.requests",
		"mongodbatlas.process.oplog.rate",
		"mongodbatlas.process.oplog.time",
		"mongodbatlas.process.page_faults",
		"mongodbatlas.process.restarts",
		"mongodbatlas.process.tickets",
		"mongodbatlas.system.cpu.normalized.usage",
		"mongodbatlas.system.cpu.usage",
		"mongodbatlas.system.fts.cpu.normalized.usage",
		"mongodbatlas.system.fts.cpu.usage",
		"mongodbatlas.system.fts.disk.utilization",
		"mongodbatlas.system.fts.memory.usage",
		"mongodbatlas.system.memory.usage",
		"mongodbatlas.system.network.io",
		"mongodbatlas.system.paging.io",
		"mongodbatlas.system.paging.usage",
	}
}

var metricsByName = map[string]MetricIntf{
	"mongodbatlas.db.counts":                                       Metrics.MongodbatlasDbCounts,
	"mongodbatlas.db.size":                                         Metrics.MongodbatlasDbSize,
	"mongodbatlas.disk.partition.iops":                             Metrics.MongodbatlasDiskPartitionIops,
	"mongodbatlas.disk.partition.latency":                          Metrics.MongodbatlasDiskPartitionLatency,
	"mongodbatlas.disk.partition.space":                            Metrics.MongodbatlasDiskPartitionSpace,
	"mongodbatlas.disk.partition.utilization":                      Metrics.MongodbatlasDiskPartitionUtilization,
	"mongodbatlas.process.asserts":                                 Metrics.MongodbatlasProcessAsserts,
	"mongodbatlas.process.background_flush":                        Metrics.MongodbatlasProcessBackgroundFlush,
	"mongodbatlas.process.cache.io":                                Metrics.MongodbatlasProcessCacheIo,
	"mongodbatlas.process.cache.size":                              Metrics.MongodbatlasProcessCacheSize,
	"mongodbatlas.process.connections":                             Metrics.MongodbatlasProcessConnections,
	"mongodbatlas.process.cpu.children.normalized.usage":           Metrics.MongodbatlasProcessCPUChildrenNormalizedUsage,
	"mongodbatlas.process.cpu.children.usage":                      Metrics.MongodbatlasProcessCPUChildrenUsage,
	"mongodbatlas.process.cpu.normalized.usage":                    Metrics.MongodbatlasProcessCPUNormalizedUsage,
	"mongodbatlas.process.cpu.usage":                               Metrics.MongodbatlasProcessCPUUsage,
	"mongodbatlas.process.cursors":                                 Metrics.MongodbatlasProcessCursors,
	"mongodbatlas.process.db.document.rate":                        Metrics.MongodbatlasProcessDbDocumentRate,
	"mongodbatlas.process.db.operations.rate":                      Metrics.MongodbatlasProcessDbOperationsRate,
	"mongodbatlas.process.db.operations.time":                      Metrics.MongodbatlasProcessDbOperationsTime,
	"mongodbatlas.process.db.query_executor.scanned":               Metrics.MongodbatlasProcessDbQueryExecutorScanned,
	"mongodbatlas.process.db.query_targeting.scanned_per_returned": Metrics.MongodbatlasProcessDbQueryTargetingScannedPerReturned,
	"mongodbatlas.process.db.storage":                              Metrics.MongodbatlasProcessDbStorage,
	"mongodbatlas.process.fts.cpu.normalized.usage":                Metrics.MongodbatlasProcessFtsCPUNormalizedUsage,
	"mongodbatlas.process.fts.cpu.usage":                           Metrics.MongodbatlasProcessFtsCPUUsage,
	"mongodbatlas.process.fts.disk.usage":                          Metrics.MongodbatlasProcessFtsDiskUsage,
	"mongodbatlas.process.fts.memory.usage":                        Metrics.MongodbatlasProcessFtsMemoryUsage,
	"mongodbatlas.process.global_lock":                             Metrics.MongodbatlasProcessGlobalLock,
	"mongodbatlas.process.index.btree_miss_ratio":                  Metrics.MongodbatlasProcessIndexBtreeMissRatio,
	"mongodbatlas.process.index.counters":                          Metrics.MongodbatlasProcessIndexCounters,
	"mongodbatlas.process.journaling.commits":                      Metrics.MongodbatlasProcessJournalingCommits,
	"mongodbatlas.process.journaling.data_files":                   Metrics.MongodbatlasProcessJournalingDataFiles,
	"mongodbatlas.process.journaling.written":                      Metrics.MongodbatlasProcessJournalingWritten,
	"mongodbatlas.process.memory.usage":                            Metrics.MongodbatlasProcessMemoryUsage,
	"mongodbatlas.process.network.io":                              Metrics.MongodbatlasProcessNetworkIo,
	"mongodbatlas.process.network.requests":                        Metrics.MongodbatlasProcessNetworkRequests,
	"mongodbatlas.process.oplog.rate":                              Metrics.MongodbatlasProcessOplogRate,
	"mongodbatlas.process.oplog.time":                              Metrics.MongodbatlasProcessOplogTime,
	"mongodbatlas.process.page_faults":                             Metrics.MongodbatlasProcessPageFaults,
	"mongodbatlas.process.restarts":                                Metrics.MongodbatlasProcessRestarts,
	"mongodbatlas.process.tickets":                                 Metrics.MongodbatlasProcessTickets,
	"mongodbatlas.system.cpu.normalized.usage":                     Metrics.MongodbatlasSystemCPUNormalizedUsage,
	"mongodbatlas.system.cpu.usage":                                Metrics.MongodbatlasSystemCPUUsage,
	"mongodbatlas.system.fts.cpu.normalized.usage":                 Metrics.MongodbatlasSystemFtsCPUNormalizedUsage,
	"mongodbatlas.system.fts.cpu.usage":                            Metrics.MongodbatlasSystemFtsCPUUsage,
	"mongodbatlas.system.fts.disk.utilization":                     Metrics.MongodbatlasSystemFtsDiskUtilization,
	"mongodbatlas.system.fts.memory.usage":                         Metrics.MongodbatlasSystemFtsMemoryUsage,
	"mongodbatlas.system.memory.usage":                             Metrics.MongodbatlasSystemMemoryUsage,
	"mongodbatlas.system.network.io":                               Metrics.MongodbatlasSystemNetworkIo,
	"mongodbatlas.system.paging.io":                                Metrics.MongodbatlasSystemPagingIo,
	"mongodbatlas.system.paging.usage":                             Metrics.MongodbatlasSystemPagingUsage,
}

func (m *metricStruct) ByName(n string) MetricIntf {
	return metricsByName[n]
}

// Metrics contains a set of methods for each metric that help with
// manipulating those metrics.
var Metrics = &metricStruct{
	&metricImpl{
		"mongodbatlas.db.counts",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.db.counts")
			metric.SetDescription("Database feature size")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.db.size",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.db.size")
			metric.SetDescription("Database feature size")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.disk.partition.iops",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.disk.partition.iops")
			metric.SetDescription("Disk partition iops")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.disk.partition.latency",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.disk.partition.latency")
			metric.SetDescription("Disk partition latency")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.disk.partition.space",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.disk.partition.space")
			metric.SetDescription("Disk partition space")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.disk.partition.utilization",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.disk.partition.utilization")
			metric.SetDescription("Disk partition utilization")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.asserts",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.asserts")
			metric.SetDescription("Number of assertions")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.background_flush",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.background_flush")
			metric.SetDescription("Amount of data flushed in the background")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.cache.io",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.cache.io")
			metric.SetDescription("Cache throughput")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.cache.size",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.cache.size")
			metric.SetDescription("Cache sizes")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.connections",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.connections")
			metric.SetDescription("Number of current connections")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.cpu.children.normalized.usage",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.cpu.children.normalized.usage")
			metric.SetDescription("CPU Usage for child processes, normalized to pct")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.cpu.children.usage",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.cpu.children.usage")
			metric.SetDescription("CPU Usage for child processes")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.cpu.normalized.usage",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.cpu.normalized.usage")
			metric.SetDescription("CPU Usage, normalized to pct")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.cpu.usage",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.cpu.usage")
			metric.SetDescription("CPU Usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.cursors",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.cursors")
			metric.SetDescription("Number of cursors")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.db.document.rate",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.db.document.rate")
			metric.SetDescription("Document access rates")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.db.operations.rate",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.db.operations.rate")
			metric.SetDescription("FIXME")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.db.operations.time",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.db.operations.time")
			metric.SetDescription("FIXME")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.db.query_executor.scanned",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.db.query_executor.scanned")
			metric.SetDescription("Scanned objects")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.db.query_targeting.scanned_per_returned",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.db.query_targeting.scanned_per_returned")
			metric.SetDescription("Scanned objects per returned")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.db.storage",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.db.storage")
			metric.SetDescription("FIXME")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.fts.cpu.normalized.usage",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.fts.cpu.normalized.usage")
			metric.SetDescription("Full text search CPU, normalized to pct")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.fts.cpu.usage",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.fts.cpu.usage")
			metric.SetDescription("Full text search CPU")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.fts.disk.usage",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.fts.disk.usage")
			metric.SetDescription("Full text search disk usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.fts.memory.usage",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.fts.memory.usage")
			metric.SetDescription("Full text search memory usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.global_lock",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.global_lock")
			metric.SetDescription("Number and status of locks")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.index.btree_miss_ratio",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.index.btree_miss_ratio")
			metric.SetDescription("Index miss ratio")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.index.counters",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.index.counters")
			metric.SetDescription("Indexes")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.journaling.commits",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.journaling.commits")
			metric.SetDescription("Journaling commits")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.journaling.data_files",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.journaling.data_files")
			metric.SetDescription("Data file sizes")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.journaling.written",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.journaling.written")
			metric.SetDescription("Journals written")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.memory.usage",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.memory.usage")
			metric.SetDescription("Memory Usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.network.io",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.network.io")
			metric.SetDescription("Network IO")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.network.requests",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.network.requests")
			metric.SetDescription("Network requests")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.oplog.rate",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.oplog.rate")
			metric.SetDescription("Execution rate by operation")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.oplog.time",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.oplog.time")
			metric.SetDescription("Execution time by operation")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.page_faults",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.page_faults")
			metric.SetDescription("Page faults")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.restarts",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.restarts")
			metric.SetDescription("Restarts in last hour")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.process.tickets",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.process.tickets")
			metric.SetDescription("Tickets")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.system.cpu.normalized.usage",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.system.cpu.normalized.usage")
			metric.SetDescription("System CPU Normalized to pct")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.system.cpu.usage",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.system.cpu.usage")
			metric.SetDescription("System CPU Usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.system.fts.cpu.normalized.usage",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.system.fts.cpu.normalized.usage")
			metric.SetDescription("Full text search disk usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.system.fts.cpu.usage",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.system.fts.cpu.usage")
			metric.SetDescription("Full-text search")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.system.fts.disk.utilization",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.system.fts.disk.utilization")
			metric.SetDescription("Full text search disk usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.system.fts.memory.usage",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.system.fts.memory.usage")
			metric.SetDescription("Full-text search")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.system.memory.usage",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.system.memory.usage")
			metric.SetDescription("System Memory Usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.system.network.io",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.system.network.io")
			metric.SetDescription("System Network IO")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.system.paging.io",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.system.paging.io")
			metric.SetDescription("Swap IO")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodbatlas.system.paging.usage",
		func(metric pdata.Metric) {
			metric.SetName("mongodbatlas.system.paging.usage")
			metric.SetDescription("Swap usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
}

// M contains a set of methods for each metric that help with
// manipulating those metrics. M is an alias for Metrics
var M = Metrics

// Labels contains the possible metric labels that can be used.
var Labels = struct {
}{}

// L contains the possible metric labels that can be used. L is an alias for
// Labels.
var L = Labels
