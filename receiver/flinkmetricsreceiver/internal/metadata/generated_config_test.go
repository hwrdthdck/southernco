// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"path/filepath"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/confmap/confmaptest"
)

func TestResourceAttributesConfig(t *testing.T) {
	tests := []struct {
		name string
		want ResourceAttributesSettings
	}{
		{
			name: "default",
			want: DefaultResourceAttributesSettings(),
		},
		{
			name: "all_set",
			want: ResourceAttributesSettings{
				FlinkJobName:       ResourceAttributeSettings{Enabled: true},
				FlinkResourceType:  ResourceAttributeSettings{Enabled: true},
				FlinkSubtaskIndex:  ResourceAttributeSettings{Enabled: true},
				FlinkTaskName:      ResourceAttributeSettings{Enabled: true},
				FlinkTaskmanagerID: ResourceAttributeSettings{Enabled: true},
				HostName:           ResourceAttributeSettings{Enabled: true},
			},
		},
		{
			name: "none_set",
			want: ResourceAttributesSettings{
				FlinkJobName:       ResourceAttributeSettings{Enabled: false},
				FlinkResourceType:  ResourceAttributeSettings{Enabled: false},
				FlinkSubtaskIndex:  ResourceAttributeSettings{Enabled: false},
				FlinkTaskName:      ResourceAttributeSettings{Enabled: false},
				FlinkTaskmanagerID: ResourceAttributeSettings{Enabled: false},
				HostName:           ResourceAttributeSettings{Enabled: false},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadResourceAttributesSettings(t, tt.name)
			if diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(ResourceAttributeSettings{})); diff != "" {
				t.Errorf("Config mismatch (-expected +actual):\n%s", diff)
			}
		})
	}
}

func TestMetricsBuilderConfig(t *testing.T) {
	tests := []struct {
		name string
		want MetricsBuilderConfig
	}{
		{
			name: "default",
			want: DefaultMetricsBuilderConfig(),
		},
		{
			name: "all_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsSettings{
					FlinkJobCheckpointCount:           MetricSettings{Enabled: true},
					FlinkJobCheckpointInProgress:      MetricSettings{Enabled: true},
					FlinkJobLastCheckpointSize:        MetricSettings{Enabled: true},
					FlinkJobLastCheckpointTime:        MetricSettings{Enabled: true},
					FlinkJobRestartCount:              MetricSettings{Enabled: true},
					FlinkJvmClassLoaderClassesLoaded:  MetricSettings{Enabled: true},
					FlinkJvmCPULoad:                   MetricSettings{Enabled: true},
					FlinkJvmCPUTime:                   MetricSettings{Enabled: true},
					FlinkJvmGcCollectionsCount:        MetricSettings{Enabled: true},
					FlinkJvmGcCollectionsTime:         MetricSettings{Enabled: true},
					FlinkJvmMemoryDirectTotalCapacity: MetricSettings{Enabled: true},
					FlinkJvmMemoryDirectUsed:          MetricSettings{Enabled: true},
					FlinkJvmMemoryHeapCommitted:       MetricSettings{Enabled: true},
					FlinkJvmMemoryHeapMax:             MetricSettings{Enabled: true},
					FlinkJvmMemoryHeapUsed:            MetricSettings{Enabled: true},
					FlinkJvmMemoryMappedTotalCapacity: MetricSettings{Enabled: true},
					FlinkJvmMemoryMappedUsed:          MetricSettings{Enabled: true},
					FlinkJvmMemoryMetaspaceCommitted:  MetricSettings{Enabled: true},
					FlinkJvmMemoryMetaspaceMax:        MetricSettings{Enabled: true},
					FlinkJvmMemoryMetaspaceUsed:       MetricSettings{Enabled: true},
					FlinkJvmMemoryNonheapCommitted:    MetricSettings{Enabled: true},
					FlinkJvmMemoryNonheapMax:          MetricSettings{Enabled: true},
					FlinkJvmMemoryNonheapUsed:         MetricSettings{Enabled: true},
					FlinkJvmThreadsCount:              MetricSettings{Enabled: true},
					FlinkMemoryManagedTotal:           MetricSettings{Enabled: true},
					FlinkMemoryManagedUsed:            MetricSettings{Enabled: true},
					FlinkOperatorRecordCount:          MetricSettings{Enabled: true},
					FlinkOperatorWatermarkOutput:      MetricSettings{Enabled: true},
					FlinkTaskRecordCount:              MetricSettings{Enabled: true},
				},
				ResourceAttributes: ResourceAttributesSettings{
					FlinkJobName:       ResourceAttributeSettings{Enabled: true},
					FlinkResourceType:  ResourceAttributeSettings{Enabled: true},
					FlinkSubtaskIndex:  ResourceAttributeSettings{Enabled: true},
					FlinkTaskName:      ResourceAttributeSettings{Enabled: true},
					FlinkTaskmanagerID: ResourceAttributeSettings{Enabled: true},
					HostName:           ResourceAttributeSettings{Enabled: true},
				},
			},
		},
		{
			name: "none_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsSettings{
					FlinkJobCheckpointCount:           MetricSettings{Enabled: false},
					FlinkJobCheckpointInProgress:      MetricSettings{Enabled: false},
					FlinkJobLastCheckpointSize:        MetricSettings{Enabled: false},
					FlinkJobLastCheckpointTime:        MetricSettings{Enabled: false},
					FlinkJobRestartCount:              MetricSettings{Enabled: false},
					FlinkJvmClassLoaderClassesLoaded:  MetricSettings{Enabled: false},
					FlinkJvmCPULoad:                   MetricSettings{Enabled: false},
					FlinkJvmCPUTime:                   MetricSettings{Enabled: false},
					FlinkJvmGcCollectionsCount:        MetricSettings{Enabled: false},
					FlinkJvmGcCollectionsTime:         MetricSettings{Enabled: false},
					FlinkJvmMemoryDirectTotalCapacity: MetricSettings{Enabled: false},
					FlinkJvmMemoryDirectUsed:          MetricSettings{Enabled: false},
					FlinkJvmMemoryHeapCommitted:       MetricSettings{Enabled: false},
					FlinkJvmMemoryHeapMax:             MetricSettings{Enabled: false},
					FlinkJvmMemoryHeapUsed:            MetricSettings{Enabled: false},
					FlinkJvmMemoryMappedTotalCapacity: MetricSettings{Enabled: false},
					FlinkJvmMemoryMappedUsed:          MetricSettings{Enabled: false},
					FlinkJvmMemoryMetaspaceCommitted:  MetricSettings{Enabled: false},
					FlinkJvmMemoryMetaspaceMax:        MetricSettings{Enabled: false},
					FlinkJvmMemoryMetaspaceUsed:       MetricSettings{Enabled: false},
					FlinkJvmMemoryNonheapCommitted:    MetricSettings{Enabled: false},
					FlinkJvmMemoryNonheapMax:          MetricSettings{Enabled: false},
					FlinkJvmMemoryNonheapUsed:         MetricSettings{Enabled: false},
					FlinkJvmThreadsCount:              MetricSettings{Enabled: false},
					FlinkMemoryManagedTotal:           MetricSettings{Enabled: false},
					FlinkMemoryManagedUsed:            MetricSettings{Enabled: false},
					FlinkOperatorRecordCount:          MetricSettings{Enabled: false},
					FlinkOperatorWatermarkOutput:      MetricSettings{Enabled: false},
					FlinkTaskRecordCount:              MetricSettings{Enabled: false},
				},
				ResourceAttributes: ResourceAttributesSettings{
					FlinkJobName:       ResourceAttributeSettings{Enabled: false},
					FlinkResourceType:  ResourceAttributeSettings{Enabled: false},
					FlinkSubtaskIndex:  ResourceAttributeSettings{Enabled: false},
					FlinkTaskName:      ResourceAttributeSettings{Enabled: false},
					FlinkTaskmanagerID: ResourceAttributeSettings{Enabled: false},
					HostName:           ResourceAttributeSettings{Enabled: false},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadMetricsBuilderConfig(t, tt.name)
			if diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(MetricSettings{}, ResourceAttributeSettings{})); diff != "" {
				t.Errorf("Config mismatch (-expected +actual):\n%s", diff)
			}
		})
	}
}

func loadResourceAttributesSettings(t *testing.T, name string) ResourceAttributesSettings {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	sub, err = sub.Sub("resource_attributes")
	require.NoError(t, err)
	cfg := DefaultResourceAttributesSettings()
	require.NoError(t, component.UnmarshalConfig(sub, &cfg))
	return cfg
}

func loadMetricsBuilderConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, component.UnmarshalConfig(sub, &cfg))
	return cfg
}
