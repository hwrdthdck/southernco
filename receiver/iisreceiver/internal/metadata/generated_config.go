// Code generated by mdatagen. DO NOT EDIT.

package metadata

import "go.opentelemetry.io/collector/confmap"

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricSettings) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms, confmap.WithErrorUnused())
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsSettings provides settings for iisreceiver metrics.
type MetricsSettings struct {
	IisConnectionActive       MetricSettings `mapstructure:"iis.connection.active"`
	IisConnectionAnonymous    MetricSettings `mapstructure:"iis.connection.anonymous"`
	IisConnectionAttemptCount MetricSettings `mapstructure:"iis.connection.attempt.count"`
	IisNetworkBlocked         MetricSettings `mapstructure:"iis.network.blocked"`
	IisNetworkFileCount       MetricSettings `mapstructure:"iis.network.file.count"`
	IisNetworkIo              MetricSettings `mapstructure:"iis.network.io"`
	IisRequestCount           MetricSettings `mapstructure:"iis.request.count"`
	IisRequestQueueAgeMax     MetricSettings `mapstructure:"iis.request.queue.age.max"`
	IisRequestQueueCount      MetricSettings `mapstructure:"iis.request.queue.count"`
	IisRequestRejected        MetricSettings `mapstructure:"iis.request.rejected"`
	IisThreadActive           MetricSettings `mapstructure:"iis.thread.active"`
	IisUptime                 MetricSettings `mapstructure:"iis.uptime"`
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		IisConnectionActive: MetricSettings{
			Enabled: true,
		},
		IisConnectionAnonymous: MetricSettings{
			Enabled: true,
		},
		IisConnectionAttemptCount: MetricSettings{
			Enabled: true,
		},
		IisNetworkBlocked: MetricSettings{
			Enabled: true,
		},
		IisNetworkFileCount: MetricSettings{
			Enabled: true,
		},
		IisNetworkIo: MetricSettings{
			Enabled: true,
		},
		IisRequestCount: MetricSettings{
			Enabled: true,
		},
		IisRequestQueueAgeMax: MetricSettings{
			Enabled: true,
		},
		IisRequestQueueCount: MetricSettings{
			Enabled: true,
		},
		IisRequestRejected: MetricSettings{
			Enabled: true,
		},
		IisThreadActive: MetricSettings{
			Enabled: true,
		},
		IisUptime: MetricSettings{
			Enabled: true,
		},
	}
}

// ResourceAttributeSettings provides common settings for a particular resource attribute.
type ResourceAttributeSettings struct {
	Enabled bool `mapstructure:"enabled"`
}

// ResourceAttributesSettings provides settings for iisreceiver resource attributes.
type ResourceAttributesSettings struct {
	IisApplicationPool ResourceAttributeSettings `mapstructure:"iis.application_pool"`
	IisSite            ResourceAttributeSettings `mapstructure:"iis.site"`
}

func DefaultResourceAttributesSettings() ResourceAttributesSettings {
	return ResourceAttributesSettings{
		IisApplicationPool: ResourceAttributeSettings{
			Enabled: true,
		},
		IisSite: ResourceAttributeSettings{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for iisreceiver metrics builder.
type MetricsBuilderConfig struct {
	Metrics            MetricsSettings            `mapstructure:"metrics"`
	ResourceAttributes ResourceAttributesSettings `mapstructure:"resource_attributes"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics:            DefaultMetricsSettings(),
		ResourceAttributes: DefaultResourceAttributesSettings(),
	}
}
