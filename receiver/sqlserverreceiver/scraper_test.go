// Copyright 2020, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//go:build windows
// +build windows

package sqlserverreceiver

import (
	"context"
	"path/filepath"
	"testing"

	// "github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/collector/component/componenttest"

	// "go.uber.org/zap"
	// "go.uber.org/zap/zaptest/observer"

	"github.com/open-telemetry/opentelemetry-collector-contrib/internal/scrapertest"
	"github.com/open-telemetry/opentelemetry-collector-contrib/internal/scrapertest/golden"
	"github.com/open-telemetry/opentelemetry-collector-contrib/pkg/winperfcounters"
)

// MockPerfCounterWatcher is an autogenerated mock type for the PerfCounterWatcher type
type MockPerfCounterWatcher struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m MockPerfCounterWatcher) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Path provides a mock function with given fields:
func (_m MockPerfCounterWatcher) Path() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ScrapeData provides a mock function with given fields:
func (_m MockPerfCounterWatcher) ScrapeData() ([]winperfcounters.CounterValue, error) {
	ret := _m.Called()

	var r0 []winperfcounters.CounterValue
	if rf, ok := ret.Get(0).(func() []winperfcounters.CounterValue); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]winperfcounters.CounterValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// func TestSqlServerScraper(t *testing.T) {
// 	factory := NewFactory()
// 	cfg := factory.CreateDefaultConfig().(*Config)
// 	logger, obsLogs := observer.New(zap.WarnLevel)
// 	settings := componenttest.NewNopReceiverCreateSettings()
// 	settings.Logger = zap.New(logger)
// 	s := newSqlServerScraper(settings, cfg)

// 	s.start(context.Background(), nil)
// 	assert.Equal(t, 0, len(s.watcherRecorders))
// 	assert.Equal(t, 21, obsLogs.Len())
// 	assert.Equal(t, 21, obsLogs.FilterMessageSnippet("failed to create perf counter with path \\SQLServer:").Len())
// 	assert.Equal(t, 21, obsLogs.FilterMessageSnippet("The specified object was not found on the computer.").Len())
// 	assert.Equal(t, 1, obsLogs.FilterMessageSnippet("\\SQLServer:General Statistics\\").Len())
// 	assert.Equal(t, 3, obsLogs.FilterMessageSnippet("\\SQLServer:SQL Statistics\\").Len())
// 	assert.Equal(t, 2, obsLogs.FilterMessageSnippet("\\SQLServer:Locks(_Total)\\").Len())
// 	assert.Equal(t, 6, obsLogs.FilterMessageSnippet("\\SQLServer:Buffer Manager\\").Len())
// 	assert.Equal(t, 1, obsLogs.FilterMessageSnippet("\\SQLServer:Access Methods(_Total)\\").Len())
// 	assert.Equal(t, 8, obsLogs.FilterMessageSnippet("\\SQLServer:Databases(*)\\").Len())

// 	metrics, err := s.scrape(context.Background())
// 	require.NoError(t, err)
// 	assert.Equal(t, 0, metrics.ResourceMetrics().Len())

// 	err = s.shutdown(context.Background())
// 	require.NoError(t, err)
// }

var goldenScrapePath = filepath.Join("testdata", "golden_scrape.json")

// var partialScrapePath = filepath.Join("testdata", "partial_scrape.json")

// func createTestCounterValues() []winperfcounters.CounterValue{}  {
// 	counterValues := []winperfcounters.CounterValue{}
// 	for i, counterRecord := range perfCounterRecorders {
// 		counter := winperfcounters.CounterValue{

// 		}
// 		counterValues = append(counterValues, counter)
// 	}
// }

func TestScrape(t *testing.T) {
	factory := NewFactory()
	cfg := factory.CreateDefaultConfig().(*Config)
	settings := componenttest.NewNopReceiverCreateSettings()
	scraper := newSqlServerScraper(settings, cfg)

	var i float64
	for _, rec := range perfCounterRecorders {
		perfCounterWatcher := &MockPerfCounterWatcher{}
		perfCounterWatcher.On("ScrapeData").Return([]winperfcounters.CounterValue{{InstanceName: "db-instance", Value: i}}, nil)
		i++
		for _, recorder := range rec.recorders {
			scraper.watcherRecorders = append(scraper.watcherRecorders, watcherRecorder{
				watcher:  *perfCounterWatcher,
				recorder: recorder,
			})
		}
	}

	// General Statistics
	// generalStatisticsPerfCounterWatcher := &MockPerfCounterWatcher{}
	// generalStatisticsPerfCounterWatcher.On("ScrapeData").Return([]winperfcounters.CounterValue{{InstanceName: "instance", Value: 1}}, nil)

	// mockGeneralStatisticsWatcherRecorders := map[string]MockPerfCounterWatcher{
	// 	"User Connections": *generalStatisticsPerfCounterWatcher,
	// }

	// for _, rec := range perfCounterRecorders {
	// 	for perfCounterName, recorder := range rec.recorders {
	// 		for mockCounterName := range mockGeneralStatisticsWatcherRecorders {
	// 			if perfCounterName == mockCounterName {
	// 				mock, ok := mockGeneralStatisticsWatcherRecorders[perfCounterName]
	// 				require.True(t, ok)
	// 				scraper.watcherRecorders = append(scraper.watcherRecorders, watcherRecorder{
	// 					watcher:  mock,
	// 					recorder: recorder,
	// 				})
	// 			}
	// 		}
	// 	}
	// }

	// // SQL Statistics
	// sqlStatisticsPerfCounterWatcher := &MockPerfCounterWatcher{}
	// sqlStatisticsPerfCounterWatcher.On("ScrapeData").Return([]winperfcounters.CounterValue{{InstanceName: "instance", Value: 1}}, nil)

	// mockSqlStatisticsWatcherRecorders := map[string]MockPerfCounterWatcher{
	// 	"Batch Requests/sec":      *sqlStatisticsPerfCounterWatcher,
	// 	"SQL Compilations/sec":    *sqlStatisticsPerfCounterWatcher,
	// 	"SQL Re-Compilations/sec": *sqlStatisticsPerfCounterWatcher,
	// }

	// for _, rec := range perfCounterRecorders {
	// 	for perfCounterName, recorder := range rec.recorders {
	// 		for mockCounterName := range mockSqlStatisticsWatcherRecorders {
	// 			if perfCounterName == mockCounterName {
	// 				mock, ok := mockSqlStatisticsWatcherRecorders[perfCounterName]
	// 				require.True(t, ok)
	// 				scraper.watcherRecorders = append(scraper.watcherRecorders, watcherRecorder{
	// 					watcher:  mock,
	// 					recorder: recorder,
	// 				})
	// 			}
	// 		}
	// 	}
	// }

	// // Locks
	// locksPerfCounterWatcher := &MockPerfCounterWatcher{}
	// locksPerfCounterWatcher.On("ScrapeData").Return([]winperfcounters.CounterValue{{InstanceName: "instance", Value: 1}}, nil)

	// mockLocksWatcherRecorders := map[string]MockPerfCounterWatcher{
	// 	"Lock Waits/sec":         *locksPerfCounterWatcher,
	// 	"Average Wait Time (ms)": *locksPerfCounterWatcher,
	// }

	// for _, rec := range perfCounterRecorders {
	// 	for perfCounterName, recorder := range rec.recorders {
	// 		for mockCounterName := range mockLocksWatcherRecorders {
	// 			if perfCounterName == mockCounterName {
	// 				mock, ok := mockLocksWatcherRecorders[perfCounterName]
	// 				require.True(t, ok)
	// 				scraper.watcherRecorders = append(scraper.watcherRecorders, watcherRecorder{
	// 					watcher:  mock,
	// 					recorder: recorder,
	// 				})
	// 			}
	// 		}
	// 	}
	// }

	// // SQLServer:Buffer Manager
	// bufferManagerPerfCounterWatcher := &MockPerfCounterWatcher{}
	// bufferManagerPerfCounterWatcher.On("ScrapeData").Return([]winperfcounters.CounterValue{{InstanceName: "instance", Value: 1}}, nil)

	// mockBufferManagerWatcherRecorders := map[string]MockPerfCounterWatcher{
	// 	"Buffer cache hit ratio": *bufferManagerPerfCounterWatcher,
	// 	"Checkpoint pages/sec":   *bufferManagerPerfCounterWatcher,
	// 	"Lazy writes/sec":        *bufferManagerPerfCounterWatcher,
	// 	"Page life expectancy":   *bufferManagerPerfCounterWatcher,
	// 	"Page reads/sec":         *bufferManagerPerfCounterWatcher,
	// 	"Page writes/sec":        *bufferManagerPerfCounterWatcher,
	// }

	// for _, rec := range perfCounterRecorders {
	// 	for perfCounterName, recorder := range rec.recorders {
	// 		for mockCounterName := range mockBufferManagerWatcherRecorders {
	// 			if perfCounterName == mockCounterName {
	// 				mock, ok := mockBufferManagerWatcherRecorders[perfCounterName]
	// 				require.True(t, ok)
	// 				scraper.watcherRecorders = append(scraper.watcherRecorders, watcherRecorder{
	// 					watcher:  mock,
	// 					recorder: recorder,
	// 				})
	// 			}
	// 		}
	// 	}
	// }

	// // SQLServer:Access Methods
	// accessManagerPerfCounterWatcher := &MockPerfCounterWatcher{}
	// accessManagerPerfCounterWatcher.On("ScrapeData").Return([]winperfcounters.CounterValue{{InstanceName: "instance", Value: 1}}, nil)

	// mockAccessManagerWatcherRecorders := map[string]MockPerfCounterWatcher{
	// 	"Page Splits/sec": *accessManagerPerfCounterWatcher,
	// }

	// for _, rec := range perfCounterRecorders {
	// 	for perfCounterName, recorder := range rec.recorders {
	// 		for mockCounterName := range mockAccessManagerWatcherRecorders {
	// 			if perfCounterName == mockCounterName {
	// 				mock, ok := mockAccessManagerWatcherRecorders[perfCounterName]
	// 				require.True(t, ok)
	// 				scraper.watcherRecorders = append(scraper.watcherRecorders, watcherRecorder{
	// 					watcher:  mock,
	// 					recorder: recorder,
	// 				})
	// 			}
	// 		}
	// 	}
	// }

	// // SQLServer:Databases
	// databasesPerfCounterWatcher := &MockPerfCounterWatcher{}
	// databasesPerfCounterWatcher.On("ScrapeData").Return([]winperfcounters.CounterValue{{InstanceName: "instance", Value: 1}}, nil)

	// mockDatabasesWatcherRecorders := map[string]MockPerfCounterWatcher{
	// 	"Log Bytes Flushed/sec":  *databasesPerfCounterWatcher,
	// 	"Log Flushes/sec":        *databasesPerfCounterWatcher,
	// 	"Log Flush Waits/sec":    *databasesPerfCounterWatcher,
	// 	"Log Growths":            *databasesPerfCounterWatcher,
	// 	"Log Shrinks":            *databasesPerfCounterWatcher,
	// 	"Percent Log Used":       *databasesPerfCounterWatcher,
	// 	"Transactions/sec":       *databasesPerfCounterWatcher,
	// 	"Write Transactions/sec": *databasesPerfCounterWatcher,
	// }

	// for _, rec := range perfCounterRecorders {
	// 	for perfCounterName, recorder := range rec.recorders {
	// 		for mockCounterName := range mockDatabasesWatcherRecorders {
	// 			if perfCounterName == mockCounterName {
	// 				mock, ok := mockDatabasesWatcherRecorders[perfCounterName]
	// 				require.True(t, ok)
	// 				scraper.watcherRecorders = append(scraper.watcherRecorders, watcherRecorder{
	// 					watcher:  mock,
	// 					recorder: recorder,
	// 				})
	// 			}
	// 		}
	// 	}
	// }

	scrapeData, err := scraper.scrape(context.Background())
	require.NoError(t, err)

	_ = golden.WriteMetrics(goldenScrapePath, scrapeData)
	require.NoError(t, err)

	expectedMetrics, err := golden.ReadMetrics(goldenScrapePath)
	require.NoError(t, err)

	err = scrapertest.CompareMetrics(expectedMetrics, scrapeData)
	require.NoError(t, err)
}

// why not just start it, then for each value add
// func createCounters(scraper *sqlServerScraper) error {
// 	// may need to sort the records map for consistency
// 	for _, watcherRecord := range scraper.watcherRecorders {
// 		watcherRecord.watcher
// 	}
// 	return nil
// }
