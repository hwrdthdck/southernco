// Code generated by mdatagen. DO NOT EDIT.

package metadata

import "go.opentelemetry.io/collector/confmap"

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricSettings) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms, confmap.WithErrorUnused())
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsSettings provides settings for memcachedreceiver metrics.
type MetricsSettings struct {
	MemcachedBytes              MetricSettings `mapstructure:"memcached.bytes"`
	MemcachedCommands           MetricSettings `mapstructure:"memcached.commands"`
	MemcachedConnectionsCurrent MetricSettings `mapstructure:"memcached.connections.current"`
	MemcachedConnectionsTotal   MetricSettings `mapstructure:"memcached.connections.total"`
	MemcachedCPUUsage           MetricSettings `mapstructure:"memcached.cpu.usage"`
	MemcachedCurrentItems       MetricSettings `mapstructure:"memcached.current_items"`
	MemcachedEvictions          MetricSettings `mapstructure:"memcached.evictions"`
	MemcachedNetwork            MetricSettings `mapstructure:"memcached.network"`
	MemcachedOperationHitRatio  MetricSettings `mapstructure:"memcached.operation_hit_ratio"`
	MemcachedOperations         MetricSettings `mapstructure:"memcached.operations"`
	MemcachedThreads            MetricSettings `mapstructure:"memcached.threads"`
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		MemcachedBytes: MetricSettings{
			Enabled: true,
		},
		MemcachedCommands: MetricSettings{
			Enabled: true,
		},
		MemcachedConnectionsCurrent: MetricSettings{
			Enabled: true,
		},
		MemcachedConnectionsTotal: MetricSettings{
			Enabled: true,
		},
		MemcachedCPUUsage: MetricSettings{
			Enabled: true,
		},
		MemcachedCurrentItems: MetricSettings{
			Enabled: true,
		},
		MemcachedEvictions: MetricSettings{
			Enabled: true,
		},
		MemcachedNetwork: MetricSettings{
			Enabled: true,
		},
		MemcachedOperationHitRatio: MetricSettings{
			Enabled: true,
		},
		MemcachedOperations: MetricSettings{
			Enabled: true,
		},
		MemcachedThreads: MetricSettings{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for memcachedreceiver metrics builder.
type MetricsBuilderConfig struct {
	Metrics MetricsSettings `mapstructure:"metrics"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics: DefaultMetricsSettings(),
	}
}
