// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"path/filepath"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/confmap/confmaptest"
)

func TestResourceAttributesConfig(t *testing.T) {
	tests := []struct {
		name string
		want ResourceAttributesSettings
	}{
		{
			name: "default",
			want: DefaultResourceAttributesSettings(),
		},
		{
			name: "all_set",
			want: ResourceAttributesSettings{
				AerospikeNamespace: ResourceAttributeSettings{Enabled: true},
				AerospikeNodeName:  ResourceAttributeSettings{Enabled: true},
			},
		},
		{
			name: "none_set",
			want: ResourceAttributesSettings{
				AerospikeNamespace: ResourceAttributeSettings{Enabled: false},
				AerospikeNodeName:  ResourceAttributeSettings{Enabled: false},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadResourceAttributesSettings(t, tt.name)
			if diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(ResourceAttributeSettings{})); diff != "" {
				t.Errorf("Config mismatch (-expected +actual):\n%s", diff)
			}
		})
	}
}

func TestMetricsBuilderConfig(t *testing.T) {
	tests := []struct {
		name string
		want MetricsBuilderConfig
	}{
		{
			name: "default",
			want: DefaultMetricsBuilderConfig(),
		},
		{
			name: "all_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsSettings{
					AerospikeNamespaceDiskAvailable:                   MetricSettings{Enabled: true},
					AerospikeNamespaceGeojsonRegionQueryCells:         MetricSettings{Enabled: true},
					AerospikeNamespaceGeojsonRegionQueryFalsePositive: MetricSettings{Enabled: true},
					AerospikeNamespaceGeojsonRegionQueryPoints:        MetricSettings{Enabled: true},
					AerospikeNamespaceGeojsonRegionQueryRequests:      MetricSettings{Enabled: true},
					AerospikeNamespaceMemoryFree:                      MetricSettings{Enabled: true},
					AerospikeNamespaceMemoryUsage:                     MetricSettings{Enabled: true},
					AerospikeNamespaceQueryCount:                      MetricSettings{Enabled: true},
					AerospikeNamespaceScanCount:                       MetricSettings{Enabled: true},
					AerospikeNamespaceTransactionCount:                MetricSettings{Enabled: true},
					AerospikeNodeConnectionCount:                      MetricSettings{Enabled: true},
					AerospikeNodeConnectionOpen:                       MetricSettings{Enabled: true},
					AerospikeNodeMemoryFree:                           MetricSettings{Enabled: true},
					AerospikeNodeQueryTracked:                         MetricSettings{Enabled: true},
				},
				ResourceAttributes: ResourceAttributesSettings{
					AerospikeNamespace: ResourceAttributeSettings{Enabled: true},
					AerospikeNodeName:  ResourceAttributeSettings{Enabled: true},
				},
			},
		},
		{
			name: "none_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsSettings{
					AerospikeNamespaceDiskAvailable:                   MetricSettings{Enabled: false},
					AerospikeNamespaceGeojsonRegionQueryCells:         MetricSettings{Enabled: false},
					AerospikeNamespaceGeojsonRegionQueryFalsePositive: MetricSettings{Enabled: false},
					AerospikeNamespaceGeojsonRegionQueryPoints:        MetricSettings{Enabled: false},
					AerospikeNamespaceGeojsonRegionQueryRequests:      MetricSettings{Enabled: false},
					AerospikeNamespaceMemoryFree:                      MetricSettings{Enabled: false},
					AerospikeNamespaceMemoryUsage:                     MetricSettings{Enabled: false},
					AerospikeNamespaceQueryCount:                      MetricSettings{Enabled: false},
					AerospikeNamespaceScanCount:                       MetricSettings{Enabled: false},
					AerospikeNamespaceTransactionCount:                MetricSettings{Enabled: false},
					AerospikeNodeConnectionCount:                      MetricSettings{Enabled: false},
					AerospikeNodeConnectionOpen:                       MetricSettings{Enabled: false},
					AerospikeNodeMemoryFree:                           MetricSettings{Enabled: false},
					AerospikeNodeQueryTracked:                         MetricSettings{Enabled: false},
				},
				ResourceAttributes: ResourceAttributesSettings{
					AerospikeNamespace: ResourceAttributeSettings{Enabled: false},
					AerospikeNodeName:  ResourceAttributeSettings{Enabled: false},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadMetricsBuilderConfig(t, tt.name)
			if diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(MetricSettings{}, ResourceAttributeSettings{})); diff != "" {
				t.Errorf("Config mismatch (-expected +actual):\n%s", diff)
			}
		})
	}
}

func loadResourceAttributesSettings(t *testing.T, name string) ResourceAttributesSettings {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	sub, err = sub.Sub("resource_attributes")
	require.NoError(t, err)
	cfg := DefaultResourceAttributesSettings()
	require.NoError(t, component.UnmarshalConfig(sub, &cfg))
	return cfg
}

func loadMetricsBuilderConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, component.UnmarshalConfig(sub, &cfg))
	return cfg
}
