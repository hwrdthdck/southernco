// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"fmt"
	"strconv"
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
)

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`

	enabledProvidedByUser bool
}

// IsEnabledProvidedByUser returns true if `enabled` option is explicitly set in user settings to any value.
func (ms *MetricSettings) IsEnabledProvidedByUser() bool {
	return ms.enabledProvidedByUser
}

func (ms *MetricSettings) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms, confmap.WithErrorUnused())
	if err != nil {
		return err
	}
	ms.enabledProvidedByUser = parser.IsSet("enabled")
	return nil
}

// MetricsSettings provides settings for aerospikereceiver metrics.
type MetricsSettings struct {
	AerospikeNamespaceDiskAvailable                   MetricSettings `mapstructure:"aerospike.namespace.disk.available"`
	AerospikeNamespaceGeojsonRegionQueryCells         MetricSettings `mapstructure:"aerospike.namespace.geojson.region_query_cells"`
	AerospikeNamespaceGeojsonRegionQueryFalsePositive MetricSettings `mapstructure:"aerospike.namespace.geojson.region_query_false_positive"`
	AerospikeNamespaceGeojsonRegionQueryPoints        MetricSettings `mapstructure:"aerospike.namespace.geojson.region_query_points"`
	AerospikeNamespaceGeojsonRegionQueryRequests      MetricSettings `mapstructure:"aerospike.namespace.geojson.region_query_requests"`
	AerospikeNamespaceMemoryFree                      MetricSettings `mapstructure:"aerospike.namespace.memory.free"`
	AerospikeNamespaceMemoryUsage                     MetricSettings `mapstructure:"aerospike.namespace.memory.usage"`
	AerospikeNamespaceQueryCount                      MetricSettings `mapstructure:"aerospike.namespace.query.count"`
	AerospikeNamespaceScanCount                       MetricSettings `mapstructure:"aerospike.namespace.scan.count"`
	AerospikeNamespaceTransactionCount                MetricSettings `mapstructure:"aerospike.namespace.transaction.count"`
	AerospikeNodeConnectionCount                      MetricSettings `mapstructure:"aerospike.node.connection.count"`
	AerospikeNodeConnectionOpen                       MetricSettings `mapstructure:"aerospike.node.connection.open"`
	AerospikeNodeMemoryFree                           MetricSettings `mapstructure:"aerospike.node.memory.free"`
	AerospikeNodeQueryTracked                         MetricSettings `mapstructure:"aerospike.node.query.tracked"`
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		AerospikeNamespaceDiskAvailable: MetricSettings{
			Enabled: true,
		},
		AerospikeNamespaceGeojsonRegionQueryCells: MetricSettings{
			Enabled: true,
		},
		AerospikeNamespaceGeojsonRegionQueryFalsePositive: MetricSettings{
			Enabled: true,
		},
		AerospikeNamespaceGeojsonRegionQueryPoints: MetricSettings{
			Enabled: true,
		},
		AerospikeNamespaceGeojsonRegionQueryRequests: MetricSettings{
			Enabled: true,
		},
		AerospikeNamespaceMemoryFree: MetricSettings{
			Enabled: true,
		},
		AerospikeNamespaceMemoryUsage: MetricSettings{
			Enabled: true,
		},
		AerospikeNamespaceQueryCount: MetricSettings{
			Enabled: true,
		},
		AerospikeNamespaceScanCount: MetricSettings{
			Enabled: true,
		},
		AerospikeNamespaceTransactionCount: MetricSettings{
			Enabled: true,
		},
		AerospikeNodeConnectionCount: MetricSettings{
			Enabled: true,
		},
		AerospikeNodeConnectionOpen: MetricSettings{
			Enabled: true,
		},
		AerospikeNodeMemoryFree: MetricSettings{
			Enabled: true,
		},
		AerospikeNodeQueryTracked: MetricSettings{
			Enabled: true,
		},
	}
}

type attributeAbort struct{}

func (av attributeAbort) String() string {
	return "abort"
}

type attributeAggregation struct{}

func (av attributeAggregation) String() string {
	return "aggregation"
}

type attributeBasic struct{}

func (av attributeBasic) String() string {
	return "basic"
}

type attributeClient struct{}

func (av attributeClient) String() string {
	return "client"
}

type attributeClose struct{}

func (av attributeClose) String() string {
	return "close"
}

type attributeComplete struct{}

func (av attributeComplete) String() string {
	return "complete"
}

type attributeData struct{}

func (av attributeData) String() string {
	return "data"
}

type attributeDelete struct{}

func (av attributeDelete) String() string {
	return "delete"
}

type attributeError struct{}

func (av attributeError) String() string {
	return "error"
}

type attributeFabric struct{}

func (av attributeFabric) String() string {
	return "fabric"
}

type attributeFilteredOut struct{}

func (av attributeFilteredOut) String() string {
	return "filtered_out"
}

type attributeHeartbeat struct{}

func (av attributeHeartbeat) String() string {
	return "heartbeat"
}

type attributeIndex struct{}

func (av attributeIndex) String() string {
	return "index"
}

type attributeLongBasic struct{}

func (av attributeLongBasic) String() string {
	return "long_basic"
}

type attributeNotFound struct{}

func (av attributeNotFound) String() string {
	return "not_found"
}

type attributeOpen struct{}

func (av attributeOpen) String() string {
	return "open"
}

type attributeOpsBackground struct{}

func (av attributeOpsBackground) String() string {
	return "ops_background"
}

type attributePrimary struct{}

func (av attributePrimary) String() string {
	return "primary"
}

type attributeRead struct{}

func (av attributeRead) String() string {
	return "read"
}

type attributeSecondary struct{}

func (av attributeSecondary) String() string {
	return "secondary"
}

type attributeSecondaryIndex struct{}

func (av attributeSecondaryIndex) String() string {
	return "secondary_index"
}

type attributeSetIndex struct{}

func (av attributeSetIndex) String() string {
	return "set_index"
}

type attributeShort struct{}

func (av attributeShort) String() string {
	return "short"
}

type attributeShortBasic struct{}

func (av attributeShortBasic) String() string {
	return "short_basic"
}

type attributeSuccess struct{}

func (av attributeSuccess) String() string {
	return "success"
}

type attributeTimeout struct{}

func (av attributeTimeout) String() string {
	return "timeout"
}

type attributeUdf struct{}

func (av attributeUdf) String() string {
	return "udf"
}

type attributeUdfBackground struct{}

func (av attributeUdfBackground) String() string {
	return "udf_background"
}

type attributeWrite struct{}

func (av attributeWrite) String() string {
	return "write"
}

var (
	AttributeAbort          = attributeAbort{}
	AttributeAggregation    = attributeAggregation{}
	AttributeBasic          = attributeBasic{}
	AttributeClient         = attributeClient{}
	AttributeClose          = attributeClose{}
	AttributeComplete       = attributeComplete{}
	AttributeData           = attributeData{}
	AttributeDelete         = attributeDelete{}
	AttributeError          = attributeError{}
	AttributeFabric         = attributeFabric{}
	AttributeFilteredOut    = attributeFilteredOut{}
	AttributeHeartbeat      = attributeHeartbeat{}
	AttributeIndex          = attributeIndex{}
	AttributeLongBasic      = attributeLongBasic{}
	AttributeNotFound       = attributeNotFound{}
	AttributeOpen           = attributeOpen{}
	AttributeOpsBackground  = attributeOpsBackground{}
	AttributePrimary        = attributePrimary{}
	AttributeRead           = attributeRead{}
	AttributeSecondary      = attributeSecondary{}
	AttributeSecondaryIndex = attributeSecondaryIndex{}
	AttributeSetIndex       = attributeSetIndex{}
	AttributeShort          = attributeShort{}
	AttributeShortBasic     = attributeShortBasic{}
	AttributeSuccess        = attributeSuccess{}
	AttributeTimeout        = attributeTimeout{}
	AttributeUdf            = attributeUdf{}
	AttributeUdfBackground  = attributeUdfBackground{}
	AttributeWrite          = attributeWrite{}
)

type metricAerospikeNamespaceDiskAvailable struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills aerospike.namespace.disk.available metric with initial data.
func (m *metricAerospikeNamespaceDiskAvailable) init() {
	m.data.SetName("aerospike.namespace.disk.available")
	m.data.SetDescription("Minimum percentage of contiguous disk space free to the namespace across all devices")
	m.data.SetUnit("%")
	m.data.SetEmptyGauge()
}

func (m *metricAerospikeNamespaceDiskAvailable) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricAerospikeNamespaceDiskAvailable) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricAerospikeNamespaceDiskAvailable) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricAerospikeNamespaceDiskAvailable(settings MetricSettings) metricAerospikeNamespaceDiskAvailable {
	m := metricAerospikeNamespaceDiskAvailable{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricAerospikeNamespaceGeojsonRegionQueryCells struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills aerospike.namespace.geojson.region_query_cells metric with initial data.
func (m *metricAerospikeNamespaceGeojsonRegionQueryCells) init() {
	m.data.SetName("aerospike.namespace.geojson.region_query_cells")
	m.data.SetDescription("Number of cell coverings for query region queried")
	m.data.SetUnit("{cells}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricAerospikeNamespaceGeojsonRegionQueryCells) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricAerospikeNamespaceGeojsonRegionQueryCells) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricAerospikeNamespaceGeojsonRegionQueryCells) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricAerospikeNamespaceGeojsonRegionQueryCells(settings MetricSettings) metricAerospikeNamespaceGeojsonRegionQueryCells {
	m := metricAerospikeNamespaceGeojsonRegionQueryCells{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricAerospikeNamespaceGeojsonRegionQueryFalsePositive struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills aerospike.namespace.geojson.region_query_false_positive metric with initial data.
func (m *metricAerospikeNamespaceGeojsonRegionQueryFalsePositive) init() {
	m.data.SetName("aerospike.namespace.geojson.region_query_false_positive")
	m.data.SetDescription("Number of points outside the region.")
	m.data.SetUnit("{points}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricAerospikeNamespaceGeojsonRegionQueryFalsePositive) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricAerospikeNamespaceGeojsonRegionQueryFalsePositive) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricAerospikeNamespaceGeojsonRegionQueryFalsePositive) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricAerospikeNamespaceGeojsonRegionQueryFalsePositive(settings MetricSettings) metricAerospikeNamespaceGeojsonRegionQueryFalsePositive {
	m := metricAerospikeNamespaceGeojsonRegionQueryFalsePositive{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricAerospikeNamespaceGeojsonRegionQueryPoints struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills aerospike.namespace.geojson.region_query_points metric with initial data.
func (m *metricAerospikeNamespaceGeojsonRegionQueryPoints) init() {
	m.data.SetName("aerospike.namespace.geojson.region_query_points")
	m.data.SetDescription("Number of points within the region.")
	m.data.SetUnit("{points}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricAerospikeNamespaceGeojsonRegionQueryPoints) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricAerospikeNamespaceGeojsonRegionQueryPoints) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricAerospikeNamespaceGeojsonRegionQueryPoints) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricAerospikeNamespaceGeojsonRegionQueryPoints(settings MetricSettings) metricAerospikeNamespaceGeojsonRegionQueryPoints {
	m := metricAerospikeNamespaceGeojsonRegionQueryPoints{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricAerospikeNamespaceGeojsonRegionQueryRequests struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills aerospike.namespace.geojson.region_query_requests metric with initial data.
func (m *metricAerospikeNamespaceGeojsonRegionQueryRequests) init() {
	m.data.SetName("aerospike.namespace.geojson.region_query_requests")
	m.data.SetDescription("Number of geojson queries on the system since the uptime of the node.")
	m.data.SetUnit("{queries}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricAerospikeNamespaceGeojsonRegionQueryRequests) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricAerospikeNamespaceGeojsonRegionQueryRequests) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricAerospikeNamespaceGeojsonRegionQueryRequests) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricAerospikeNamespaceGeojsonRegionQueryRequests(settings MetricSettings) metricAerospikeNamespaceGeojsonRegionQueryRequests {
	m := metricAerospikeNamespaceGeojsonRegionQueryRequests{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricAerospikeNamespaceMemoryFree struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills aerospike.namespace.memory.free metric with initial data.
func (m *metricAerospikeNamespaceMemoryFree) init() {
	m.data.SetName("aerospike.namespace.memory.free")
	m.data.SetDescription("Percentage of the namespace's memory which is still free")
	m.data.SetUnit("%")
	m.data.SetEmptyGauge()
}

func (m *metricAerospikeNamespaceMemoryFree) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricAerospikeNamespaceMemoryFree) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricAerospikeNamespaceMemoryFree) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricAerospikeNamespaceMemoryFree(settings MetricSettings) metricAerospikeNamespaceMemoryFree {
	m := metricAerospikeNamespaceMemoryFree{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricAerospikeNamespaceMemoryUsage struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills aerospike.namespace.memory.usage metric with initial data.
func (m *metricAerospikeNamespaceMemoryUsage) init() {
	m.data.SetName("aerospike.namespace.memory.usage")
	m.data.SetDescription("Memory currently used by each component of the namespace")
	m.data.SetUnit("By")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

// AerospikeNamespaceMemoryUsageAttributeComponent specifies the a value component attribute of aerospike.namespace.memory.usage metric.
type AerospikeNamespaceMemoryUsageAttributeComponent interface {
	aerospikeNamespaceMemoryUsageAttributeComponent()
	String() string
}

func (av attributeData) aerospikeNamespaceMemoryUsageAttributeComponent()           {}
func (av attributeIndex) aerospikeNamespaceMemoryUsageAttributeComponent()          {}
func (av attributeSetIndex) aerospikeNamespaceMemoryUsageAttributeComponent()       {}
func (av attributeSecondaryIndex) aerospikeNamespaceMemoryUsageAttributeComponent() {}

// AerospikeNamespaceMemoryUsageAttributeComponentMap is a helper map to get AerospikeNamespaceMemoryUsageAttributeComponent from an attribute value.
var AerospikeNamespaceMemoryUsageAttributeComponentMap = map[string]AerospikeNamespaceMemoryUsageAttributeComponent{
	"data":            AttributeData,
	"index":           AttributeIndex,
	"set_index":       AttributeSetIndex,
	"secondary_index": AttributeSecondaryIndex,
}

func (m *metricAerospikeNamespaceMemoryUsage) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, componentAttribute string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("component", componentAttribute)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricAerospikeNamespaceMemoryUsage) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricAerospikeNamespaceMemoryUsage) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricAerospikeNamespaceMemoryUsage(settings MetricSettings) metricAerospikeNamespaceMemoryUsage {
	m := metricAerospikeNamespaceMemoryUsage{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricAerospikeNamespaceQueryCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills aerospike.namespace.query.count metric with initial data.
func (m *metricAerospikeNamespaceQueryCount) init() {
	m.data.SetName("aerospike.namespace.query.count")
	m.data.SetDescription("Number of query operations performed on the namespace")
	m.data.SetUnit("{queries}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

// AerospikeNamespaceQueryCountAttributeIndex specifies the a value index attribute of aerospike.namespace.query.count metric.
type AerospikeNamespaceQueryCountAttributeIndex interface {
	aerospikeNamespaceQueryCountAttributeIndex()
	String() string
}

func (av attributePrimary) aerospikeNamespaceQueryCountAttributeIndex()   {}
func (av attributeSecondary) aerospikeNamespaceQueryCountAttributeIndex() {}

// AerospikeNamespaceQueryCountAttributeIndexMap is a helper map to get AerospikeNamespaceQueryCountAttributeIndex from an attribute value.
var AerospikeNamespaceQueryCountAttributeIndexMap = map[string]AerospikeNamespaceQueryCountAttributeIndex{
	"primary":   AttributePrimary,
	"secondary": AttributeSecondary,
}

// AerospikeNamespaceQueryCountAttributeResult specifies the a value result attribute of aerospike.namespace.query.count metric.
type AerospikeNamespaceQueryCountAttributeResult interface {
	aerospikeNamespaceQueryCountAttributeResult()
	String() string
}

func (av attributeAbort) aerospikeNamespaceQueryCountAttributeResult()    {}
func (av attributeComplete) aerospikeNamespaceQueryCountAttributeResult() {}
func (av attributeError) aerospikeNamespaceQueryCountAttributeResult()    {}
func (av attributeTimeout) aerospikeNamespaceQueryCountAttributeResult()  {}

// AerospikeNamespaceQueryCountAttributeResultMap is a helper map to get AerospikeNamespaceQueryCountAttributeResult from an attribute value.
var AerospikeNamespaceQueryCountAttributeResultMap = map[string]AerospikeNamespaceQueryCountAttributeResult{
	"abort":    AttributeAbort,
	"complete": AttributeComplete,
	"error":    AttributeError,
	"timeout":  AttributeTimeout,
}

// AerospikeNamespaceQueryCountAttributeType specifies the a value type attribute of aerospike.namespace.query.count metric.
type AerospikeNamespaceQueryCountAttributeType interface {
	aerospikeNamespaceQueryCountAttributeType()
	String() string
}

func (av attributeAggregation) aerospikeNamespaceQueryCountAttributeType()   {}
func (av attributeBasic) aerospikeNamespaceQueryCountAttributeType()         {}
func (av attributeShort) aerospikeNamespaceQueryCountAttributeType()         {}
func (av attributeLongBasic) aerospikeNamespaceQueryCountAttributeType()     {}
func (av attributeShortBasic) aerospikeNamespaceQueryCountAttributeType()    {}
func (av attributeOpsBackground) aerospikeNamespaceQueryCountAttributeType() {}
func (av attributeUdfBackground) aerospikeNamespaceQueryCountAttributeType() {}

// AerospikeNamespaceQueryCountAttributeTypeMap is a helper map to get AerospikeNamespaceQueryCountAttributeType from an attribute value.
var AerospikeNamespaceQueryCountAttributeTypeMap = map[string]AerospikeNamespaceQueryCountAttributeType{
	"aggregation":    AttributeAggregation,
	"basic":          AttributeBasic,
	"short":          AttributeShort,
	"long_basic":     AttributeLongBasic,
	"short_basic":    AttributeShortBasic,
	"ops_background": AttributeOpsBackground,
	"udf_background": AttributeUdfBackground,
}

func (m *metricAerospikeNamespaceQueryCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, indexAttribute string, resultAttribute string, typeAttribute string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("index", indexAttribute)
	dp.Attributes().PutStr("result", resultAttribute)
	dp.Attributes().PutStr("type", typeAttribute)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricAerospikeNamespaceQueryCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricAerospikeNamespaceQueryCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricAerospikeNamespaceQueryCount(settings MetricSettings) metricAerospikeNamespaceQueryCount {
	m := metricAerospikeNamespaceQueryCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricAerospikeNamespaceScanCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills aerospike.namespace.scan.count metric with initial data.
func (m *metricAerospikeNamespaceScanCount) init() {
	m.data.SetName("aerospike.namespace.scan.count")
	m.data.SetDescription("Number of scan operations performed on the namespace")
	m.data.SetUnit("{scans}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

// AerospikeNamespaceScanCountAttributeResult specifies the a value result attribute of aerospike.namespace.scan.count metric.
type AerospikeNamespaceScanCountAttributeResult interface {
	aerospikeNamespaceScanCountAttributeResult()
	String() string
}

func (av attributeAbort) aerospikeNamespaceScanCountAttributeResult()    {}
func (av attributeComplete) aerospikeNamespaceScanCountAttributeResult() {}
func (av attributeError) aerospikeNamespaceScanCountAttributeResult()    {}

// AerospikeNamespaceScanCountAttributeResultMap is a helper map to get AerospikeNamespaceScanCountAttributeResult from an attribute value.
var AerospikeNamespaceScanCountAttributeResultMap = map[string]AerospikeNamespaceScanCountAttributeResult{
	"abort":    AttributeAbort,
	"complete": AttributeComplete,
	"error":    AttributeError,
}

// AerospikeNamespaceScanCountAttributeType specifies the a value type attribute of aerospike.namespace.scan.count metric.
type AerospikeNamespaceScanCountAttributeType interface {
	aerospikeNamespaceScanCountAttributeType()
	String() string
}

func (av attributeAggregation) aerospikeNamespaceScanCountAttributeType()   {}
func (av attributeBasic) aerospikeNamespaceScanCountAttributeType()         {}
func (av attributeOpsBackground) aerospikeNamespaceScanCountAttributeType() {}
func (av attributeUdfBackground) aerospikeNamespaceScanCountAttributeType() {}

// AerospikeNamespaceScanCountAttributeTypeMap is a helper map to get AerospikeNamespaceScanCountAttributeType from an attribute value.
var AerospikeNamespaceScanCountAttributeTypeMap = map[string]AerospikeNamespaceScanCountAttributeType{
	"aggregation":    AttributeAggregation,
	"basic":          AttributeBasic,
	"ops_background": AttributeOpsBackground,
	"udf_background": AttributeUdfBackground,
}

func (m *metricAerospikeNamespaceScanCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, resultAttribute string, typeAttribute string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("result", resultAttribute)
	dp.Attributes().PutStr("type", typeAttribute)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricAerospikeNamespaceScanCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricAerospikeNamespaceScanCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricAerospikeNamespaceScanCount(settings MetricSettings) metricAerospikeNamespaceScanCount {
	m := metricAerospikeNamespaceScanCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricAerospikeNamespaceTransactionCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills aerospike.namespace.transaction.count metric with initial data.
func (m *metricAerospikeNamespaceTransactionCount) init() {
	m.data.SetName("aerospike.namespace.transaction.count")
	m.data.SetDescription("Number of transactions performed on the namespace")
	m.data.SetUnit("{transactions}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

// AerospikeNamespaceTransactionCountAttributeResult specifies the a value result attribute of aerospike.namespace.transaction.count metric.
type AerospikeNamespaceTransactionCountAttributeResult interface {
	aerospikeNamespaceTransactionCountAttributeResult()
	String() string
}

func (av attributeError) aerospikeNamespaceTransactionCountAttributeResult()       {}
func (av attributeFilteredOut) aerospikeNamespaceTransactionCountAttributeResult() {}
func (av attributeNotFound) aerospikeNamespaceTransactionCountAttributeResult()    {}
func (av attributeSuccess) aerospikeNamespaceTransactionCountAttributeResult()     {}
func (av attributeTimeout) aerospikeNamespaceTransactionCountAttributeResult()     {}

// AerospikeNamespaceTransactionCountAttributeResultMap is a helper map to get AerospikeNamespaceTransactionCountAttributeResult from an attribute value.
var AerospikeNamespaceTransactionCountAttributeResultMap = map[string]AerospikeNamespaceTransactionCountAttributeResult{
	"error":        AttributeError,
	"filtered_out": AttributeFilteredOut,
	"not_found":    AttributeNotFound,
	"success":      AttributeSuccess,
	"timeout":      AttributeTimeout,
}

// AerospikeNamespaceTransactionCountAttributeType specifies the a value type attribute of aerospike.namespace.transaction.count metric.
type AerospikeNamespaceTransactionCountAttributeType interface {
	aerospikeNamespaceTransactionCountAttributeType()
	String() string
}

func (av attributeDelete) aerospikeNamespaceTransactionCountAttributeType() {}
func (av attributeRead) aerospikeNamespaceTransactionCountAttributeType()   {}
func (av attributeUdf) aerospikeNamespaceTransactionCountAttributeType()    {}
func (av attributeWrite) aerospikeNamespaceTransactionCountAttributeType()  {}

// AerospikeNamespaceTransactionCountAttributeTypeMap is a helper map to get AerospikeNamespaceTransactionCountAttributeType from an attribute value.
var AerospikeNamespaceTransactionCountAttributeTypeMap = map[string]AerospikeNamespaceTransactionCountAttributeType{
	"delete": AttributeDelete,
	"read":   AttributeRead,
	"udf":    AttributeUdf,
	"write":  AttributeWrite,
}

func (m *metricAerospikeNamespaceTransactionCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, resultAttribute string, typeAttribute string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("result", resultAttribute)
	dp.Attributes().PutStr("type", typeAttribute)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricAerospikeNamespaceTransactionCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricAerospikeNamespaceTransactionCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricAerospikeNamespaceTransactionCount(settings MetricSettings) metricAerospikeNamespaceTransactionCount {
	m := metricAerospikeNamespaceTransactionCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricAerospikeNodeConnectionCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills aerospike.node.connection.count metric with initial data.
func (m *metricAerospikeNodeConnectionCount) init() {
	m.data.SetName("aerospike.node.connection.count")
	m.data.SetDescription("Number of connections opened and closed to the node")
	m.data.SetUnit("{connections}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

// AerospikeNodeConnectionCountAttributeOperation specifies the a value operation attribute of aerospike.node.connection.count metric.
type AerospikeNodeConnectionCountAttributeOperation interface {
	aerospikeNodeConnectionCountAttributeOperation()
	String() string
}

func (av attributeClose) aerospikeNodeConnectionCountAttributeOperation() {}
func (av attributeOpen) aerospikeNodeConnectionCountAttributeOperation()  {}

// AerospikeNodeConnectionCountAttributeOperationMap is a helper map to get AerospikeNodeConnectionCountAttributeOperation from an attribute value.
var AerospikeNodeConnectionCountAttributeOperationMap = map[string]AerospikeNodeConnectionCountAttributeOperation{
	"close": AttributeClose,
	"open":  AttributeOpen,
}

// AerospikeNodeConnectionCountAttributeType specifies the a value type attribute of aerospike.node.connection.count metric.
type AerospikeNodeConnectionCountAttributeType interface {
	aerospikeNodeConnectionCountAttributeType()
	String() string
}

func (av attributeClient) aerospikeNodeConnectionCountAttributeType()    {}
func (av attributeFabric) aerospikeNodeConnectionCountAttributeType()    {}
func (av attributeHeartbeat) aerospikeNodeConnectionCountAttributeType() {}

// AerospikeNodeConnectionCountAttributeTypeMap is a helper map to get AerospikeNodeConnectionCountAttributeType from an attribute value.
var AerospikeNodeConnectionCountAttributeTypeMap = map[string]AerospikeNodeConnectionCountAttributeType{
	"client":    AttributeClient,
	"fabric":    AttributeFabric,
	"heartbeat": AttributeHeartbeat,
}

func (m *metricAerospikeNodeConnectionCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, operationAttribute string, typeAttribute string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("operation", operationAttribute)
	dp.Attributes().PutStr("type", typeAttribute)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricAerospikeNodeConnectionCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricAerospikeNodeConnectionCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricAerospikeNodeConnectionCount(settings MetricSettings) metricAerospikeNodeConnectionCount {
	m := metricAerospikeNodeConnectionCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricAerospikeNodeConnectionOpen struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills aerospike.node.connection.open metric with initial data.
func (m *metricAerospikeNodeConnectionOpen) init() {
	m.data.SetName("aerospike.node.connection.open")
	m.data.SetDescription("Current number of open connections to the node")
	m.data.SetUnit("{connections}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

// AerospikeNodeConnectionOpenAttributeType specifies the a value type attribute of aerospike.node.connection.open metric.
type AerospikeNodeConnectionOpenAttributeType interface {
	aerospikeNodeConnectionOpenAttributeType()
	String() string
}

func (av attributeClient) aerospikeNodeConnectionOpenAttributeType()    {}
func (av attributeFabric) aerospikeNodeConnectionOpenAttributeType()    {}
func (av attributeHeartbeat) aerospikeNodeConnectionOpenAttributeType() {}

// AerospikeNodeConnectionOpenAttributeTypeMap is a helper map to get AerospikeNodeConnectionOpenAttributeType from an attribute value.
var AerospikeNodeConnectionOpenAttributeTypeMap = map[string]AerospikeNodeConnectionOpenAttributeType{
	"client":    AttributeClient,
	"fabric":    AttributeFabric,
	"heartbeat": AttributeHeartbeat,
}

func (m *metricAerospikeNodeConnectionOpen) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, typeAttribute string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("type", typeAttribute)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricAerospikeNodeConnectionOpen) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricAerospikeNodeConnectionOpen) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricAerospikeNodeConnectionOpen(settings MetricSettings) metricAerospikeNodeConnectionOpen {
	m := metricAerospikeNodeConnectionOpen{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricAerospikeNodeMemoryFree struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills aerospike.node.memory.free metric with initial data.
func (m *metricAerospikeNodeMemoryFree) init() {
	m.data.SetName("aerospike.node.memory.free")
	m.data.SetDescription("Percentage of the node's memory which is still free")
	m.data.SetUnit("%")
	m.data.SetEmptyGauge()
}

func (m *metricAerospikeNodeMemoryFree) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricAerospikeNodeMemoryFree) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricAerospikeNodeMemoryFree) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricAerospikeNodeMemoryFree(settings MetricSettings) metricAerospikeNodeMemoryFree {
	m := metricAerospikeNodeMemoryFree{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricAerospikeNodeQueryTracked struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills aerospike.node.query.tracked metric with initial data.
func (m *metricAerospikeNodeQueryTracked) init() {
	m.data.SetName("aerospike.node.query.tracked")
	m.data.SetDescription("Number of queries tracked by the system.")
	m.data.SetUnit("")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricAerospikeNodeQueryTracked) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricAerospikeNodeQueryTracked) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricAerospikeNodeQueryTracked) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricAerospikeNodeQueryTracked(settings MetricSettings) metricAerospikeNodeQueryTracked {
	m := metricAerospikeNodeQueryTracked{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user settings.
type MetricsBuilder struct {
	startTime                                               pcommon.Timestamp   // start time that will be applied to all recorded data points.
	metricsCapacity                                         int                 // maximum observed number of metrics per resource.
	resourceCapacity                                        int                 // maximum observed number of resource attributes.
	metricsBuffer                                           pmetric.Metrics     // accumulates metrics data before emitting.
	buildInfo                                               component.BuildInfo // contains version information
	metricAerospikeNamespaceDiskAvailable                   metricAerospikeNamespaceDiskAvailable
	metricAerospikeNamespaceGeojsonRegionQueryCells         metricAerospikeNamespaceGeojsonRegionQueryCells
	metricAerospikeNamespaceGeojsonRegionQueryFalsePositive metricAerospikeNamespaceGeojsonRegionQueryFalsePositive
	metricAerospikeNamespaceGeojsonRegionQueryPoints        metricAerospikeNamespaceGeojsonRegionQueryPoints
	metricAerospikeNamespaceGeojsonRegionQueryRequests      metricAerospikeNamespaceGeojsonRegionQueryRequests
	metricAerospikeNamespaceMemoryFree                      metricAerospikeNamespaceMemoryFree
	metricAerospikeNamespaceMemoryUsage                     metricAerospikeNamespaceMemoryUsage
	metricAerospikeNamespaceQueryCount                      metricAerospikeNamespaceQueryCount
	metricAerospikeNamespaceScanCount                       metricAerospikeNamespaceScanCount
	metricAerospikeNamespaceTransactionCount                metricAerospikeNamespaceTransactionCount
	metricAerospikeNodeConnectionCount                      metricAerospikeNodeConnectionCount
	metricAerospikeNodeConnectionOpen                       metricAerospikeNodeConnectionOpen
	metricAerospikeNodeMemoryFree                           metricAerospikeNodeMemoryFree
	metricAerospikeNodeQueryTracked                         metricAerospikeNodeQueryTracked
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func NewMetricsBuilder(settings MetricsSettings, buildInfo component.BuildInfo, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		startTime:                             pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:                         pmetric.NewMetrics(),
		buildInfo:                             buildInfo,
		metricAerospikeNamespaceDiskAvailable: newMetricAerospikeNamespaceDiskAvailable(settings.AerospikeNamespaceDiskAvailable),
		metricAerospikeNamespaceGeojsonRegionQueryCells:         newMetricAerospikeNamespaceGeojsonRegionQueryCells(settings.AerospikeNamespaceGeojsonRegionQueryCells),
		metricAerospikeNamespaceGeojsonRegionQueryFalsePositive: newMetricAerospikeNamespaceGeojsonRegionQueryFalsePositive(settings.AerospikeNamespaceGeojsonRegionQueryFalsePositive),
		metricAerospikeNamespaceGeojsonRegionQueryPoints:        newMetricAerospikeNamespaceGeojsonRegionQueryPoints(settings.AerospikeNamespaceGeojsonRegionQueryPoints),
		metricAerospikeNamespaceGeojsonRegionQueryRequests:      newMetricAerospikeNamespaceGeojsonRegionQueryRequests(settings.AerospikeNamespaceGeojsonRegionQueryRequests),
		metricAerospikeNamespaceMemoryFree:                      newMetricAerospikeNamespaceMemoryFree(settings.AerospikeNamespaceMemoryFree),
		metricAerospikeNamespaceMemoryUsage:                     newMetricAerospikeNamespaceMemoryUsage(settings.AerospikeNamespaceMemoryUsage),
		metricAerospikeNamespaceQueryCount:                      newMetricAerospikeNamespaceQueryCount(settings.AerospikeNamespaceQueryCount),
		metricAerospikeNamespaceScanCount:                       newMetricAerospikeNamespaceScanCount(settings.AerospikeNamespaceScanCount),
		metricAerospikeNamespaceTransactionCount:                newMetricAerospikeNamespaceTransactionCount(settings.AerospikeNamespaceTransactionCount),
		metricAerospikeNodeConnectionCount:                      newMetricAerospikeNodeConnectionCount(settings.AerospikeNodeConnectionCount),
		metricAerospikeNodeConnectionOpen:                       newMetricAerospikeNodeConnectionOpen(settings.AerospikeNodeConnectionOpen),
		metricAerospikeNodeMemoryFree:                           newMetricAerospikeNodeMemoryFree(settings.AerospikeNodeMemoryFree),
		metricAerospikeNodeQueryTracked:                         newMetricAerospikeNodeQueryTracked(settings.AerospikeNodeQueryTracked),
	}
	for _, op := range options {
		op(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
	if mb.resourceCapacity < rm.Resource().Attributes().Len() {
		mb.resourceCapacity = rm.Resource().Attributes().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption func(pmetric.ResourceMetrics)

// WithAerospikeNamespace sets provided value as "aerospike.namespace" attribute for current resource.
func WithAerospikeNamespace(val string) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		rm.Resource().Attributes().PutStr("aerospike.namespace", val)
	}
}

// WithAerospikeNodeName sets provided value as "aerospike.node.name" attribute for current resource.
func WithAerospikeNodeName(val string) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		rm.Resource().Attributes().PutStr("aerospike.node.name", val)
	}
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	}
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(rmo ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	rm.Resource().Attributes().EnsureCapacity(mb.resourceCapacity)
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("otelcol/aerospikereceiver")
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricAerospikeNamespaceDiskAvailable.emit(ils.Metrics())
	mb.metricAerospikeNamespaceGeojsonRegionQueryCells.emit(ils.Metrics())
	mb.metricAerospikeNamespaceGeojsonRegionQueryFalsePositive.emit(ils.Metrics())
	mb.metricAerospikeNamespaceGeojsonRegionQueryPoints.emit(ils.Metrics())
	mb.metricAerospikeNamespaceGeojsonRegionQueryRequests.emit(ils.Metrics())
	mb.metricAerospikeNamespaceMemoryFree.emit(ils.Metrics())
	mb.metricAerospikeNamespaceMemoryUsage.emit(ils.Metrics())
	mb.metricAerospikeNamespaceQueryCount.emit(ils.Metrics())
	mb.metricAerospikeNamespaceScanCount.emit(ils.Metrics())
	mb.metricAerospikeNamespaceTransactionCount.emit(ils.Metrics())
	mb.metricAerospikeNodeConnectionCount.emit(ils.Metrics())
	mb.metricAerospikeNodeConnectionOpen.emit(ils.Metrics())
	mb.metricAerospikeNodeMemoryFree.emit(ils.Metrics())
	mb.metricAerospikeNodeQueryTracked.emit(ils.Metrics())
	for _, op := range rmo {
		op(rm)
	}
	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user settings, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(rmo ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(rmo...)
	metrics := pmetric.NewMetrics()
	mb.metricsBuffer.MoveTo(metrics)
	return metrics
}

// RecordAerospikeNamespaceDiskAvailableDataPoint adds a data point to aerospike.namespace.disk.available metric.
func (mb *MetricsBuilder) RecordAerospikeNamespaceDiskAvailableDataPoint(ts pcommon.Timestamp, inputVal string) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for AerospikeNamespaceDiskAvailable, value was %s: %w", inputVal, err)
	}
	mb.metricAerospikeNamespaceDiskAvailable.recordDataPoint(mb.startTime, ts, val)
	return nil
}

// RecordAerospikeNamespaceGeojsonRegionQueryCellsDataPoint adds a data point to aerospike.namespace.geojson.region_query_cells metric.
func (mb *MetricsBuilder) RecordAerospikeNamespaceGeojsonRegionQueryCellsDataPoint(ts pcommon.Timestamp, inputVal string) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for AerospikeNamespaceGeojsonRegionQueryCells, value was %s: %w", inputVal, err)
	}
	mb.metricAerospikeNamespaceGeojsonRegionQueryCells.recordDataPoint(mb.startTime, ts, val)
	return nil
}

// RecordAerospikeNamespaceGeojsonRegionQueryFalsePositiveDataPoint adds a data point to aerospike.namespace.geojson.region_query_false_positive metric.
func (mb *MetricsBuilder) RecordAerospikeNamespaceGeojsonRegionQueryFalsePositiveDataPoint(ts pcommon.Timestamp, inputVal string) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for AerospikeNamespaceGeojsonRegionQueryFalsePositive, value was %s: %w", inputVal, err)
	}
	mb.metricAerospikeNamespaceGeojsonRegionQueryFalsePositive.recordDataPoint(mb.startTime, ts, val)
	return nil
}

// RecordAerospikeNamespaceGeojsonRegionQueryPointsDataPoint adds a data point to aerospike.namespace.geojson.region_query_points metric.
func (mb *MetricsBuilder) RecordAerospikeNamespaceGeojsonRegionQueryPointsDataPoint(ts pcommon.Timestamp, inputVal string) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for AerospikeNamespaceGeojsonRegionQueryPoints, value was %s: %w", inputVal, err)
	}
	mb.metricAerospikeNamespaceGeojsonRegionQueryPoints.recordDataPoint(mb.startTime, ts, val)
	return nil
}

// RecordAerospikeNamespaceGeojsonRegionQueryRequestsDataPoint adds a data point to aerospike.namespace.geojson.region_query_requests metric.
func (mb *MetricsBuilder) RecordAerospikeNamespaceGeojsonRegionQueryRequestsDataPoint(ts pcommon.Timestamp, inputVal string) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for AerospikeNamespaceGeojsonRegionQueryRequests, value was %s: %w", inputVal, err)
	}
	mb.metricAerospikeNamespaceGeojsonRegionQueryRequests.recordDataPoint(mb.startTime, ts, val)
	return nil
}

// RecordAerospikeNamespaceMemoryFreeDataPoint adds a data point to aerospike.namespace.memory.free metric.
func (mb *MetricsBuilder) RecordAerospikeNamespaceMemoryFreeDataPoint(ts pcommon.Timestamp, inputVal string) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for AerospikeNamespaceMemoryFree, value was %s: %w", inputVal, err)
	}
	mb.metricAerospikeNamespaceMemoryFree.recordDataPoint(mb.startTime, ts, val)
	return nil
}

// RecordAerospikeNamespaceMemoryUsageDataPoint adds a data point to aerospike.namespace.memory.usage metric.
func (mb *MetricsBuilder) RecordAerospikeNamespaceMemoryUsageDataPoint(ts pcommon.Timestamp, inputVal string, componentAttribute AerospikeNamespaceMemoryUsageAttributeComponent) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for AerospikeNamespaceMemoryUsage, value was %s: %w", inputVal, err)
	}
	mb.metricAerospikeNamespaceMemoryUsage.recordDataPoint(mb.startTime, ts, val, componentAttribute.String())
	return nil
}

// RecordAerospikeNamespaceQueryCountDataPoint adds a data point to aerospike.namespace.query.count metric.
func (mb *MetricsBuilder) RecordAerospikeNamespaceQueryCountDataPoint(ts pcommon.Timestamp, inputVal string, indexAttribute AerospikeNamespaceQueryCountAttributeIndex, resultAttribute AerospikeNamespaceQueryCountAttributeResult, typeAttribute AerospikeNamespaceQueryCountAttributeType) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for AerospikeNamespaceQueryCount, value was %s: %w", inputVal, err)
	}
	mb.metricAerospikeNamespaceQueryCount.recordDataPoint(mb.startTime, ts, val, indexAttribute.String(), resultAttribute.String(), typeAttribute.String())
	return nil
}

// RecordAerospikeNamespaceScanCountDataPoint adds a data point to aerospike.namespace.scan.count metric.
func (mb *MetricsBuilder) RecordAerospikeNamespaceScanCountDataPoint(ts pcommon.Timestamp, inputVal string, resultAttribute AerospikeNamespaceScanCountAttributeResult, typeAttribute AerospikeNamespaceScanCountAttributeType) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for AerospikeNamespaceScanCount, value was %s: %w", inputVal, err)
	}
	mb.metricAerospikeNamespaceScanCount.recordDataPoint(mb.startTime, ts, val, resultAttribute.String(), typeAttribute.String())
	return nil
}

// RecordAerospikeNamespaceTransactionCountDataPoint adds a data point to aerospike.namespace.transaction.count metric.
func (mb *MetricsBuilder) RecordAerospikeNamespaceTransactionCountDataPoint(ts pcommon.Timestamp, inputVal string, resultAttribute AerospikeNamespaceTransactionCountAttributeResult, typeAttribute AerospikeNamespaceTransactionCountAttributeType) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for AerospikeNamespaceTransactionCount, value was %s: %w", inputVal, err)
	}
	mb.metricAerospikeNamespaceTransactionCount.recordDataPoint(mb.startTime, ts, val, resultAttribute.String(), typeAttribute.String())
	return nil
}

// RecordAerospikeNodeConnectionCountDataPoint adds a data point to aerospike.node.connection.count metric.
func (mb *MetricsBuilder) RecordAerospikeNodeConnectionCountDataPoint(ts pcommon.Timestamp, inputVal string, operationAttribute AerospikeNodeConnectionCountAttributeOperation, typeAttribute AerospikeNodeConnectionCountAttributeType) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for AerospikeNodeConnectionCount, value was %s: %w", inputVal, err)
	}
	mb.metricAerospikeNodeConnectionCount.recordDataPoint(mb.startTime, ts, val, operationAttribute.String(), typeAttribute.String())
	return nil
}

// RecordAerospikeNodeConnectionOpenDataPoint adds a data point to aerospike.node.connection.open metric.
func (mb *MetricsBuilder) RecordAerospikeNodeConnectionOpenDataPoint(ts pcommon.Timestamp, inputVal string, typeAttribute AerospikeNodeConnectionOpenAttributeType) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for AerospikeNodeConnectionOpen, value was %s: %w", inputVal, err)
	}
	mb.metricAerospikeNodeConnectionOpen.recordDataPoint(mb.startTime, ts, val, typeAttribute.String())
	return nil
}

// RecordAerospikeNodeMemoryFreeDataPoint adds a data point to aerospike.node.memory.free metric.
func (mb *MetricsBuilder) RecordAerospikeNodeMemoryFreeDataPoint(ts pcommon.Timestamp, inputVal string) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for AerospikeNodeMemoryFree, value was %s: %w", inputVal, err)
	}
	mb.metricAerospikeNodeMemoryFree.recordDataPoint(mb.startTime, ts, val)
	return nil
}

// RecordAerospikeNodeQueryTrackedDataPoint adds a data point to aerospike.node.query.tracked metric.
func (mb *MetricsBuilder) RecordAerospikeNodeQueryTrackedDataPoint(ts pcommon.Timestamp, inputVal string) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for AerospikeNodeQueryTracked, value was %s: %w", inputVal, err)
	}
	mb.metricAerospikeNodeQueryTracked.recordDataPoint(mb.startTime, ts, val)
	return nil
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}
