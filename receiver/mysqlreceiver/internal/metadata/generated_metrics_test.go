// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testConfigCollection int

const (
	testSetDefault testConfigCollection = iota
	testSetAll
	testSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name      string
		configSet testConfigCollection
	}{
		{
			name:      "default",
			configSet: testSetDefault,
		},
		{
			name:      "all_set",
			configSet: testSetAll,
		},
		{
			name:      "none_set",
			configSet: testSetNone,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopCreateSettings()
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, test.name), settings, WithStartTime(start))

			expectedWarnings := 0
			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			allMetricsCount++
			mb.RecordMysqlBufferPoolDataPagesDataPoint(ts, 1, AttributeBufferPoolDataDirty)

			allMetricsCount++
			mb.RecordMysqlBufferPoolLimitDataPoint(ts, "1")

			allMetricsCount++
			mb.RecordMysqlBufferPoolOperationsDataPoint(ts, "1", AttributeBufferPoolOperationsReadAheadRnd)

			allMetricsCount++
			mb.RecordMysqlBufferPoolPageFlushesDataPoint(ts, "1")

			allMetricsCount++
			mb.RecordMysqlBufferPoolPagesDataPoint(ts, "1", AttributeBufferPoolPagesData)

			allMetricsCount++
			mb.RecordMysqlBufferPoolUsageDataPoint(ts, 1, AttributeBufferPoolDataDirty)

			allMetricsCount++
			mb.RecordMysqlClientNetworkIoDataPoint(ts, "1", AttributeDirectionReceived)

			allMetricsCount++
			mb.RecordMysqlCommandsDataPoint(ts, "1", AttributeCommandDelete)

			allMetricsCount++
			mb.RecordMysqlConnectionCountDataPoint(ts, "1")

			allMetricsCount++
			mb.RecordMysqlConnectionErrorsDataPoint(ts, "1", AttributeConnectionErrorAccept)

			allMetricsCount++
			mb.RecordMysqlDoubleWritesDataPoint(ts, "1", AttributeDoubleWritesPagesWritten)

			allMetricsCount++
			mb.RecordMysqlHandlersDataPoint(ts, "1", AttributeHandlerCommit)

			allMetricsCount++
			mb.RecordMysqlIndexIoWaitCountDataPoint(ts, 1, AttributeIoWaitsOperationsDelete, "table_name-val", "schema-val", "index_name-val")

			allMetricsCount++
			mb.RecordMysqlIndexIoWaitTimeDataPoint(ts, 1, AttributeIoWaitsOperationsDelete, "table_name-val", "schema-val", "index_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbActiveTransactionsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolDataDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolDirtyDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolFreeDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolPagesDataDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolPagesDirtyDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolPagesFlushedDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolPagesFreeDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolPagesTotalDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolReadAheadDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolReadAheadEvictedDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolReadAheadRndDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolReadRequestsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolReadsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolTotalDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolUsedDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolUtilizationDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolWaitFreeDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolWriteRequestsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbCheckpointAgeDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbCurrentRowLocksDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbCurrentTransactionsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbDataFsyncsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbDataPendingFsyncsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbDataPendingReadsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbDataPendingWritesDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbDataReadDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbDataReadsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbDataWritesDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbDataWrittenDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbDblwrPagesWrittenDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbDblwrWritesDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbHashIndexCellsTotalDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbHashIndexCellsUsedDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbHistoryListLengthDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbIbufFreeListDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbIbufMergedDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbIbufMergedDeleteMarksDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbIbufMergedDeletesDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbIbufMergedInsertsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbIbufMergesDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbIbufSegmentSizeDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbIbufSizeDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbLockStructsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbLockedTablesDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbLockedTransactionsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbLogWaitsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbLogWriteRequestsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbLogWritesDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbLsnCurrentDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbLsnFlushedDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbLsnLastCheckpointDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbMemAdaptiveHashDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbMemAdditionalPoolDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbMemDictionaryDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbMemFileSystemDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbMemLockSystemDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbMemPageHashDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbMemRecoverySystemDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbMemThreadHashDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbMemTotalDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbMutexOsWaitsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbMutexSpinRoundsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbMutexSpinWaitsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbOsFileFsyncsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbOsFileReadsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbOsFileWritesDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbOsLogFsyncsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbOsLogPendingFsyncsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbOsLogPendingWritesDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbOsLogWrittenDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbPagesCreatedDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbPagesReadDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbPagesWrittenDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbPendingAioLogIosDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbPendingAioSyncIosDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbPendingBufferPoolFlushesDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbPendingCheckpointWritesDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbPendingIbufAioReadsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbPendingLogFlushesDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbPendingLogWritesDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbPendingNormalAioReadsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbPendingNormalAioWritesDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbQueriesInsideDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbQueriesQueuedDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbReadViewsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbRowLockCurrentWaitsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbRowLockTimeDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbRowLockWaitsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbRowsDeletedDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbRowsInsertedDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbRowsReadDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbRowsUpdatedDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbSLockOsWaitsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbSLockSpinRoundsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbSLockSpinWaitsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbSemaphoreWaitTimeDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbSemaphoreWaitsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbTablesInUseDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbXLockOsWaitsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbXLockSpinRoundsDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbXLockSpinWaitsDataPoint(ts, "1")

			allMetricsCount++
			mb.RecordMysqlJoinsDataPoint(ts, "1", AttributeJoinKindFull)

			allMetricsCount++
			mb.RecordMysqlLocksDataPoint(ts, "1", AttributeLocksImmediate)

			allMetricsCount++
			mb.RecordMysqlLogOperationsDataPoint(ts, "1", AttributeLogOperationsWaits)

			allMetricsCount++
			mb.RecordMysqlMysqlxConnectionsDataPoint(ts, "1", AttributeConnectionStatusAccepted)

			allMetricsCount++
			mb.RecordMysqlMysqlxWorkerThreadsDataPoint(ts, "1", AttributeMysqlxThreadsAvailable)

			allMetricsCount++
			mb.RecordMysqlOpenedResourcesDataPoint(ts, "1", AttributeOpenedResourcesFile)

			allMetricsCount++
			mb.RecordMysqlOperationsDataPoint(ts, "1", AttributeOperationsFsyncs)

			allMetricsCount++
			mb.RecordMysqlPageOperationsDataPoint(ts, "1", AttributePageOperationsCreated)

			allMetricsCount++
			mb.RecordMysqlPreparedStatementsDataPoint(ts, "1", AttributePreparedStatementsCommandExecute)

			allMetricsCount++
			mb.RecordMysqlQueryClientCountDataPoint(ts, "1")

			allMetricsCount++
			mb.RecordMysqlQueryCountDataPoint(ts, "1")

			allMetricsCount++
			mb.RecordMysqlQuerySlowCountDataPoint(ts, "1")

			allMetricsCount++
			mb.RecordMysqlReplicaSQLDelayDataPoint(ts, 1)

			allMetricsCount++
			mb.RecordMysqlReplicaTimeBehindSourceDataPoint(ts, 1)

			allMetricsCount++
			mb.RecordMysqlRowLocksDataPoint(ts, "1", AttributeRowLocksWaits)

			allMetricsCount++
			mb.RecordMysqlRowOperationsDataPoint(ts, "1", AttributeRowOperationsDeleted)

			allMetricsCount++
			mb.RecordMysqlSortsDataPoint(ts, "1", AttributeSortsMergePasses)

			allMetricsCount++
			mb.RecordMysqlStatementEventCountDataPoint(ts, 1, "schema-val", "digest-val", "digest_text-val", AttributeEventStateErrors)

			allMetricsCount++
			mb.RecordMysqlStatementEventWaitTimeDataPoint(ts, 1, "schema-val", "digest-val", "digest_text-val")

			allMetricsCount++
			mb.RecordMysqlTableIoWaitCountDataPoint(ts, 1, AttributeIoWaitsOperationsDelete, "table_name-val", "schema-val")

			allMetricsCount++
			mb.RecordMysqlTableIoWaitTimeDataPoint(ts, 1, AttributeIoWaitsOperationsDelete, "table_name-val", "schema-val")

			allMetricsCount++
			mb.RecordMysqlTableLockWaitReadCountDataPoint(ts, 1, "schema-val", "table_name-val", AttributeReadLockTypeNormal)

			allMetricsCount++
			mb.RecordMysqlTableLockWaitReadTimeDataPoint(ts, 1, "schema-val", "table_name-val", AttributeReadLockTypeNormal)

			allMetricsCount++
			mb.RecordMysqlTableLockWaitWriteCountDataPoint(ts, 1, "schema-val", "table_name-val", AttributeWriteLockTypeAllowWrite)

			allMetricsCount++
			mb.RecordMysqlTableLockWaitWriteTimeDataPoint(ts, 1, "schema-val", "table_name-val", AttributeWriteLockTypeAllowWrite)

			allMetricsCount++
			mb.RecordMysqlTableOpenCacheDataPoint(ts, "1", AttributeCacheStatusHit)

			allMetricsCount++
			mb.RecordMysqlThreadsDataPoint(ts, "1", AttributeThreadsCached)

			allMetricsCount++
			mb.RecordMysqlTmpResourcesDataPoint(ts, "1", AttributeTmpResourceDiskTables)

			allMetricsCount++
			mb.RecordMysqlUptimeDataPoint(ts, "1")

			rb := mb.NewResourceBuilder()
			rb.SetMysqlInstanceEndpoint("mysql.instance.endpoint-val")
			res := rb.Emit()
			metrics := mb.Emit(WithResource(res))

			if test.configSet == testSetNone {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if test.configSet == testSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if test.configSet == testSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "mysql.buffer_pool.data_pages":
					assert.False(t, validatedMetrics["mysql.buffer_pool.data_pages"], "Found a duplicate in the metrics slice: mysql.buffer_pool.data_pages")
					validatedMetrics["mysql.buffer_pool.data_pages"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of data pages in the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("status")
					assert.True(t, ok)
					assert.EqualValues(t, "dirty", attrVal.Str())
				case "mysql.buffer_pool.limit":
					assert.False(t, validatedMetrics["mysql.buffer_pool.limit"], "Found a duplicate in the metrics slice: mysql.buffer_pool.limit")
					validatedMetrics["mysql.buffer_pool.limit"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The configured size of the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.buffer_pool.operations":
					assert.False(t, validatedMetrics["mysql.buffer_pool.operations"], "Found a duplicate in the metrics slice: mysql.buffer_pool.operations")
					validatedMetrics["mysql.buffer_pool.operations"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of operations on the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("operation")
					assert.True(t, ok)
					assert.EqualValues(t, "read_ahead_rnd", attrVal.Str())
				case "mysql.buffer_pool.page_flushes":
					assert.False(t, validatedMetrics["mysql.buffer_pool.page_flushes"], "Found a duplicate in the metrics slice: mysql.buffer_pool.page_flushes")
					validatedMetrics["mysql.buffer_pool.page_flushes"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of requests to flush pages from the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.buffer_pool.pages":
					assert.False(t, validatedMetrics["mysql.buffer_pool.pages"], "Found a duplicate in the metrics slice: mysql.buffer_pool.pages")
					validatedMetrics["mysql.buffer_pool.pages"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of pages in the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("kind")
					assert.True(t, ok)
					assert.EqualValues(t, "data", attrVal.Str())
				case "mysql.buffer_pool.usage":
					assert.False(t, validatedMetrics["mysql.buffer_pool.usage"], "Found a duplicate in the metrics slice: mysql.buffer_pool.usage")
					validatedMetrics["mysql.buffer_pool.usage"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of bytes in the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("status")
					assert.True(t, ok)
					assert.EqualValues(t, "dirty", attrVal.Str())
				case "mysql.client.network.io":
					assert.False(t, validatedMetrics["mysql.client.network.io"], "Found a duplicate in the metrics slice: mysql.client.network.io")
					validatedMetrics["mysql.client.network.io"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of transmitted bytes between server and clients.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("kind")
					assert.True(t, ok)
					assert.EqualValues(t, "received", attrVal.Str())
				case "mysql.commands":
					assert.False(t, validatedMetrics["mysql.commands"], "Found a duplicate in the metrics slice: mysql.commands")
					validatedMetrics["mysql.commands"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of times each type of command has been executed.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("command")
					assert.True(t, ok)
					assert.EqualValues(t, "delete", attrVal.Str())
				case "mysql.connection.count":
					assert.False(t, validatedMetrics["mysql.connection.count"], "Found a duplicate in the metrics slice: mysql.connection.count")
					validatedMetrics["mysql.connection.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of connection attempts (successful or not) to the MySQL server.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.connection.errors":
					assert.False(t, validatedMetrics["mysql.connection.errors"], "Found a duplicate in the metrics slice: mysql.connection.errors")
					validatedMetrics["mysql.connection.errors"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Errors that occur during the client connection process.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("error")
					assert.True(t, ok)
					assert.EqualValues(t, "accept", attrVal.Str())
				case "mysql.double_writes":
					assert.False(t, validatedMetrics["mysql.double_writes"], "Found a duplicate in the metrics slice: mysql.double_writes")
					validatedMetrics["mysql.double_writes"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of writes to the InnoDB doublewrite buffer.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("kind")
					assert.True(t, ok)
					assert.EqualValues(t, "pages_written", attrVal.Str())
				case "mysql.handlers":
					assert.False(t, validatedMetrics["mysql.handlers"], "Found a duplicate in the metrics slice: mysql.handlers")
					validatedMetrics["mysql.handlers"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of requests to various MySQL handlers.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("kind")
					assert.True(t, ok)
					assert.EqualValues(t, "commit", attrVal.Str())
				case "mysql.index.io.wait.count":
					assert.False(t, validatedMetrics["mysql.index.io.wait.count"], "Found a duplicate in the metrics slice: mysql.index.io.wait.count")
					validatedMetrics["mysql.index.io.wait.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total count of I/O wait events for an index.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("operation")
					assert.True(t, ok)
					assert.EqualValues(t, "delete", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("table")
					assert.True(t, ok)
					assert.EqualValues(t, "table_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("schema")
					assert.True(t, ok)
					assert.EqualValues(t, "schema-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("index")
					assert.True(t, ok)
					assert.EqualValues(t, "index_name-val", attrVal.Str())
				case "mysql.index.io.wait.time":
					assert.False(t, validatedMetrics["mysql.index.io.wait.time"], "Found a duplicate in the metrics slice: mysql.index.io.wait.time")
					validatedMetrics["mysql.index.io.wait.time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total time of I/O wait events for an index.", ms.At(i).Description())
					assert.Equal(t, "ns", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("operation")
					assert.True(t, ok)
					assert.EqualValues(t, "delete", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("table")
					assert.True(t, ok)
					assert.EqualValues(t, "table_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("schema")
					assert.True(t, ok)
					assert.EqualValues(t, "schema-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("index")
					assert.True(t, ok)
					assert.EqualValues(t, "index_name-val", attrVal.Str())
				case "mysql.innodb.active_transactions":
					assert.False(t, validatedMetrics["mysql.innodb.active_transactions"], "Found a duplicate in the metrics slice: mysql.innodb.active_transactions")
					validatedMetrics["mysql.innodb.active_transactions"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current number of active transactions in InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{operation}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_data":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_data"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_data")
					validatedMetrics["mysql.innodb.buffer_pool_data"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total number of bytes of data in the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_dirty":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_dirty"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_dirty")
					validatedMetrics["mysql.innodb.buffer_pool_dirty"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current number of bytes held in dirty pages in the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_free":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_free"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_free")
					validatedMetrics["mysql.innodb.buffer_pool_free"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of bytes currently free within the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_pages_data":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_pages_data"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_pages_data")
					validatedMetrics["mysql.innodb.buffer_pool_pages_data"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of data pages in the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "{page}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_pages_dirty":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_pages_dirty"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_pages_dirty")
					validatedMetrics["mysql.innodb.buffer_pool_pages_dirty"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of dirty pages in the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "{page}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_pages_flushed":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_pages_flushed"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_pages_flushed")
					validatedMetrics["mysql.innodb.buffer_pool_pages_flushed"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate of pages being flushed from the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "{page}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_pages_free":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_pages_free"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_pages_free")
					validatedMetrics["mysql.innodb.buffer_pool_pages_free"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of free pages in the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "{page}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_pages_total":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_pages_total"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_pages_total")
					validatedMetrics["mysql.innodb.buffer_pool_pages_total"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total number of pages in the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "{page}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_read_ahead":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_read_ahead"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_read_ahead")
					validatedMetrics["mysql.innodb.buffer_pool_read_ahead"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate of pages read into the buffer pool by read-ahead.", ms.At(i).Description())
					assert.Equal(t, "{page}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_read_ahead_evicted":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_read_ahead_evicted"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_read_ahead_evicted")
					validatedMetrics["mysql.innodb.buffer_pool_read_ahead_evicted"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate of pages read by read-ahead and then evicted without being accessed.", ms.At(i).Description())
					assert.Equal(t, "{page}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_read_ahead_rnd":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_read_ahead_rnd"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_read_ahead_rnd")
					validatedMetrics["mysql.innodb.buffer_pool_read_ahead_rnd"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of random read-aheads in the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "{operation}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_read_requests":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_read_requests"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_read_requests")
					validatedMetrics["mysql.innodb.buffer_pool_read_requests"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate of read requests made to the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "{read}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_reads":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_reads"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_reads")
					validatedMetrics["mysql.innodb.buffer_pool_reads"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate of read operations that required actual disk I/O in the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "{read}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_total":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_total"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_total")
					validatedMetrics["mysql.innodb.buffer_pool_total"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total number of bytes within the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_used":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_used"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_used")
					validatedMetrics["mysql.innodb.buffer_pool_used"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of bytes currently used within the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_utilization":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_utilization"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_utilization")
					validatedMetrics["mysql.innodb.buffer_pool_utilization"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Percentage of the InnoDB buffer pool currently being utilized.", ms.At(i).Description())
					assert.Equal(t, "{fraction}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_wait_free":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_wait_free"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_wait_free")
					validatedMetrics["mysql.innodb.buffer_pool_wait_free"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of waits for a free page in the buffer pool.", ms.At(i).Description())
					assert.Equal(t, "{wait}/s", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_write_requests":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_write_requests"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_write_requests")
					validatedMetrics["mysql.innodb.buffer_pool_write_requests"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate of write requests to the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "{write}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.checkpoint_age":
					assert.False(t, validatedMetrics["mysql.innodb.checkpoint_age"], "Found a duplicate in the metrics slice: mysql.innodb.checkpoint_age")
					validatedMetrics["mysql.innodb.checkpoint_age"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Age of the last checkpoint in InnoDB.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.current_row_locks":
					assert.False(t, validatedMetrics["mysql.innodb.current_row_locks"], "Found a duplicate in the metrics slice: mysql.innodb.current_row_locks")
					validatedMetrics["mysql.innodb.current_row_locks"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current number of row locks held by operations in InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{lock}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.current_transactions":
					assert.False(t, validatedMetrics["mysql.innodb.current_transactions"], "Found a duplicate in the metrics slice: mysql.innodb.current_transactions")
					validatedMetrics["mysql.innodb.current_transactions"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current number of transactions happening in InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{transaction}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.data_fsyncs":
					assert.False(t, validatedMetrics["mysql.innodb.data_fsyncs"], "Found a duplicate in the metrics slice: mysql.innodb.data_fsyncs")
					validatedMetrics["mysql.innodb.data_fsyncs"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate of fsync operations by InnoDB to disk.", ms.At(i).Description())
					assert.Equal(t, "{operation}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.data_pending_fsyncs":
					assert.False(t, validatedMetrics["mysql.innodb.data_pending_fsyncs"], "Found a duplicate in the metrics slice: mysql.innodb.data_pending_fsyncs")
					validatedMetrics["mysql.innodb.data_pending_fsyncs"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current number of pending fsync operations in InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{operation}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.data_pending_reads":
					assert.False(t, validatedMetrics["mysql.innodb.data_pending_reads"], "Found a duplicate in the metrics slice: mysql.innodb.data_pending_reads")
					validatedMetrics["mysql.innodb.data_pending_reads"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current number of pending read operations in InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{read}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.data_pending_writes":
					assert.False(t, validatedMetrics["mysql.innodb.data_pending_writes"], "Found a duplicate in the metrics slice: mysql.innodb.data_pending_writes")
					validatedMetrics["mysql.innodb.data_pending_writes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current number of pending write operations in InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{write}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.data_read":
					assert.False(t, validatedMetrics["mysql.innodb.data_read"], "Found a duplicate in the metrics slice: mysql.innodb.data_read")
					validatedMetrics["mysql.innodb.data_read"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which data is read from disk by InnoDB.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.data_reads":
					assert.False(t, validatedMetrics["mysql.innodb.data_reads"], "Found a duplicate in the metrics slice: mysql.innodb.data_reads")
					validatedMetrics["mysql.innodb.data_reads"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate of data read operations performed by InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{read}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.data_writes":
					assert.False(t, validatedMetrics["mysql.innodb.data_writes"], "Found a duplicate in the metrics slice: mysql.innodb.data_writes")
					validatedMetrics["mysql.innodb.data_writes"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate of data write operations performed by InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{write}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.data_written":
					assert.False(t, validatedMetrics["mysql.innodb.data_written"], "Found a duplicate in the metrics slice: mysql.innodb.data_written")
					validatedMetrics["mysql.innodb.data_written"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which data is written to disk by InnoDB.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.dblwr_pages_written":
					assert.False(t, validatedMetrics["mysql.innodb.dblwr_pages_written"], "Found a duplicate in the metrics slice: mysql.innodb.dblwr_pages_written")
					validatedMetrics["mysql.innodb.dblwr_pages_written"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate of pages written to the doublewrite buffer to prevent partial page writes.", ms.At(i).Description())
					assert.Equal(t, "{page}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.dblwr_writes":
					assert.False(t, validatedMetrics["mysql.innodb.dblwr_writes"], "Found a duplicate in the metrics slice: mysql.innodb.dblwr_writes")
					validatedMetrics["mysql.innodb.dblwr_writes"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate of operations writing to the doublewrite buffer.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.hash_index_cells_total":
					assert.False(t, validatedMetrics["mysql.innodb.hash_index_cells_total"], "Found a duplicate in the metrics slice: mysql.innodb.hash_index_cells_total")
					validatedMetrics["mysql.innodb.hash_index_cells_total"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total number of cells in the adaptive hash index.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.hash_index_cells_used":
					assert.False(t, validatedMetrics["mysql.innodb.hash_index_cells_used"], "Found a duplicate in the metrics slice: mysql.innodb.hash_index_cells_used")
					validatedMetrics["mysql.innodb.hash_index_cells_used"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of used cells in the adaptive hash index.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.history_list_length":
					assert.False(t, validatedMetrics["mysql.innodb.history_list_length"], "Found a duplicate in the metrics slice: mysql.innodb.history_list_length")
					validatedMetrics["mysql.innodb.history_list_length"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Length of the history list, indicating the number of pages consumed by transactions not yet flushed.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.ibuf_free_list":
					assert.False(t, validatedMetrics["mysql.innodb.ibuf_free_list"], "Found a duplicate in the metrics slice: mysql.innodb.ibuf_free_list")
					validatedMetrics["mysql.innodb.ibuf_free_list"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of pages in the insert buffer free list.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.ibuf_merged":
					assert.False(t, validatedMetrics["mysql.innodb.ibuf_merged"], "Found a duplicate in the metrics slice: mysql.innodb.ibuf_merged")
					validatedMetrics["mysql.innodb.ibuf_merged"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which records are merged from the insert buffer.", ms.At(i).Description())
					assert.Equal(t, "{operation}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.ibuf_merged_delete_marks":
					assert.False(t, validatedMetrics["mysql.innodb.ibuf_merged_delete_marks"], "Found a duplicate in the metrics slice: mysql.innodb.ibuf_merged_delete_marks")
					validatedMetrics["mysql.innodb.ibuf_merged_delete_marks"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate of delete marks merged from the insert buffer to the buffer pool.", ms.At(i).Description())
					assert.Equal(t, "{operation}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.ibuf_merged_deletes":
					assert.False(t, validatedMetrics["mysql.innodb.ibuf_merged_deletes"], "Found a duplicate in the metrics slice: mysql.innodb.ibuf_merged_deletes")
					validatedMetrics["mysql.innodb.ibuf_merged_deletes"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate of delete operations merged from the insert buffer.", ms.At(i).Description())
					assert.Equal(t, "{operation}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.ibuf_merged_inserts":
					assert.False(t, validatedMetrics["mysql.innodb.ibuf_merged_inserts"], "Found a duplicate in the metrics slice: mysql.innodb.ibuf_merged_inserts")
					validatedMetrics["mysql.innodb.ibuf_merged_inserts"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate of insert operations merged from the insert buffer.", ms.At(i).Description())
					assert.Equal(t, "{operation}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.ibuf_merges":
					assert.False(t, validatedMetrics["mysql.innodb.ibuf_merges"], "Found a duplicate in the metrics slice: mysql.innodb.ibuf_merges")
					validatedMetrics["mysql.innodb.ibuf_merges"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate of operations merging data from the insert buffer to the buffer pool.", ms.At(i).Description())
					assert.Equal(t, "{operation}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.ibuf_segment_size":
					assert.False(t, validatedMetrics["mysql.innodb.ibuf_segment_size"], "Found a duplicate in the metrics slice: mysql.innodb.ibuf_segment_size")
					validatedMetrics["mysql.innodb.ibuf_segment_size"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Size of the segment available for the insert buffer.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.ibuf_size":
					assert.False(t, validatedMetrics["mysql.innodb.ibuf_size"], "Found a duplicate in the metrics slice: mysql.innodb.ibuf_size")
					validatedMetrics["mysql.innodb.ibuf_size"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total size of the insert buffer.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.lock_structs":
					assert.False(t, validatedMetrics["mysql.innodb.lock_structs"], "Found a duplicate in the metrics slice: mysql.innodb.lock_structs")
					validatedMetrics["mysql.innodb.lock_structs"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which lock structures are being used or created.", ms.At(i).Description())
					assert.Equal(t, "{operation}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.locked_tables":
					assert.False(t, validatedMetrics["mysql.innodb.locked_tables"], "Found a duplicate in the metrics slice: mysql.innodb.locked_tables")
					validatedMetrics["mysql.innodb.locked_tables"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of tables currently locked by InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{operation}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.locked_transactions":
					assert.False(t, validatedMetrics["mysql.innodb.locked_transactions"], "Found a duplicate in the metrics slice: mysql.innodb.locked_transactions")
					validatedMetrics["mysql.innodb.locked_transactions"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of transactions that have acquired locks.", ms.At(i).Description())
					assert.Equal(t, "{operation}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.log_waits":
					assert.False(t, validatedMetrics["mysql.innodb.log_waits"], "Found a duplicate in the metrics slice: mysql.innodb.log_waits")
					validatedMetrics["mysql.innodb.log_waits"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of waits due to log buffer being too small.", ms.At(i).Description())
					assert.Equal(t, "{wait}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.log_write_requests":
					assert.False(t, validatedMetrics["mysql.innodb.log_write_requests"], "Found a duplicate in the metrics slice: mysql.innodb.log_write_requests")
					validatedMetrics["mysql.innodb.log_write_requests"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of write requests made to the log.", ms.At(i).Description())
					assert.Equal(t, "{write}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.log_writes":
					assert.False(t, validatedMetrics["mysql.innodb.log_writes"], "Found a duplicate in the metrics slice: mysql.innodb.log_writes")
					validatedMetrics["mysql.innodb.log_writes"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate of actual log writes.", ms.At(i).Description())
					assert.Equal(t, "{write}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.lsn_current":
					assert.False(t, validatedMetrics["mysql.innodb.lsn_current"], "Found a duplicate in the metrics slice: mysql.innodb.lsn_current")
					validatedMetrics["mysql.innodb.lsn_current"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Current log sequence number.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.lsn_flushed":
					assert.False(t, validatedMetrics["mysql.innodb.lsn_flushed"], "Found a duplicate in the metrics slice: mysql.innodb.lsn_flushed")
					validatedMetrics["mysql.innodb.lsn_flushed"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Log sequence number of the last flushed log.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.lsn_last_checkpoint":
					assert.False(t, validatedMetrics["mysql.innodb.lsn_last_checkpoint"], "Found a duplicate in the metrics slice: mysql.innodb.lsn_last_checkpoint")
					validatedMetrics["mysql.innodb.lsn_last_checkpoint"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Log sequence number of the last checkpoint.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.mem_adaptive_hash":
					assert.False(t, validatedMetrics["mysql.innodb.mem_adaptive_hash"], "Found a duplicate in the metrics slice: mysql.innodb.mem_adaptive_hash")
					validatedMetrics["mysql.innodb.mem_adaptive_hash"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Memory used by InnoDB for the adaptive hash index.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.mem_additional_pool":
					assert.False(t, validatedMetrics["mysql.innodb.mem_additional_pool"], "Found a duplicate in the metrics slice: mysql.innodb.mem_additional_pool")
					validatedMetrics["mysql.innodb.mem_additional_pool"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Memory allocated to InnoDB's additional pool.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.mem_dictionary":
					assert.False(t, validatedMetrics["mysql.innodb.mem_dictionary"], "Found a duplicate in the metrics slice: mysql.innodb.mem_dictionary")
					validatedMetrics["mysql.innodb.mem_dictionary"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Memory used by InnoDB for dictionary information.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.mem_file_system":
					assert.False(t, validatedMetrics["mysql.innodb.mem_file_system"], "Found a duplicate in the metrics slice: mysql.innodb.mem_file_system")
					validatedMetrics["mysql.innodb.mem_file_system"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Memory used by InnoDB for file system data structures.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.mem_lock_system":
					assert.False(t, validatedMetrics["mysql.innodb.mem_lock_system"], "Found a duplicate in the metrics slice: mysql.innodb.mem_lock_system")
					validatedMetrics["mysql.innodb.mem_lock_system"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Memory used by InnoDB for lock system data structures.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.mem_page_hash":
					assert.False(t, validatedMetrics["mysql.innodb.mem_page_hash"], "Found a duplicate in the metrics slice: mysql.innodb.mem_page_hash")
					validatedMetrics["mysql.innodb.mem_page_hash"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Memory used by InnoDB for page hash.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.mem_recovery_system":
					assert.False(t, validatedMetrics["mysql.innodb.mem_recovery_system"], "Found a duplicate in the metrics slice: mysql.innodb.mem_recovery_system")
					validatedMetrics["mysql.innodb.mem_recovery_system"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Memory used by InnoDB for transaction recovery.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.mem_thread_hash":
					assert.False(t, validatedMetrics["mysql.innodb.mem_thread_hash"], "Found a duplicate in the metrics slice: mysql.innodb.mem_thread_hash")
					validatedMetrics["mysql.innodb.mem_thread_hash"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Memory used by InnoDB for thread hash.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.mem_total":
					assert.False(t, validatedMetrics["mysql.innodb.mem_total"], "Found a duplicate in the metrics slice: mysql.innodb.mem_total")
					validatedMetrics["mysql.innodb.mem_total"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total memory allocated to InnoDB.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.mutex_os_waits":
					assert.False(t, validatedMetrics["mysql.innodb.mutex_os_waits"], "Found a duplicate in the metrics slice: mysql.innodb.mutex_os_waits")
					validatedMetrics["mysql.innodb.mutex_os_waits"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which InnoDB operations need to wait for operating system level mutexes.", ms.At(i).Description())
					assert.Equal(t, "{event}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.mutex_spin_rounds":
					assert.False(t, validatedMetrics["mysql.innodb.mutex_spin_rounds"], "Found a duplicate in the metrics slice: mysql.innodb.mutex_spin_rounds")
					validatedMetrics["mysql.innodb.mutex_spin_rounds"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate of spin rounds per mutex spin in InnoDB, showing the effort needed to acquire a mutex.", ms.At(i).Description())
					assert.Equal(t, "{event}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.mutex_spin_waits":
					assert.False(t, validatedMetrics["mysql.innodb.mutex_spin_waits"], "Found a duplicate in the metrics slice: mysql.innodb.mutex_spin_waits")
					validatedMetrics["mysql.innodb.mutex_spin_waits"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate of mutex spin waits in InnoDB, indicating contention within internal data structures.", ms.At(i).Description())
					assert.Equal(t, "{event}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.os_file_fsyncs":
					assert.False(t, validatedMetrics["mysql.innodb.os_file_fsyncs"], "Found a duplicate in the metrics slice: mysql.innodb.os_file_fsyncs")
					validatedMetrics["mysql.innodb.os_file_fsyncs"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which InnoDB performs fsync() operations on files.", ms.At(i).Description())
					assert.Equal(t, "{operation}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.os_file_reads":
					assert.False(t, validatedMetrics["mysql.innodb.os_file_reads"], "Found a duplicate in the metrics slice: mysql.innodb.os_file_reads")
					validatedMetrics["mysql.innodb.os_file_reads"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which files are read by InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{operation}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.os_file_writes":
					assert.False(t, validatedMetrics["mysql.innodb.os_file_writes"], "Found a duplicate in the metrics slice: mysql.innodb.os_file_writes")
					validatedMetrics["mysql.innodb.os_file_writes"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which files are written by InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{operation}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.os_log_fsyncs":
					assert.False(t, validatedMetrics["mysql.innodb.os_log_fsyncs"], "Found a duplicate in the metrics slice: mysql.innodb.os_log_fsyncs")
					validatedMetrics["mysql.innodb.os_log_fsyncs"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which fsync() operations are issued to the InnoDB log file.", ms.At(i).Description())
					assert.Equal(t, "{write}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.os_log_pending_fsyncs":
					assert.False(t, validatedMetrics["mysql.innodb.os_log_pending_fsyncs"], "Found a duplicate in the metrics slice: mysql.innodb.os_log_pending_fsyncs")
					validatedMetrics["mysql.innodb.os_log_pending_fsyncs"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of pending fsyncs for logs.", ms.At(i).Description())
					assert.Equal(t, "{operation}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.os_log_pending_writes":
					assert.False(t, validatedMetrics["mysql.innodb.os_log_pending_writes"], "Found a duplicate in the metrics slice: mysql.innodb.os_log_pending_writes")
					validatedMetrics["mysql.innodb.os_log_pending_writes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of pending log writes.", ms.At(i).Description())
					assert.Equal(t, "{write}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.os_log_written":
					assert.False(t, validatedMetrics["mysql.innodb.os_log_written"], "Found a duplicate in the metrics slice: mysql.innodb.os_log_written")
					validatedMetrics["mysql.innodb.os_log_written"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total bytes written to the log by InnoDB.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.pages_created":
					assert.False(t, validatedMetrics["mysql.innodb.pages_created"], "Found a duplicate in the metrics slice: mysql.innodb.pages_created")
					validatedMetrics["mysql.innodb.pages_created"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which pages are created by InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{page}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.pages_read":
					assert.False(t, validatedMetrics["mysql.innodb.pages_read"], "Found a duplicate in the metrics slice: mysql.innodb.pages_read")
					validatedMetrics["mysql.innodb.pages_read"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which pages are read by InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{page}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.pages_written":
					assert.False(t, validatedMetrics["mysql.innodb.pages_written"], "Found a duplicate in the metrics slice: mysql.innodb.pages_written")
					validatedMetrics["mysql.innodb.pages_written"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which pages are written by InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{page}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.pending_aio_log_ios":
					assert.False(t, validatedMetrics["mysql.innodb.pending_aio_log_ios"], "Found a duplicate in the metrics slice: mysql.innodb.pending_aio_log_ios")
					validatedMetrics["mysql.innodb.pending_aio_log_ios"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of pending asynchronous I/O operations on the log.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.pending_aio_sync_ios":
					assert.False(t, validatedMetrics["mysql.innodb.pending_aio_sync_ios"], "Found a duplicate in the metrics slice: mysql.innodb.pending_aio_sync_ios")
					validatedMetrics["mysql.innodb.pending_aio_sync_ios"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of pending asynchronous I/O operations that need synchronization.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.pending_buffer_pool_flushes":
					assert.False(t, validatedMetrics["mysql.innodb.pending_buffer_pool_flushes"], "Found a duplicate in the metrics slice: mysql.innodb.pending_buffer_pool_flushes")
					validatedMetrics["mysql.innodb.pending_buffer_pool_flushes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of pending buffer pool flush operations.", ms.At(i).Description())
					assert.Equal(t, "{flush}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.pending_checkpoint_writes":
					assert.False(t, validatedMetrics["mysql.innodb.pending_checkpoint_writes"], "Found a duplicate in the metrics slice: mysql.innodb.pending_checkpoint_writes")
					validatedMetrics["mysql.innodb.pending_checkpoint_writes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of pending writes to establish a new checkpoint.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.pending_ibuf_aio_reads":
					assert.False(t, validatedMetrics["mysql.innodb.pending_ibuf_aio_reads"], "Found a duplicate in the metrics slice: mysql.innodb.pending_ibuf_aio_reads")
					validatedMetrics["mysql.innodb.pending_ibuf_aio_reads"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of pending insert buffer asynchronous I/O reads.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.pending_log_flushes":
					assert.False(t, validatedMetrics["mysql.innodb.pending_log_flushes"], "Found a duplicate in the metrics slice: mysql.innodb.pending_log_flushes")
					validatedMetrics["mysql.innodb.pending_log_flushes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of pending flush operations for the log buffer.", ms.At(i).Description())
					assert.Equal(t, "{flush}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.pending_log_writes":
					assert.False(t, validatedMetrics["mysql.innodb.pending_log_writes"], "Found a duplicate in the metrics slice: mysql.innodb.pending_log_writes")
					validatedMetrics["mysql.innodb.pending_log_writes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of pending writes to the log file.", ms.At(i).Description())
					assert.Equal(t, "{write}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.pending_normal_aio_reads":
					assert.False(t, validatedMetrics["mysql.innodb.pending_normal_aio_reads"], "Found a duplicate in the metrics slice: mysql.innodb.pending_normal_aio_reads")
					validatedMetrics["mysql.innodb.pending_normal_aio_reads"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of pending normal asynchronous I/O read operations.", ms.At(i).Description())
					assert.Equal(t, "{read}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.pending_normal_aio_writes":
					assert.False(t, validatedMetrics["mysql.innodb.pending_normal_aio_writes"], "Found a duplicate in the metrics slice: mysql.innodb.pending_normal_aio_writes")
					validatedMetrics["mysql.innodb.pending_normal_aio_writes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of pending normal asynchronous I/O write operations.", ms.At(i).Description())
					assert.Equal(t, "{write}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.queries_inside":
					assert.False(t, validatedMetrics["mysql.innodb.queries_inside"], "Found a duplicate in the metrics slice: mysql.innodb.queries_inside")
					validatedMetrics["mysql.innodb.queries_inside"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of queries currently being processed inside InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{query}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.queries_queued":
					assert.False(t, validatedMetrics["mysql.innodb.queries_queued"], "Found a duplicate in the metrics slice: mysql.innodb.queries_queued")
					validatedMetrics["mysql.innodb.queries_queued"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of queries waiting to be processed by InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{query}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.read_views":
					assert.False(t, validatedMetrics["mysql.innodb.read_views"], "Found a duplicate in the metrics slice: mysql.innodb.read_views")
					validatedMetrics["mysql.innodb.read_views"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of 'read view' structures currently active; these are used to manage consistent read views.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.row_lock_current_waits":
					assert.False(t, validatedMetrics["mysql.innodb.row_lock_current_waits"], "Found a duplicate in the metrics slice: mysql.innodb.row_lock_current_waits")
					validatedMetrics["mysql.innodb.row_lock_current_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current number of operations waiting for row locks in InnoDB.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.row_lock_time":
					assert.False(t, validatedMetrics["mysql.innodb.row_lock_time"], "Found a duplicate in the metrics slice: mysql.innodb.row_lock_time")
					validatedMetrics["mysql.innodb.row_lock_time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total time spent waiting for row locks by operations in InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{fraction}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.row_lock_waits":
					assert.False(t, validatedMetrics["mysql.innodb.row_lock_waits"], "Found a duplicate in the metrics slice: mysql.innodb.row_lock_waits")
					validatedMetrics["mysql.innodb.row_lock_waits"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which operations wait for row locks, indicative of contention on row-level data.", ms.At(i).Description())
					assert.Equal(t, "{event}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.rows_deleted":
					assert.False(t, validatedMetrics["mysql.innodb.rows_deleted"], "Found a duplicate in the metrics slice: mysql.innodb.rows_deleted")
					validatedMetrics["mysql.innodb.rows_deleted"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which rows are being deleted in InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{row}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.rows_inserted":
					assert.False(t, validatedMetrics["mysql.innodb.rows_inserted"], "Found a duplicate in the metrics slice: mysql.innodb.rows_inserted")
					validatedMetrics["mysql.innodb.rows_inserted"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which rows are being inserted in InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{row}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.rows_read":
					assert.False(t, validatedMetrics["mysql.innodb.rows_read"], "Found a duplicate in the metrics slice: mysql.innodb.rows_read")
					validatedMetrics["mysql.innodb.rows_read"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which rows are being read in InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{row}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.rows_updated":
					assert.False(t, validatedMetrics["mysql.innodb.rows_updated"], "Found a duplicate in the metrics slice: mysql.innodb.rows_updated")
					validatedMetrics["mysql.innodb.rows_updated"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which rows are being updated in InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{row}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.s_lock_os_waits":
					assert.False(t, validatedMetrics["mysql.innodb.s_lock_os_waits"], "Found a duplicate in the metrics slice: mysql.innodb.s_lock_os_waits")
					validatedMetrics["mysql.innodb.s_lock_os_waits"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which OS waits for shared locks occur.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.s_lock_spin_rounds":
					assert.False(t, validatedMetrics["mysql.innodb.s_lock_spin_rounds"], "Found a duplicate in the metrics slice: mysql.innodb.s_lock_spin_rounds")
					validatedMetrics["mysql.innodb.s_lock_spin_rounds"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which spin rounds for shared locks occur.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.s_lock_spin_waits":
					assert.False(t, validatedMetrics["mysql.innodb.s_lock_spin_waits"], "Found a duplicate in the metrics slice: mysql.innodb.s_lock_spin_waits")
					validatedMetrics["mysql.innodb.s_lock_spin_waits"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which spin waits for shared locks occur.", ms.At(i).Description())
					assert.Equal(t, "{wait}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.semaphore_wait_time":
					assert.False(t, validatedMetrics["mysql.innodb.semaphore_wait_time"], "Found a duplicate in the metrics slice: mysql.innodb.semaphore_wait_time")
					validatedMetrics["mysql.innodb.semaphore_wait_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total wait time for semaphores.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.semaphore_waits":
					assert.False(t, validatedMetrics["mysql.innodb.semaphore_waits"], "Found a duplicate in the metrics slice: mysql.innodb.semaphore_waits")
					validatedMetrics["mysql.innodb.semaphore_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of semaphore waits.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.tables_in_use":
					assert.False(t, validatedMetrics["mysql.innodb.tables_in_use"], "Found a duplicate in the metrics slice: mysql.innodb.tables_in_use")
					validatedMetrics["mysql.innodb.tables_in_use"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of tables currently in use by InnoDB.", ms.At(i).Description())
					assert.Equal(t, "{operation}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.x_lock_os_waits":
					assert.False(t, validatedMetrics["mysql.innodb.x_lock_os_waits"], "Found a duplicate in the metrics slice: mysql.innodb.x_lock_os_waits")
					validatedMetrics["mysql.innodb.x_lock_os_waits"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which OS waits for exclusive locks occur.", ms.At(i).Description())
					assert.Equal(t, "{wait}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.x_lock_spin_rounds":
					assert.False(t, validatedMetrics["mysql.innodb.x_lock_spin_rounds"], "Found a duplicate in the metrics slice: mysql.innodb.x_lock_spin_rounds")
					validatedMetrics["mysql.innodb.x_lock_spin_rounds"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which spin rounds for exclusive locks occur.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.x_lock_spin_waits":
					assert.False(t, validatedMetrics["mysql.innodb.x_lock_spin_waits"], "Found a duplicate in the metrics slice: mysql.innodb.x_lock_spin_waits")
					validatedMetrics["mysql.innodb.x_lock_spin_waits"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Rate at which spin waits for exclusive locks occur.", ms.At(i).Description())
					assert.Equal(t, "{wait}/s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.joins":
					assert.False(t, validatedMetrics["mysql.joins"], "Found a duplicate in the metrics slice: mysql.joins")
					validatedMetrics["mysql.joins"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of joins that perform table scans.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("kind")
					assert.True(t, ok)
					assert.EqualValues(t, "full", attrVal.Str())
				case "mysql.locks":
					assert.False(t, validatedMetrics["mysql.locks"], "Found a duplicate in the metrics slice: mysql.locks")
					validatedMetrics["mysql.locks"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of MySQL locks.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("kind")
					assert.True(t, ok)
					assert.EqualValues(t, "immediate", attrVal.Str())
				case "mysql.log_operations":
					assert.False(t, validatedMetrics["mysql.log_operations"], "Found a duplicate in the metrics slice: mysql.log_operations")
					validatedMetrics["mysql.log_operations"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of InnoDB log operations.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("operation")
					assert.True(t, ok)
					assert.EqualValues(t, "waits", attrVal.Str())
				case "mysql.mysqlx_connections":
					assert.False(t, validatedMetrics["mysql.mysqlx_connections"], "Found a duplicate in the metrics slice: mysql.mysqlx_connections")
					validatedMetrics["mysql.mysqlx_connections"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of mysqlx connections.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("status")
					assert.True(t, ok)
					assert.EqualValues(t, "accepted", attrVal.Str())
				case "mysql.mysqlx_worker_threads":
					assert.False(t, validatedMetrics["mysql.mysqlx_worker_threads"], "Found a duplicate in the metrics slice: mysql.mysqlx_worker_threads")
					validatedMetrics["mysql.mysqlx_worker_threads"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of worker threads available.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("kind")
					assert.True(t, ok)
					assert.EqualValues(t, "available", attrVal.Str())
				case "mysql.opened_resources":
					assert.False(t, validatedMetrics["mysql.opened_resources"], "Found a duplicate in the metrics slice: mysql.opened_resources")
					validatedMetrics["mysql.opened_resources"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of opened resources.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("kind")
					assert.True(t, ok)
					assert.EqualValues(t, "file", attrVal.Str())
				case "mysql.operations":
					assert.False(t, validatedMetrics["mysql.operations"], "Found a duplicate in the metrics slice: mysql.operations")
					validatedMetrics["mysql.operations"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of InnoDB operations.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("operation")
					assert.True(t, ok)
					assert.EqualValues(t, "fsyncs", attrVal.Str())
				case "mysql.page_operations":
					assert.False(t, validatedMetrics["mysql.page_operations"], "Found a duplicate in the metrics slice: mysql.page_operations")
					validatedMetrics["mysql.page_operations"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of InnoDB page operations.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("operation")
					assert.True(t, ok)
					assert.EqualValues(t, "created", attrVal.Str())
				case "mysql.prepared_statements":
					assert.False(t, validatedMetrics["mysql.prepared_statements"], "Found a duplicate in the metrics slice: mysql.prepared_statements")
					validatedMetrics["mysql.prepared_statements"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of times each type of prepared statement command has been issued.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("command")
					assert.True(t, ok)
					assert.EqualValues(t, "execute", attrVal.Str())
				case "mysql.query.client.count":
					assert.False(t, validatedMetrics["mysql.query.client.count"], "Found a duplicate in the metrics slice: mysql.query.client.count")
					validatedMetrics["mysql.query.client.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of statements executed by the server. This includes only statements sent to the server by clients.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.query.count":
					assert.False(t, validatedMetrics["mysql.query.count"], "Found a duplicate in the metrics slice: mysql.query.count")
					validatedMetrics["mysql.query.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of statements executed by the server.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.query.slow.count":
					assert.False(t, validatedMetrics["mysql.query.slow.count"], "Found a duplicate in the metrics slice: mysql.query.slow.count")
					validatedMetrics["mysql.query.slow.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of slow queries.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.replica.sql_delay":
					assert.False(t, validatedMetrics["mysql.replica.sql_delay"], "Found a duplicate in the metrics slice: mysql.replica.sql_delay")
					validatedMetrics["mysql.replica.sql_delay"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of seconds that the replica must lag the source.", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.replica.time_behind_source":
					assert.False(t, validatedMetrics["mysql.replica.time_behind_source"], "Found a duplicate in the metrics slice: mysql.replica.time_behind_source")
					validatedMetrics["mysql.replica.time_behind_source"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "This field is an indication of how “late” the replica is.", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.row_locks":
					assert.False(t, validatedMetrics["mysql.row_locks"], "Found a duplicate in the metrics slice: mysql.row_locks")
					validatedMetrics["mysql.row_locks"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of InnoDB row locks.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("kind")
					assert.True(t, ok)
					assert.EqualValues(t, "waits", attrVal.Str())
				case "mysql.row_operations":
					assert.False(t, validatedMetrics["mysql.row_operations"], "Found a duplicate in the metrics slice: mysql.row_operations")
					validatedMetrics["mysql.row_operations"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of InnoDB row operations.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("operation")
					assert.True(t, ok)
					assert.EqualValues(t, "deleted", attrVal.Str())
				case "mysql.sorts":
					assert.False(t, validatedMetrics["mysql.sorts"], "Found a duplicate in the metrics slice: mysql.sorts")
					validatedMetrics["mysql.sorts"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of MySQL sorts.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("kind")
					assert.True(t, ok)
					assert.EqualValues(t, "merge_passes", attrVal.Str())
				case "mysql.statement_event.count":
					assert.False(t, validatedMetrics["mysql.statement_event.count"], "Found a duplicate in the metrics slice: mysql.statement_event.count")
					validatedMetrics["mysql.statement_event.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Summary of current and recent statement events.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("schema")
					assert.True(t, ok)
					assert.EqualValues(t, "schema-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("digest")
					assert.True(t, ok)
					assert.EqualValues(t, "digest-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("digest_text")
					assert.True(t, ok)
					assert.EqualValues(t, "digest_text-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("kind")
					assert.True(t, ok)
					assert.EqualValues(t, "errors", attrVal.Str())
				case "mysql.statement_event.wait.time":
					assert.False(t, validatedMetrics["mysql.statement_event.wait.time"], "Found a duplicate in the metrics slice: mysql.statement_event.wait.time")
					validatedMetrics["mysql.statement_event.wait.time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total wait time of the summarized timed events.", ms.At(i).Description())
					assert.Equal(t, "ns", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("schema")
					assert.True(t, ok)
					assert.EqualValues(t, "schema-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("digest")
					assert.True(t, ok)
					assert.EqualValues(t, "digest-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("digest_text")
					assert.True(t, ok)
					assert.EqualValues(t, "digest_text-val", attrVal.Str())
				case "mysql.table.io.wait.count":
					assert.False(t, validatedMetrics["mysql.table.io.wait.count"], "Found a duplicate in the metrics slice: mysql.table.io.wait.count")
					validatedMetrics["mysql.table.io.wait.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total count of I/O wait events for a table.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("operation")
					assert.True(t, ok)
					assert.EqualValues(t, "delete", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("table")
					assert.True(t, ok)
					assert.EqualValues(t, "table_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("schema")
					assert.True(t, ok)
					assert.EqualValues(t, "schema-val", attrVal.Str())
				case "mysql.table.io.wait.time":
					assert.False(t, validatedMetrics["mysql.table.io.wait.time"], "Found a duplicate in the metrics slice: mysql.table.io.wait.time")
					validatedMetrics["mysql.table.io.wait.time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total time of I/O wait events for a table.", ms.At(i).Description())
					assert.Equal(t, "ns", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("operation")
					assert.True(t, ok)
					assert.EqualValues(t, "delete", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("table")
					assert.True(t, ok)
					assert.EqualValues(t, "table_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("schema")
					assert.True(t, ok)
					assert.EqualValues(t, "schema-val", attrVal.Str())
				case "mysql.table.lock_wait.read.count":
					assert.False(t, validatedMetrics["mysql.table.lock_wait.read.count"], "Found a duplicate in the metrics slice: mysql.table.lock_wait.read.count")
					validatedMetrics["mysql.table.lock_wait.read.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total table lock wait read events.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("schema")
					assert.True(t, ok)
					assert.EqualValues(t, "schema-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("table")
					assert.True(t, ok)
					assert.EqualValues(t, "table_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("kind")
					assert.True(t, ok)
					assert.EqualValues(t, "normal", attrVal.Str())
				case "mysql.table.lock_wait.read.time":
					assert.False(t, validatedMetrics["mysql.table.lock_wait.read.time"], "Found a duplicate in the metrics slice: mysql.table.lock_wait.read.time")
					validatedMetrics["mysql.table.lock_wait.read.time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total table lock wait read events times.", ms.At(i).Description())
					assert.Equal(t, "ns", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("schema")
					assert.True(t, ok)
					assert.EqualValues(t, "schema-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("table")
					assert.True(t, ok)
					assert.EqualValues(t, "table_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("kind")
					assert.True(t, ok)
					assert.EqualValues(t, "normal", attrVal.Str())
				case "mysql.table.lock_wait.write.count":
					assert.False(t, validatedMetrics["mysql.table.lock_wait.write.count"], "Found a duplicate in the metrics slice: mysql.table.lock_wait.write.count")
					validatedMetrics["mysql.table.lock_wait.write.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total table lock wait write events.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("schema")
					assert.True(t, ok)
					assert.EqualValues(t, "schema-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("table")
					assert.True(t, ok)
					assert.EqualValues(t, "table_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("kind")
					assert.True(t, ok)
					assert.EqualValues(t, "allow_write", attrVal.Str())
				case "mysql.table.lock_wait.write.time":
					assert.False(t, validatedMetrics["mysql.table.lock_wait.write.time"], "Found a duplicate in the metrics slice: mysql.table.lock_wait.write.time")
					validatedMetrics["mysql.table.lock_wait.write.time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The total table lock wait write events times.", ms.At(i).Description())
					assert.Equal(t, "ns", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("schema")
					assert.True(t, ok)
					assert.EqualValues(t, "schema-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("table")
					assert.True(t, ok)
					assert.EqualValues(t, "table_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("kind")
					assert.True(t, ok)
					assert.EqualValues(t, "allow_write", attrVal.Str())
				case "mysql.table_open_cache":
					assert.False(t, validatedMetrics["mysql.table_open_cache"], "Found a duplicate in the metrics slice: mysql.table_open_cache")
					validatedMetrics["mysql.table_open_cache"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of hits, misses or overflows for open tables cache lookups.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("status")
					assert.True(t, ok)
					assert.EqualValues(t, "hit", attrVal.Str())
				case "mysql.threads":
					assert.False(t, validatedMetrics["mysql.threads"], "Found a duplicate in the metrics slice: mysql.threads")
					validatedMetrics["mysql.threads"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The state of MySQL threads.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("kind")
					assert.True(t, ok)
					assert.EqualValues(t, "cached", attrVal.Str())
				case "mysql.tmp_resources":
					assert.False(t, validatedMetrics["mysql.tmp_resources"], "Found a duplicate in the metrics slice: mysql.tmp_resources")
					validatedMetrics["mysql.tmp_resources"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of created temporary resources.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("resource")
					assert.True(t, ok)
					assert.EqualValues(t, "disk_tables", attrVal.Str())
				case "mysql.uptime":
					assert.False(t, validatedMetrics["mysql.uptime"], "Found a duplicate in the metrics slice: mysql.uptime")
					validatedMetrics["mysql.uptime"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of seconds that the server has been up.", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				}
			}
		})
	}
}
