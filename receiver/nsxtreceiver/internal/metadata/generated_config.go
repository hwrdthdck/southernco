// Code generated by mdatagen. DO NOT EDIT.

package metadata

import "go.opentelemetry.io/collector/confmap"

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricSettings) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms, confmap.WithErrorUnused())
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsSettings provides settings for nsxtreceiver metrics.
type MetricsSettings struct {
	NsxtNodeCPUUtilization        MetricSettings `mapstructure:"nsxt.node.cpu.utilization"`
	NsxtNodeFilesystemUsage       MetricSettings `mapstructure:"nsxt.node.filesystem.usage"`
	NsxtNodeFilesystemUtilization MetricSettings `mapstructure:"nsxt.node.filesystem.utilization"`
	NsxtNodeMemoryCacheUsage      MetricSettings `mapstructure:"nsxt.node.memory.cache.usage"`
	NsxtNodeMemoryUsage           MetricSettings `mapstructure:"nsxt.node.memory.usage"`
	NsxtNodeNetworkIo             MetricSettings `mapstructure:"nsxt.node.network.io"`
	NsxtNodeNetworkPacketCount    MetricSettings `mapstructure:"nsxt.node.network.packet.count"`
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		NsxtNodeCPUUtilization: MetricSettings{
			Enabled: true,
		},
		NsxtNodeFilesystemUsage: MetricSettings{
			Enabled: true,
		},
		NsxtNodeFilesystemUtilization: MetricSettings{
			Enabled: true,
		},
		NsxtNodeMemoryCacheUsage: MetricSettings{
			Enabled: true,
		},
		NsxtNodeMemoryUsage: MetricSettings{
			Enabled: true,
		},
		NsxtNodeNetworkIo: MetricSettings{
			Enabled: true,
		},
		NsxtNodeNetworkPacketCount: MetricSettings{
			Enabled: true,
		},
	}
}

// ResourceAttributeSettings provides common settings for a particular resource attribute.
type ResourceAttributeSettings struct {
	Enabled bool `mapstructure:"enabled"`
}

// ResourceAttributesSettings provides settings for nsxtreceiver resource attributes.
type ResourceAttributesSettings struct {
	DeviceID     ResourceAttributeSettings `mapstructure:"device.id"`
	NsxtNodeID   ResourceAttributeSettings `mapstructure:"nsxt.node.id"`
	NsxtNodeName ResourceAttributeSettings `mapstructure:"nsxt.node.name"`
	NsxtNodeType ResourceAttributeSettings `mapstructure:"nsxt.node.type"`
}

func DefaultResourceAttributesSettings() ResourceAttributesSettings {
	return ResourceAttributesSettings{
		DeviceID: ResourceAttributeSettings{
			Enabled: true,
		},
		NsxtNodeID: ResourceAttributeSettings{
			Enabled: true,
		},
		NsxtNodeName: ResourceAttributeSettings{
			Enabled: true,
		},
		NsxtNodeType: ResourceAttributeSettings{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for nsxtreceiver metrics builder.
type MetricsBuilderConfig struct {
	Metrics            MetricsSettings            `mapstructure:"metrics"`
	ResourceAttributes ResourceAttributesSettings `mapstructure:"resource_attributes"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics:            DefaultMetricsSettings(),
		ResourceAttributes: DefaultResourceAttributesSettings(),
	}
}
