// Code generated by mdatagen. DO NOT EDIT.

package metadata

import "go.opentelemetry.io/collector/confmap"

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricSettings) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms, confmap.WithErrorUnused())
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsSettings provides settings for zookeeperreceiver metrics.
type MetricsSettings struct {
	ZookeeperConnectionActive            MetricSettings `mapstructure:"zookeeper.connection.active"`
	ZookeeperDataTreeEphemeralNodeCount  MetricSettings `mapstructure:"zookeeper.data_tree.ephemeral_node.count"`
	ZookeeperDataTreeSize                MetricSettings `mapstructure:"zookeeper.data_tree.size"`
	ZookeeperFileDescriptorLimit         MetricSettings `mapstructure:"zookeeper.file_descriptor.limit"`
	ZookeeperFileDescriptorOpen          MetricSettings `mapstructure:"zookeeper.file_descriptor.open"`
	ZookeeperFollowerCount               MetricSettings `mapstructure:"zookeeper.follower.count"`
	ZookeeperFsyncExceededThresholdCount MetricSettings `mapstructure:"zookeeper.fsync.exceeded_threshold.count"`
	ZookeeperLatencyAvg                  MetricSettings `mapstructure:"zookeeper.latency.avg"`
	ZookeeperLatencyMax                  MetricSettings `mapstructure:"zookeeper.latency.max"`
	ZookeeperLatencyMin                  MetricSettings `mapstructure:"zookeeper.latency.min"`
	ZookeeperPacketCount                 MetricSettings `mapstructure:"zookeeper.packet.count"`
	ZookeeperRequestActive               MetricSettings `mapstructure:"zookeeper.request.active"`
	ZookeeperSyncPending                 MetricSettings `mapstructure:"zookeeper.sync.pending"`
	ZookeeperWatchCount                  MetricSettings `mapstructure:"zookeeper.watch.count"`
	ZookeeperZnodeCount                  MetricSettings `mapstructure:"zookeeper.znode.count"`
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		ZookeeperConnectionActive: MetricSettings{
			Enabled: true,
		},
		ZookeeperDataTreeEphemeralNodeCount: MetricSettings{
			Enabled: true,
		},
		ZookeeperDataTreeSize: MetricSettings{
			Enabled: true,
		},
		ZookeeperFileDescriptorLimit: MetricSettings{
			Enabled: true,
		},
		ZookeeperFileDescriptorOpen: MetricSettings{
			Enabled: true,
		},
		ZookeeperFollowerCount: MetricSettings{
			Enabled: true,
		},
		ZookeeperFsyncExceededThresholdCount: MetricSettings{
			Enabled: true,
		},
		ZookeeperLatencyAvg: MetricSettings{
			Enabled: true,
		},
		ZookeeperLatencyMax: MetricSettings{
			Enabled: true,
		},
		ZookeeperLatencyMin: MetricSettings{
			Enabled: true,
		},
		ZookeeperPacketCount: MetricSettings{
			Enabled: true,
		},
		ZookeeperRequestActive: MetricSettings{
			Enabled: true,
		},
		ZookeeperSyncPending: MetricSettings{
			Enabled: true,
		},
		ZookeeperWatchCount: MetricSettings{
			Enabled: true,
		},
		ZookeeperZnodeCount: MetricSettings{
			Enabled: true,
		},
	}
}

// ResourceAttributeSettings provides common settings for a particular resource attribute.
type ResourceAttributeSettings struct {
	Enabled bool `mapstructure:"enabled"`
}

// ResourceAttributesSettings provides settings for zookeeperreceiver resource attributes.
type ResourceAttributesSettings struct {
	ServerState ResourceAttributeSettings `mapstructure:"server.state"`
	ZkVersion   ResourceAttributeSettings `mapstructure:"zk.version"`
}

func DefaultResourceAttributesSettings() ResourceAttributesSettings {
	return ResourceAttributesSettings{
		ServerState: ResourceAttributeSettings{
			Enabled: true,
		},
		ZkVersion: ResourceAttributeSettings{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for zookeeperreceiver metrics builder.
type MetricsBuilderConfig struct {
	Metrics            MetricsSettings            `mapstructure:"metrics"`
	ResourceAttributes ResourceAttributesSettings `mapstructure:"resource_attributes"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics:            DefaultMetricsSettings(),
		ResourceAttributes: DefaultResourceAttributesSettings(),
	}
}
