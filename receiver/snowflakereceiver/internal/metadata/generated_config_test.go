// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"path/filepath"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/confmap/confmaptest"
)

func TestResourceAttributesConfig(t *testing.T) {
	tests := []struct {
		name string
		want ResourceAttributesSettings
	}{
		{
			name: "default",
			want: DefaultResourceAttributesSettings(),
		},
		{
			name: "all_set",
			want: ResourceAttributesSettings{
				SnowflakeAccountName: ResourceAttributeSettings{Enabled: true},
			},
		},
		{
			name: "none_set",
			want: ResourceAttributesSettings{
				SnowflakeAccountName: ResourceAttributeSettings{Enabled: false},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadResourceAttributesSettings(t, tt.name)
			if diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(ResourceAttributeSettings{})); diff != "" {
				t.Errorf("Config mismatch (-expected +actual):\n%s", diff)
			}
		})
	}
}

func TestMetricsBuilderConfig(t *testing.T) {
	tests := []struct {
		name string
		want MetricsBuilderConfig
	}{
		{
			name: "default",
			want: DefaultMetricsBuilderConfig(),
		},
		{
			name: "all_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsSettings{
					SnowflakeBillingCloudServiceTotal:              MetricSettings{Enabled: true},
					SnowflakeBillingTotalCreditTotal:               MetricSettings{Enabled: true},
					SnowflakeBillingVirtualWarehouseTotal:          MetricSettings{Enabled: true},
					SnowflakeBillingWarehouseCloudServiceTotal:     MetricSettings{Enabled: true},
					SnowflakeBillingWarehouseTotalCreditTotal:      MetricSettings{Enabled: true},
					SnowflakeBillingWarehouseVirtualWarehouseTotal: MetricSettings{Enabled: true},
					SnowflakeDatabaseBytesScannedAvg:               MetricSettings{Enabled: true},
					SnowflakeDatabaseQueryCount:                    MetricSettings{Enabled: true},
					SnowflakeLoginsTotal:                           MetricSettings{Enabled: true},
					SnowflakePipeCreditsUsedTotal:                  MetricSettings{Enabled: true},
					SnowflakeQueryBlocked:                          MetricSettings{Enabled: true},
					SnowflakeQueryBytesDeletedAvg:                  MetricSettings{Enabled: true},
					SnowflakeQueryBytesSpilledLocalAvg:             MetricSettings{Enabled: true},
					SnowflakeQueryBytesSpilledRemoteAvg:            MetricSettings{Enabled: true},
					SnowflakeQueryBytesWrittenAvg:                  MetricSettings{Enabled: true},
					SnowflakeQueryCompilationTimeAvg:               MetricSettings{Enabled: true},
					SnowflakeQueryDataScannedCacheAvg:              MetricSettings{Enabled: true},
					SnowflakeQueryExecuted:                         MetricSettings{Enabled: true},
					SnowflakeQueryExecutionTimeAvg:                 MetricSettings{Enabled: true},
					SnowflakeQueryPartitionsScannedAvg:             MetricSettings{Enabled: true},
					SnowflakeQueryQueuedOverload:                   MetricSettings{Enabled: true},
					SnowflakeQueryQueuedProvision:                  MetricSettings{Enabled: true},
					SnowflakeQueuedOverloadTimeAvg:                 MetricSettings{Enabled: true},
					SnowflakeQueuedProvisioningTimeAvg:             MetricSettings{Enabled: true},
					SnowflakeQueuedRepairTimeAvg:                   MetricSettings{Enabled: true},
					SnowflakeRowsDeletedAvg:                        MetricSettings{Enabled: true},
					SnowflakeRowsInsertedAvg:                       MetricSettings{Enabled: true},
					SnowflakeRowsProducedAvg:                       MetricSettings{Enabled: true},
					SnowflakeRowsUnloadedAvg:                       MetricSettings{Enabled: true},
					SnowflakeRowsUpdatedAvg:                        MetricSettings{Enabled: true},
					SnowflakeSessionIDCount:                        MetricSettings{Enabled: true},
					SnowflakeStorageFailsafeBytesTotal:             MetricSettings{Enabled: true},
					SnowflakeStorageStageBytesTotal:                MetricSettings{Enabled: true},
					SnowflakeStorageStorageBytesTotal:              MetricSettings{Enabled: true},
					SnowflakeTotalElapsedTimeAvg:                   MetricSettings{Enabled: true},
				},
				ResourceAttributes: ResourceAttributesSettings{
					SnowflakeAccountName: ResourceAttributeSettings{Enabled: true},
				},
			},
		},
		{
			name: "none_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsSettings{
					SnowflakeBillingCloudServiceTotal:              MetricSettings{Enabled: false},
					SnowflakeBillingTotalCreditTotal:               MetricSettings{Enabled: false},
					SnowflakeBillingVirtualWarehouseTotal:          MetricSettings{Enabled: false},
					SnowflakeBillingWarehouseCloudServiceTotal:     MetricSettings{Enabled: false},
					SnowflakeBillingWarehouseTotalCreditTotal:      MetricSettings{Enabled: false},
					SnowflakeBillingWarehouseVirtualWarehouseTotal: MetricSettings{Enabled: false},
					SnowflakeDatabaseBytesScannedAvg:               MetricSettings{Enabled: false},
					SnowflakeDatabaseQueryCount:                    MetricSettings{Enabled: false},
					SnowflakeLoginsTotal:                           MetricSettings{Enabled: false},
					SnowflakePipeCreditsUsedTotal:                  MetricSettings{Enabled: false},
					SnowflakeQueryBlocked:                          MetricSettings{Enabled: false},
					SnowflakeQueryBytesDeletedAvg:                  MetricSettings{Enabled: false},
					SnowflakeQueryBytesSpilledLocalAvg:             MetricSettings{Enabled: false},
					SnowflakeQueryBytesSpilledRemoteAvg:            MetricSettings{Enabled: false},
					SnowflakeQueryBytesWrittenAvg:                  MetricSettings{Enabled: false},
					SnowflakeQueryCompilationTimeAvg:               MetricSettings{Enabled: false},
					SnowflakeQueryDataScannedCacheAvg:              MetricSettings{Enabled: false},
					SnowflakeQueryExecuted:                         MetricSettings{Enabled: false},
					SnowflakeQueryExecutionTimeAvg:                 MetricSettings{Enabled: false},
					SnowflakeQueryPartitionsScannedAvg:             MetricSettings{Enabled: false},
					SnowflakeQueryQueuedOverload:                   MetricSettings{Enabled: false},
					SnowflakeQueryQueuedProvision:                  MetricSettings{Enabled: false},
					SnowflakeQueuedOverloadTimeAvg:                 MetricSettings{Enabled: false},
					SnowflakeQueuedProvisioningTimeAvg:             MetricSettings{Enabled: false},
					SnowflakeQueuedRepairTimeAvg:                   MetricSettings{Enabled: false},
					SnowflakeRowsDeletedAvg:                        MetricSettings{Enabled: false},
					SnowflakeRowsInsertedAvg:                       MetricSettings{Enabled: false},
					SnowflakeRowsProducedAvg:                       MetricSettings{Enabled: false},
					SnowflakeRowsUnloadedAvg:                       MetricSettings{Enabled: false},
					SnowflakeRowsUpdatedAvg:                        MetricSettings{Enabled: false},
					SnowflakeSessionIDCount:                        MetricSettings{Enabled: false},
					SnowflakeStorageFailsafeBytesTotal:             MetricSettings{Enabled: false},
					SnowflakeStorageStageBytesTotal:                MetricSettings{Enabled: false},
					SnowflakeStorageStorageBytesTotal:              MetricSettings{Enabled: false},
					SnowflakeTotalElapsedTimeAvg:                   MetricSettings{Enabled: false},
				},
				ResourceAttributes: ResourceAttributesSettings{
					SnowflakeAccountName: ResourceAttributeSettings{Enabled: false},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadMetricsBuilderConfig(t, tt.name)
			if diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(MetricSettings{}, ResourceAttributeSettings{})); diff != "" {
				t.Errorf("Config mismatch (-expected +actual):\n%s", diff)
			}
		})
	}
}

func loadResourceAttributesSettings(t *testing.T, name string) ResourceAttributesSettings {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	sub, err = sub.Sub("resource_attributes")
	require.NoError(t, err)
	cfg := DefaultResourceAttributesSettings()
	require.NoError(t, component.UnmarshalConfig(sub, &cfg))
	return cfg
}

func loadMetricsBuilderConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, component.UnmarshalConfig(sub, &cfg))
	return cfg
}
