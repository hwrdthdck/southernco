// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testConfigCollection int

const (
	testSetDefault testConfigCollection = iota
	testSetAll
	testSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name      string
		configSet testConfigCollection
	}{
		{
			name:      "default",
			configSet: testSetDefault,
		},
		{
			name:      "all_set",
			configSet: testSetAll,
		},
		{
			name:      "none_set",
			configSet: testSetNone,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopCreateSettings()
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, test.name), settings, WithStartTime(start))

			expectedWarnings := 0
			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverBlockManagerDiskSpaceUsedDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverBlockManagerMemoryRemainingDataPoint(ts, 1, AttributeLocation(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverBlockManagerMemoryUsedDataPoint(ts, 1, AttributeLocation(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverCodeGeneratorCompilationAverageTimeDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverCodeGeneratorCompilationCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverCodeGeneratorGeneratedClassAverageSizeDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverCodeGeneratorGeneratedClassCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverCodeGeneratorGeneratedMethodAverageSizeDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverCodeGeneratorGeneratedMethodCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverCodeGeneratorSourceCodeAverageSizeDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverCodeGeneratorSourceCodeCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverDagSchedulerJobsActiveDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverDagSchedulerJobsAllDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverDagSchedulerStagesFailedDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverDagSchedulerStagesRunningDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverDagSchedulerStagesWaitingDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverExecutorMetricsGcCountDataPoint(ts, 1, AttributeGcType(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverExecutorMetricsGcTimeDataPoint(ts, 1, AttributeGcType(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverExecutorMetricsJvmMemoryDataPoint(ts, 1, AttributeLocation(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverExecutorMetricsMemoryExecutionDataPoint(ts, 1, AttributeLocation(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverExecutorMetricsMemoryPoolDataPoint(ts, 1, AttributePoolMemoryType(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverExecutorMetricsMemoryStorageDataPoint(ts, 1, AttributeLocation(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverHiveExternalCatalogFileCacheHitsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverHiveExternalCatalogFilesDiscoveredDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverHiveExternalCatalogHiveClientCallsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverHiveExternalCatalogParallelListingJobsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverHiveExternalCatalogPartitionsFetchedDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverJvmCPUTimeDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverLiveListenerBusEventsDroppedDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverLiveListenerBusEventsPostedDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverLiveListenerBusListenerProcessingTimeAverageDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkDriverLiveListenerBusQueueSizeDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkExecutorDiskUsedDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkExecutorDurationDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkExecutorGcTimeDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkExecutorInputSizeDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkExecutorMemoryUsedDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkExecutorShuffleIoSizeDataPoint(ts, 1, AttributeDirection(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkExecutorStorageMemoryTotalDataPoint(ts, 1, AttributeLocation(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkExecutorStorageMemoryUsedDataPoint(ts, 1, AttributeLocation(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkExecutorTasksActiveDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkExecutorTasksMaxDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkExecutorTasksResultsDataPoint(ts, 1, AttributeExecutorTaskResult(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkJobStagesActiveDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkJobStagesResultsDataPoint(ts, 1, AttributeJobStageResult(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkJobTasksActiveDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkJobTasksResultsDataPoint(ts, 1, AttributeJobTaskResult(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkStageDiskSpaceSpilledDataPoint(ts, 1, 1, true, true, true, true)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkStageExecutorCPUTimeDataPoint(ts, 1, 1, true, true, true, true)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkStageExecutorRunTimeDataPoint(ts, 1, 1, true, true, true, true)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkStageIoRecordsDataPoint(ts, 1, 1, true, true, true, true, AttributeDirection(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkStageIoSizeDataPoint(ts, 1, 1, true, true, true, true, AttributeDirection(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkStageJvmGcTimeDataPoint(ts, 1, 1, true, true, true, true)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkStageMemorySpilledDataPoint(ts, 1, 1, true, true, true, true)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkStagePeakExecutionMemoryDataPoint(ts, 1, 1, true, true, true, true)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkStageShuffleBlocksFetchedDataPoint(ts, 1, 1, true, true, true, true, AttributeSource(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkStageShuffleFetchWaitTimeDataPoint(ts, 1, 1, true, true, true, true)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkStageShuffleIoRecordsDataPoint(ts, 1, 1, true, true, true, true, AttributeDirection(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkStageShuffleIoSizeDataPoint(ts, 1, 1, true, true, true, true, AttributeSource(1), AttributeDirection(1))

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkStageShuffleRemoteDataReadToDiskDataPoint(ts, 1, 1, true, true, true, true)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkStageShuffleWriteTimeDataPoint(ts, 1, 1, true, true, true, true)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkStageTaskActiveDataPoint(ts, 1, 1, true, true, true, true)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkStageTaskResultSizeDataPoint(ts, 1, 1, true, true, true, true)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSparkStageTaskResultsDataPoint(ts, 1, 1, true, true, true, true, AttributeStageTaskResult(1))

			metrics := mb.Emit(WithSparkApplicationID("attr-val"), WithSparkApplicationName("attr-val"), WithSparkExecutorID("attr-val"), WithSparkJobID(1), WithSparkStageID(1))

			if test.configSet == testSetNone {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			attrCount := 0
			enabledAttrCount := 0
			attrVal, ok := rm.Resource().Attributes().Get("spark.application.id")
			attrCount++
			assert.Equal(t, mb.resourceAttributesConfig.SparkApplicationID.Enabled, ok)
			if mb.resourceAttributesConfig.SparkApplicationID.Enabled {
				enabledAttrCount++
				assert.EqualValues(t, "attr-val", attrVal.Str())
			}
			attrVal, ok = rm.Resource().Attributes().Get("spark.application.name")
			attrCount++
			assert.Equal(t, mb.resourceAttributesConfig.SparkApplicationName.Enabled, ok)
			if mb.resourceAttributesConfig.SparkApplicationName.Enabled {
				enabledAttrCount++
				assert.EqualValues(t, "attr-val", attrVal.Str())
			}
			attrVal, ok = rm.Resource().Attributes().Get("spark.executor.id")
			attrCount++
			assert.Equal(t, mb.resourceAttributesConfig.SparkExecutorID.Enabled, ok)
			if mb.resourceAttributesConfig.SparkExecutorID.Enabled {
				enabledAttrCount++
				assert.EqualValues(t, "attr-val", attrVal.Str())
			}
			attrVal, ok = rm.Resource().Attributes().Get("spark.job.id")
			attrCount++
			assert.Equal(t, mb.resourceAttributesConfig.SparkJobID.Enabled, ok)
			if mb.resourceAttributesConfig.SparkJobID.Enabled {
				enabledAttrCount++
				assert.EqualValues(t, 1, attrVal.Int())
			}
			attrVal, ok = rm.Resource().Attributes().Get("spark.stage.id")
			attrCount++
			assert.Equal(t, mb.resourceAttributesConfig.SparkStageID.Enabled, ok)
			if mb.resourceAttributesConfig.SparkStageID.Enabled {
				enabledAttrCount++
				assert.EqualValues(t, 1, attrVal.Int())
			}
			assert.Equal(t, enabledAttrCount, rm.Resource().Attributes().Len())
			assert.Equal(t, attrCount, 5)

			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if test.configSet == testSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if test.configSet == testSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "spark.driver.block_manager.disk.space_used":
					assert.False(t, validatedMetrics["spark.driver.block_manager.disk.space_used"], "Found a duplicate in the metrics slice: spark.driver.block_manager.disk.space_used")
					validatedMetrics["spark.driver.block_manager.disk.space_used"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Disk space used by the BlockManager.", ms.At(i).Description())
					assert.Equal(t, "mb", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.driver.block_manager.memory.remaining":
					assert.False(t, validatedMetrics["spark.driver.block_manager.memory.remaining"], "Found a duplicate in the metrics slice: spark.driver.block_manager.memory.remaining")
					validatedMetrics["spark.driver.block_manager.memory.remaining"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Memory remaining for the BlockManager.", ms.At(i).Description())
					assert.Equal(t, "mb", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("location")
					assert.True(t, ok)
					assert.Equal(t, "on_heap", attrVal.Str())
				case "spark.driver.block_manager.memory.used":
					assert.False(t, validatedMetrics["spark.driver.block_manager.memory.used"], "Found a duplicate in the metrics slice: spark.driver.block_manager.memory.used")
					validatedMetrics["spark.driver.block_manager.memory.used"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Memory used by the BlockManager.", ms.At(i).Description())
					assert.Equal(t, "mb", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("location")
					assert.True(t, ok)
					assert.Equal(t, "on_heap", attrVal.Str())
				case "spark.driver.code_generator.compilation.average_time":
					assert.False(t, validatedMetrics["spark.driver.code_generator.compilation.average_time"], "Found a duplicate in the metrics slice: spark.driver.code_generator.compilation.average_time")
					validatedMetrics["spark.driver.code_generator.compilation.average_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average time spent during CodeGenerator source code compilation operations.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
				case "spark.driver.code_generator.compilation.count":
					assert.False(t, validatedMetrics["spark.driver.code_generator.compilation.count"], "Found a duplicate in the metrics slice: spark.driver.code_generator.compilation.count")
					validatedMetrics["spark.driver.code_generator.compilation.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of source code compilation operations performed by the CodeGenerator.", ms.At(i).Description())
					assert.Equal(t, "{ compilations }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.driver.code_generator.generated_class.average_size":
					assert.False(t, validatedMetrics["spark.driver.code_generator.generated_class.average_size"], "Found a duplicate in the metrics slice: spark.driver.code_generator.generated_class.average_size")
					validatedMetrics["spark.driver.code_generator.generated_class.average_size"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average class size of the classes generated by the CodeGenerator.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
				case "spark.driver.code_generator.generated_class.count":
					assert.False(t, validatedMetrics["spark.driver.code_generator.generated_class.count"], "Found a duplicate in the metrics slice: spark.driver.code_generator.generated_class.count")
					validatedMetrics["spark.driver.code_generator.generated_class.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of classes generated by the CodeGenerator.", ms.At(i).Description())
					assert.Equal(t, "{ classes }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.driver.code_generator.generated_method.average_size":
					assert.False(t, validatedMetrics["spark.driver.code_generator.generated_method.average_size"], "Found a duplicate in the metrics slice: spark.driver.code_generator.generated_method.average_size")
					validatedMetrics["spark.driver.code_generator.generated_method.average_size"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average method size of the classes generated by the CodeGenerator.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
				case "spark.driver.code_generator.generated_method.count":
					assert.False(t, validatedMetrics["spark.driver.code_generator.generated_method.count"], "Found a duplicate in the metrics slice: spark.driver.code_generator.generated_method.count")
					validatedMetrics["spark.driver.code_generator.generated_method.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of methods generated by the CodeGenerator.", ms.At(i).Description())
					assert.Equal(t, "{ methods }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.driver.code_generator.source_code.average_size":
					assert.False(t, validatedMetrics["spark.driver.code_generator.source_code.average_size"], "Found a duplicate in the metrics slice: spark.driver.code_generator.source_code.average_size")
					validatedMetrics["spark.driver.code_generator.source_code.average_size"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average size of the source code generated by a CodeGenerator code generation operation.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
				case "spark.driver.code_generator.source_code.count":
					assert.False(t, validatedMetrics["spark.driver.code_generator.source_code.count"], "Found a duplicate in the metrics slice: spark.driver.code_generator.source_code.count")
					validatedMetrics["spark.driver.code_generator.source_code.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of source code generation operations performed by the CodeGenerator.", ms.At(i).Description())
					assert.Equal(t, "{ operations }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.driver.dag_scheduler.jobs.active":
					assert.False(t, validatedMetrics["spark.driver.dag_scheduler.jobs.active"], "Found a duplicate in the metrics slice: spark.driver.dag_scheduler.jobs.active")
					validatedMetrics["spark.driver.dag_scheduler.jobs.active"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of active jobs currently being processed by the DAGScheduler.", ms.At(i).Description())
					assert.Equal(t, "{ jobs }", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.driver.dag_scheduler.jobs.all":
					assert.False(t, validatedMetrics["spark.driver.dag_scheduler.jobs.all"], "Found a duplicate in the metrics slice: spark.driver.dag_scheduler.jobs.all")
					validatedMetrics["spark.driver.dag_scheduler.jobs.all"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of jobs that have been submitted to the DAGScheduler.", ms.At(i).Description())
					assert.Equal(t, "{ jobs }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.driver.dag_scheduler.stages.failed":
					assert.False(t, validatedMetrics["spark.driver.dag_scheduler.stages.failed"], "Found a duplicate in the metrics slice: spark.driver.dag_scheduler.stages.failed")
					validatedMetrics["spark.driver.dag_scheduler.stages.failed"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of failed stages run by the DAGScheduler.", ms.At(i).Description())
					assert.Equal(t, "{ stages }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.driver.dag_scheduler.stages.running":
					assert.False(t, validatedMetrics["spark.driver.dag_scheduler.stages.running"], "Found a duplicate in the metrics slice: spark.driver.dag_scheduler.stages.running")
					validatedMetrics["spark.driver.dag_scheduler.stages.running"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of stages the DAGScheduler is currently running.", ms.At(i).Description())
					assert.Equal(t, "{ stages }", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.driver.dag_scheduler.stages.waiting":
					assert.False(t, validatedMetrics["spark.driver.dag_scheduler.stages.waiting"], "Found a duplicate in the metrics slice: spark.driver.dag_scheduler.stages.waiting")
					validatedMetrics["spark.driver.dag_scheduler.stages.waiting"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of stages waiting to be run by the DAGScheduler.", ms.At(i).Description())
					assert.Equal(t, "{ stages }", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.driver.executor_metrics.gc.count":
					assert.False(t, validatedMetrics["spark.driver.executor_metrics.gc.count"], "Found a duplicate in the metrics slice: spark.driver.executor_metrics.gc.count")
					validatedMetrics["spark.driver.executor_metrics.gc.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of garbage collection operations performed.", ms.At(i).Description())
					assert.Equal(t, "{ gc_operations }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("gc_type")
					assert.True(t, ok)
					assert.Equal(t, "major", attrVal.Str())
				case "spark.driver.executor_metrics.gc.time":
					assert.False(t, validatedMetrics["spark.driver.executor_metrics.gc.time"], "Found a duplicate in the metrics slice: spark.driver.executor_metrics.gc.time")
					validatedMetrics["spark.driver.executor_metrics.gc.time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total elapsed time during garbage collection operations.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("gc_type")
					assert.True(t, ok)
					assert.Equal(t, "major", attrVal.Str())
				case "spark.driver.executor_metrics.jvm_memory":
					assert.False(t, validatedMetrics["spark.driver.executor_metrics.jvm_memory"], "Found a duplicate in the metrics slice: spark.driver.executor_metrics.jvm_memory")
					validatedMetrics["spark.driver.executor_metrics.jvm_memory"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Amount of memory used by the driver JVM.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("location")
					assert.True(t, ok)
					assert.Equal(t, "on_heap", attrVal.Str())
				case "spark.driver.executor_metrics.memory.execution":
					assert.False(t, validatedMetrics["spark.driver.executor_metrics.memory.execution"], "Found a duplicate in the metrics slice: spark.driver.executor_metrics.memory.execution")
					validatedMetrics["spark.driver.executor_metrics.memory.execution"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Amount of execution memory currently used by the driver.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("location")
					assert.True(t, ok)
					assert.Equal(t, "on_heap", attrVal.Str())
				case "spark.driver.executor_metrics.memory.pool":
					assert.False(t, validatedMetrics["spark.driver.executor_metrics.memory.pool"], "Found a duplicate in the metrics slice: spark.driver.executor_metrics.memory.pool")
					validatedMetrics["spark.driver.executor_metrics.memory.pool"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Amount of pool memory currently used by the driver.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("pool_memory_type")
					assert.True(t, ok)
					assert.Equal(t, "direct", attrVal.Str())
				case "spark.driver.executor_metrics.memory.storage":
					assert.False(t, validatedMetrics["spark.driver.executor_metrics.memory.storage"], "Found a duplicate in the metrics slice: spark.driver.executor_metrics.memory.storage")
					validatedMetrics["spark.driver.executor_metrics.memory.storage"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Amount of storage memory currently used by the driver.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("location")
					assert.True(t, ok)
					assert.Equal(t, "on_heap", attrVal.Str())
				case "spark.driver.hive_external_catalog.file_cache_hits":
					assert.False(t, validatedMetrics["spark.driver.hive_external_catalog.file_cache_hits"], "Found a duplicate in the metrics slice: spark.driver.hive_external_catalog.file_cache_hits")
					validatedMetrics["spark.driver.hive_external_catalog.file_cache_hits"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of file cache hits on the HiveExternalCatalog.", ms.At(i).Description())
					assert.Equal(t, "{ hits }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.driver.hive_external_catalog.files_discovered":
					assert.False(t, validatedMetrics["spark.driver.hive_external_catalog.files_discovered"], "Found a duplicate in the metrics slice: spark.driver.hive_external_catalog.files_discovered")
					validatedMetrics["spark.driver.hive_external_catalog.files_discovered"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of files discovered while listing the partitions of a table in the Hive metastore", ms.At(i).Description())
					assert.Equal(t, "{ files }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.driver.hive_external_catalog.hive_client_calls":
					assert.False(t, validatedMetrics["spark.driver.hive_external_catalog.hive_client_calls"], "Found a duplicate in the metrics slice: spark.driver.hive_external_catalog.hive_client_calls")
					validatedMetrics["spark.driver.hive_external_catalog.hive_client_calls"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of calls to the underlying Hive Metastore client made by the Spark application.", ms.At(i).Description())
					assert.Equal(t, "{ calls }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.driver.hive_external_catalog.parallel_listing_jobs":
					assert.False(t, validatedMetrics["spark.driver.hive_external_catalog.parallel_listing_jobs"], "Found a duplicate in the metrics slice: spark.driver.hive_external_catalog.parallel_listing_jobs")
					validatedMetrics["spark.driver.hive_external_catalog.parallel_listing_jobs"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of parallel listing jobs initiated by the HiveExternalCatalog when listing partitions of a table.", ms.At(i).Description())
					assert.Equal(t, "{ listing_jobs }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.driver.hive_external_catalog.partitions_fetched":
					assert.False(t, validatedMetrics["spark.driver.hive_external_catalog.partitions_fetched"], "Found a duplicate in the metrics slice: spark.driver.hive_external_catalog.partitions_fetched")
					validatedMetrics["spark.driver.hive_external_catalog.partitions_fetched"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Table partitions fetched by the HiveExternalCatalog.", ms.At(i).Description())
					assert.Equal(t, "{ partitions }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.driver.jvm_cpu_time":
					assert.False(t, validatedMetrics["spark.driver.jvm_cpu_time"], "Found a duplicate in the metrics slice: spark.driver.jvm_cpu_time")
					validatedMetrics["spark.driver.jvm_cpu_time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Current CPU time taken by the Spark driver.", ms.At(i).Description())
					assert.Equal(t, "ns", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.driver.live_listener_bus.events_dropped":
					assert.False(t, validatedMetrics["spark.driver.live_listener_bus.events_dropped"], "Found a duplicate in the metrics slice: spark.driver.live_listener_bus.events_dropped")
					validatedMetrics["spark.driver.live_listener_bus.events_dropped"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of events that have been dropped by the LiveListenerBus.", ms.At(i).Description())
					assert.Equal(t, "{ events }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.driver.live_listener_bus.events_posted":
					assert.False(t, validatedMetrics["spark.driver.live_listener_bus.events_posted"], "Found a duplicate in the metrics slice: spark.driver.live_listener_bus.events_posted")
					validatedMetrics["spark.driver.live_listener_bus.events_posted"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of events that have been posted on the LiveListenerBus.", ms.At(i).Description())
					assert.Equal(t, "{ events }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.driver.live_listener_bus.listener_processing_time.average":
					assert.False(t, validatedMetrics["spark.driver.live_listener_bus.listener_processing_time.average"], "Found a duplicate in the metrics slice: spark.driver.live_listener_bus.listener_processing_time.average")
					validatedMetrics["spark.driver.live_listener_bus.listener_processing_time.average"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average time taken for the LiveListenerBus to process an event posted to it.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
				case "spark.driver.live_listener_bus.queue_size":
					assert.False(t, validatedMetrics["spark.driver.live_listener_bus.queue_size"], "Found a duplicate in the metrics slice: spark.driver.live_listener_bus.queue_size")
					validatedMetrics["spark.driver.live_listener_bus.queue_size"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of events currently waiting to be processed by the LiveListenerBus.", ms.At(i).Description())
					assert.Equal(t, "{ events }", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.executor.disk_used":
					assert.False(t, validatedMetrics["spark.executor.disk_used"], "Found a duplicate in the metrics slice: spark.executor.disk_used")
					validatedMetrics["spark.executor.disk_used"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Disk space used by this executor for RDD storage.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.executor.duration":
					assert.False(t, validatedMetrics["spark.executor.duration"], "Found a duplicate in the metrics slice: spark.executor.duration")
					validatedMetrics["spark.executor.duration"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Elapsed time the JVM spent executing tasks in this executor.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.executor.gc_time":
					assert.False(t, validatedMetrics["spark.executor.gc_time"], "Found a duplicate in the metrics slice: spark.executor.gc_time")
					validatedMetrics["spark.executor.gc_time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Elapsed time the JVM spent in garbage collection in this executor.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.executor.input_size":
					assert.False(t, validatedMetrics["spark.executor.input_size"], "Found a duplicate in the metrics slice: spark.executor.input_size")
					validatedMetrics["spark.executor.input_size"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Amount of data input for this executor.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.executor.memory_used":
					assert.False(t, validatedMetrics["spark.executor.memory_used"], "Found a duplicate in the metrics slice: spark.executor.memory_used")
					validatedMetrics["spark.executor.memory_used"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Storage memory used by this executor.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.executor.shuffle.io.size":
					assert.False(t, validatedMetrics["spark.executor.shuffle.io.size"], "Found a duplicate in the metrics slice: spark.executor.shuffle.io.size")
					validatedMetrics["spark.executor.shuffle.io.size"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Amount of data written and read during shuffle operations for this executor.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("direction")
					assert.True(t, ok)
					assert.Equal(t, "in", attrVal.Str())
				case "spark.executor.storage_memory.total":
					assert.False(t, validatedMetrics["spark.executor.storage_memory.total"], "Found a duplicate in the metrics slice: spark.executor.storage_memory.total")
					validatedMetrics["spark.executor.storage_memory.total"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total memory that can be used for storage.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("location")
					assert.True(t, ok)
					assert.Equal(t, "on_heap", attrVal.Str())
				case "spark.executor.storage_memory.used":
					assert.False(t, validatedMetrics["spark.executor.storage_memory.used"], "Found a duplicate in the metrics slice: spark.executor.storage_memory.used")
					validatedMetrics["spark.executor.storage_memory.used"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Amount of memory currently used for storage.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("location")
					assert.True(t, ok)
					assert.Equal(t, "on_heap", attrVal.Str())
				case "spark.executor.tasks.active":
					assert.False(t, validatedMetrics["spark.executor.tasks.active"], "Found a duplicate in the metrics slice: spark.executor.tasks.active")
					validatedMetrics["spark.executor.tasks.active"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of tasks currently running in this executor.", ms.At(i).Description())
					assert.Equal(t, "{ tasks }", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.executor.tasks.max":
					assert.False(t, validatedMetrics["spark.executor.tasks.max"], "Found a duplicate in the metrics slice: spark.executor.tasks.max")
					validatedMetrics["spark.executor.tasks.max"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Maximum number of tasks that can run concurrently in this executor.", ms.At(i).Description())
					assert.Equal(t, "{ tasks }", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.executor.tasks.results":
					assert.False(t, validatedMetrics["spark.executor.tasks.results"], "Found a duplicate in the metrics slice: spark.executor.tasks.results")
					validatedMetrics["spark.executor.tasks.results"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of tasks with a specific result in this executor.", ms.At(i).Description())
					assert.Equal(t, "{ tasks }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("executor_task_result")
					assert.True(t, ok)
					assert.Equal(t, "completed", attrVal.Str())
				case "spark.job.stages.active":
					assert.False(t, validatedMetrics["spark.job.stages.active"], "Found a duplicate in the metrics slice: spark.job.stages.active")
					validatedMetrics["spark.job.stages.active"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of active stages in this job.", ms.At(i).Description())
					assert.Equal(t, "{ tasks }", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.job.stages.results":
					assert.False(t, validatedMetrics["spark.job.stages.results"], "Found a duplicate in the metrics slice: spark.job.stages.results")
					validatedMetrics["spark.job.stages.results"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of stages with a specific result in this job.", ms.At(i).Description())
					assert.Equal(t, "{ tasks }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("job_stage_result")
					assert.True(t, ok)
					assert.Equal(t, "completed", attrVal.Str())
				case "spark.job.tasks.active":
					assert.False(t, validatedMetrics["spark.job.tasks.active"], "Found a duplicate in the metrics slice: spark.job.tasks.active")
					validatedMetrics["spark.job.tasks.active"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of active tasks in this job.", ms.At(i).Description())
					assert.Equal(t, "{ tasks }", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "spark.job.tasks.results":
					assert.False(t, validatedMetrics["spark.job.tasks.results"], "Found a duplicate in the metrics slice: spark.job.tasks.results")
					validatedMetrics["spark.job.tasks.results"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of tasks with a specific result in this job.", ms.At(i).Description())
					assert.Equal(t, "{ tasks }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("job_task_result")
					assert.True(t, ok)
					assert.Equal(t, "completed", attrVal.Str())
				case "spark.stage.disk_space_spilled":
					assert.False(t, validatedMetrics["spark.stage.disk_space_spilled"], "Found a duplicate in the metrics slice: spark.stage.disk_space_spilled")
					validatedMetrics["spark.stage.disk_space_spilled"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The amount of disk space used for storing portions of overly large data chunks that couldn’t fit in memory in this stage.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("attempt_id")
					assert.True(t, ok)
					assert.EqualValues(t, 1, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("stage_active")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_complete")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_pending")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_failed")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
				case "spark.stage.executor.cpu_time":
					assert.False(t, validatedMetrics["spark.stage.executor.cpu_time"], "Found a duplicate in the metrics slice: spark.stage.executor.cpu_time")
					validatedMetrics["spark.stage.executor.cpu_time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "CPU time spent by the executor in this stage.", ms.At(i).Description())
					assert.Equal(t, "ns", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("attempt_id")
					assert.True(t, ok)
					assert.EqualValues(t, 1, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("stage_active")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_complete")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_pending")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_failed")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
				case "spark.stage.executor.run_time":
					assert.False(t, validatedMetrics["spark.stage.executor.run_time"], "Found a duplicate in the metrics slice: spark.stage.executor.run_time")
					validatedMetrics["spark.stage.executor.run_time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Amount of time spent by the executor in this stage.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("attempt_id")
					assert.True(t, ok)
					assert.EqualValues(t, 1, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("stage_active")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_complete")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_pending")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_failed")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
				case "spark.stage.io.records":
					assert.False(t, validatedMetrics["spark.stage.io.records"], "Found a duplicate in the metrics slice: spark.stage.io.records")
					validatedMetrics["spark.stage.io.records"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of records written and read in this stage.", ms.At(i).Description())
					assert.Equal(t, "{ records }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("attempt_id")
					assert.True(t, ok)
					assert.EqualValues(t, 1, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("stage_active")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_complete")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_pending")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_failed")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("direction")
					assert.True(t, ok)
					assert.Equal(t, "in", attrVal.Str())
				case "spark.stage.io.size":
					assert.False(t, validatedMetrics["spark.stage.io.size"], "Found a duplicate in the metrics slice: spark.stage.io.size")
					validatedMetrics["spark.stage.io.size"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Amount of data written and read at this stage.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("attempt_id")
					assert.True(t, ok)
					assert.EqualValues(t, 1, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("stage_active")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_complete")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_pending")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_failed")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("direction")
					assert.True(t, ok)
					assert.Equal(t, "in", attrVal.Str())
				case "spark.stage.jvm_gc_time":
					assert.False(t, validatedMetrics["spark.stage.jvm_gc_time"], "Found a duplicate in the metrics slice: spark.stage.jvm_gc_time")
					validatedMetrics["spark.stage.jvm_gc_time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The amount of time the JVM spent on garbage collection in this stage.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("attempt_id")
					assert.True(t, ok)
					assert.EqualValues(t, 1, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("stage_active")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_complete")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_pending")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_failed")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
				case "spark.stage.memory_spilled":
					assert.False(t, validatedMetrics["spark.stage.memory_spilled"], "Found a duplicate in the metrics slice: spark.stage.memory_spilled")
					validatedMetrics["spark.stage.memory_spilled"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The amount of memory moved to disk due to size constraints (spilled) in this stage.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("attempt_id")
					assert.True(t, ok)
					assert.EqualValues(t, 1, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("stage_active")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_complete")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_pending")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_failed")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
				case "spark.stage.peak_execution_memory":
					assert.False(t, validatedMetrics["spark.stage.peak_execution_memory"], "Found a duplicate in the metrics slice: spark.stage.peak_execution_memory")
					validatedMetrics["spark.stage.peak_execution_memory"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Peak memory used by internal data structures created during shuffles, aggregations and joins in this stage.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("attempt_id")
					assert.True(t, ok)
					assert.EqualValues(t, 1, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("stage_active")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_complete")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_pending")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_failed")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
				case "spark.stage.shuffle.blocks_fetched":
					assert.False(t, validatedMetrics["spark.stage.shuffle.blocks_fetched"], "Found a duplicate in the metrics slice: spark.stage.shuffle.blocks_fetched")
					validatedMetrics["spark.stage.shuffle.blocks_fetched"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of blocks fetched in shuffle operations in this stage.", ms.At(i).Description())
					assert.Equal(t, "{ blocks }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("attempt_id")
					assert.True(t, ok)
					assert.EqualValues(t, 1, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("stage_active")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_complete")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_pending")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_failed")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("source")
					assert.True(t, ok)
					assert.Equal(t, "local", attrVal.Str())
				case "spark.stage.shuffle.fetch_wait_time":
					assert.False(t, validatedMetrics["spark.stage.shuffle.fetch_wait_time"], "Found a duplicate in the metrics slice: spark.stage.shuffle.fetch_wait_time")
					validatedMetrics["spark.stage.shuffle.fetch_wait_time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Time spent in this stage waiting for remote shuffle blocks.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("attempt_id")
					assert.True(t, ok)
					assert.EqualValues(t, 1, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("stage_active")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_complete")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_pending")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_failed")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
				case "spark.stage.shuffle.io.records":
					assert.False(t, validatedMetrics["spark.stage.shuffle.io.records"], "Found a duplicate in the metrics slice: spark.stage.shuffle.io.records")
					validatedMetrics["spark.stage.shuffle.io.records"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of records written or read in shuffle operations in this stage.", ms.At(i).Description())
					assert.Equal(t, "{ records }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("attempt_id")
					assert.True(t, ok)
					assert.EqualValues(t, 1, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("stage_active")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_complete")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_pending")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_failed")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("direction")
					assert.True(t, ok)
					assert.Equal(t, "in", attrVal.Str())
				case "spark.stage.shuffle.io.size":
					assert.False(t, validatedMetrics["spark.stage.shuffle.io.size"], "Found a duplicate in the metrics slice: spark.stage.shuffle.io.size")
					validatedMetrics["spark.stage.shuffle.io.size"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Amount of data written or read in shuffle operations in this stage.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("attempt_id")
					assert.True(t, ok)
					assert.EqualValues(t, 1, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("stage_active")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_complete")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_pending")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_failed")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("source")
					assert.True(t, ok)
					assert.Equal(t, "local", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("direction")
					assert.True(t, ok)
					assert.Equal(t, "in", attrVal.Str())
				case "spark.stage.shuffle.remote_data_read_to_disk":
					assert.False(t, validatedMetrics["spark.stage.shuffle.remote_data_read_to_disk"], "Found a duplicate in the metrics slice: spark.stage.shuffle.remote_data_read_to_disk")
					validatedMetrics["spark.stage.shuffle.remote_data_read_to_disk"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Amount of data read to disk in shuffle operations (sometimes required for large blocks, as opposed to the default behavior of reading into memory).", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("attempt_id")
					assert.True(t, ok)
					assert.EqualValues(t, 1, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("stage_active")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_complete")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_pending")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_failed")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
				case "spark.stage.shuffle.write_time":
					assert.False(t, validatedMetrics["spark.stage.shuffle.write_time"], "Found a duplicate in the metrics slice: spark.stage.shuffle.write_time")
					validatedMetrics["spark.stage.shuffle.write_time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Time spent blocking on writes to disk or buffer cache in this stage.", ms.At(i).Description())
					assert.Equal(t, "ns", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("attempt_id")
					assert.True(t, ok)
					assert.EqualValues(t, 1, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("stage_active")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_complete")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_pending")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_failed")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
				case "spark.stage.task.active":
					assert.False(t, validatedMetrics["spark.stage.task.active"], "Found a duplicate in the metrics slice: spark.stage.task.active")
					validatedMetrics["spark.stage.task.active"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of active tasks in this stage.", ms.At(i).Description())
					assert.Equal(t, "{ tasks }", ms.At(i).Unit())
					assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("attempt_id")
					assert.True(t, ok)
					assert.EqualValues(t, 1, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("stage_active")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_complete")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_pending")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_failed")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
				case "spark.stage.task.result_size":
					assert.False(t, validatedMetrics["spark.stage.task.result_size"], "Found a duplicate in the metrics slice: spark.stage.task.result_size")
					validatedMetrics["spark.stage.task.result_size"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The amount of data transmitted back to the driver by all the tasks in this stage.", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("attempt_id")
					assert.True(t, ok)
					assert.EqualValues(t, 1, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("stage_active")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_complete")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_pending")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_failed")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
				case "spark.stage.task.results":
					assert.False(t, validatedMetrics["spark.stage.task.results"], "Found a duplicate in the metrics slice: spark.stage.task.results")
					validatedMetrics["spark.stage.task.results"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of tasks with a specific result in this stage.", ms.At(i).Description())
					assert.Equal(t, "{ tasks }", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("attempt_id")
					assert.True(t, ok)
					assert.EqualValues(t, 1, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("stage_active")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_complete")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_pending")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_failed")
					assert.True(t, ok)
					assert.EqualValues(t, true, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("stage_task_result")
					assert.True(t, ok)
					assert.Equal(t, "completed", attrVal.Str())
				}
			}
		})
	}
}
