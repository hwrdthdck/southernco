// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testConfigCollection int

const (
	testSetDefault testConfigCollection = iota
	testSetAll
	testSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name      string
		configSet testConfigCollection
	}{
		{
			name:      "default",
			configSet: testSetDefault,
		},
		{
			name:      "all_set",
			configSet: testSetAll,
		},
		{
			name:      "none_set",
			configSet: testSetNone,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopCreateSettings()
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, test.name), settings, WithStartTime(start))

			expectedWarnings := 0
			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordK8sJobActivePodsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordK8sJobDesiredSuccessfulPodsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordK8sJobFailedPodsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordK8sJobMaxParallelPodsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordK8sJobSuccessfulPodsDataPoint(ts, 1)

			metrics := mb.Emit(WithK8sJobName("k8s.job.name-val"), WithK8sJobUID("k8s.job.uid-val"), WithK8sNamespaceName("k8s.namespace.name-val"), WithOpencensusResourcetype("opencensus.resourcetype-val"))

			if test.configSet == testSetNone {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			attrCount := 0
			enabledAttrCount := 0
			attrVal, ok := rm.Resource().Attributes().Get("k8s.job.name")
			attrCount++
			assert.Equal(t, mb.resourceAttributesConfig.K8sJobName.Enabled, ok)
			if mb.resourceAttributesConfig.K8sJobName.Enabled {
				enabledAttrCount++
				assert.EqualValues(t, "k8s.job.name-val", attrVal.Str())
			}
			attrVal, ok = rm.Resource().Attributes().Get("k8s.job.uid")
			attrCount++
			assert.Equal(t, mb.resourceAttributesConfig.K8sJobUID.Enabled, ok)
			if mb.resourceAttributesConfig.K8sJobUID.Enabled {
				enabledAttrCount++
				assert.EqualValues(t, "k8s.job.uid-val", attrVal.Str())
			}
			attrVal, ok = rm.Resource().Attributes().Get("k8s.namespace.name")
			attrCount++
			assert.Equal(t, mb.resourceAttributesConfig.K8sNamespaceName.Enabled, ok)
			if mb.resourceAttributesConfig.K8sNamespaceName.Enabled {
				enabledAttrCount++
				assert.EqualValues(t, "k8s.namespace.name-val", attrVal.Str())
			}
			attrVal, ok = rm.Resource().Attributes().Get("opencensus.resourcetype")
			attrCount++
			assert.Equal(t, mb.resourceAttributesConfig.OpencensusResourcetype.Enabled, ok)
			if mb.resourceAttributesConfig.OpencensusResourcetype.Enabled {
				enabledAttrCount++
				assert.EqualValues(t, "opencensus.resourcetype-val", attrVal.Str())
			}
			assert.Equal(t, enabledAttrCount, rm.Resource().Attributes().Len())
			assert.Equal(t, attrCount, 4)

			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if test.configSet == testSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if test.configSet == testSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "k8s.job.active_pods":
					assert.False(t, validatedMetrics["k8s.job.active_pods"], "Found a duplicate in the metrics slice: k8s.job.active_pods")
					validatedMetrics["k8s.job.active_pods"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The number of actively running pods for a job", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "k8s.job.desired_successful_pods":
					assert.False(t, validatedMetrics["k8s.job.desired_successful_pods"], "Found a duplicate in the metrics slice: k8s.job.desired_successful_pods")
					validatedMetrics["k8s.job.desired_successful_pods"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The desired number of successfully finished pods the job should be run with", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "k8s.job.failed_pods":
					assert.False(t, validatedMetrics["k8s.job.failed_pods"], "Found a duplicate in the metrics slice: k8s.job.failed_pods")
					validatedMetrics["k8s.job.failed_pods"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The number of pods which reached phase Failed for a job", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "k8s.job.max_parallel_pods":
					assert.False(t, validatedMetrics["k8s.job.max_parallel_pods"], "Found a duplicate in the metrics slice: k8s.job.max_parallel_pods")
					validatedMetrics["k8s.job.max_parallel_pods"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The max desired number of pods the job should run at any given time", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "k8s.job.successful_pods":
					assert.False(t, validatedMetrics["k8s.job.successful_pods"], "Found a duplicate in the metrics slice: k8s.job.successful_pods")
					validatedMetrics["k8s.job.successful_pods"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The number of pods which reached phase Succeeded for a job", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				}
			}
		})
	}
}
