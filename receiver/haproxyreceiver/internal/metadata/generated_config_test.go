// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"path/filepath"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/confmap/confmaptest"
)

func TestResourceAttributesConfig(t *testing.T) {
	tests := []struct {
		name string
		want ResourceAttributesSettings
	}{
		{
			name: "default",
			want: DefaultResourceAttributesSettings(),
		},
		{
			name: "all_set",
			want: ResourceAttributesSettings{
				HaproxyAddr: ResourceAttributeSettings{Enabled: true},
				HaproxyAlgo: ResourceAttributeSettings{Enabled: true},
				HaproxyIid:  ResourceAttributeSettings{Enabled: true},
				HaproxyPid:  ResourceAttributeSettings{Enabled: true},
				HaproxySid:  ResourceAttributeSettings{Enabled: true},
				HaproxyType: ResourceAttributeSettings{Enabled: true},
				HaproxyURL:  ResourceAttributeSettings{Enabled: true},
				ProxyName:   ResourceAttributeSettings{Enabled: true},
				ServiceName: ResourceAttributeSettings{Enabled: true},
			},
		},
		{
			name: "none_set",
			want: ResourceAttributesSettings{
				HaproxyAddr: ResourceAttributeSettings{Enabled: false},
				HaproxyAlgo: ResourceAttributeSettings{Enabled: false},
				HaproxyIid:  ResourceAttributeSettings{Enabled: false},
				HaproxyPid:  ResourceAttributeSettings{Enabled: false},
				HaproxySid:  ResourceAttributeSettings{Enabled: false},
				HaproxyType: ResourceAttributeSettings{Enabled: false},
				HaproxyURL:  ResourceAttributeSettings{Enabled: false},
				ProxyName:   ResourceAttributeSettings{Enabled: false},
				ServiceName: ResourceAttributeSettings{Enabled: false},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadResourceAttributesSettings(t, tt.name)
			if diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(ResourceAttributeSettings{})); diff != "" {
				t.Errorf("Config mismatch (-expected +actual):\n%s", diff)
			}
		})
	}
}

func TestMetricsBuilderConfig(t *testing.T) {
	tests := []struct {
		name string
		want MetricsBuilderConfig
	}{
		{
			name: "default",
			want: DefaultMetricsBuilderConfig(),
		},
		{
			name: "all_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsSettings{
					HaproxyBytesInput:           MetricSettings{Enabled: true},
					HaproxyBytesOutput:          MetricSettings{Enabled: true},
					HaproxyClientsCanceled:      MetricSettings{Enabled: true},
					HaproxyCompressionBypass:    MetricSettings{Enabled: true},
					HaproxyCompressionCount:     MetricSettings{Enabled: true},
					HaproxyCompressionInput:     MetricSettings{Enabled: true},
					HaproxyCompressionOutput:    MetricSettings{Enabled: true},
					HaproxyConnectionsErrors:    MetricSettings{Enabled: true},
					HaproxyConnectionsRate:      MetricSettings{Enabled: true},
					HaproxyConnectionsRetries:   MetricSettings{Enabled: true},
					HaproxyConnectionsTotal:     MetricSettings{Enabled: true},
					HaproxyDowntime:             MetricSettings{Enabled: true},
					HaproxyFailedChecks:         MetricSettings{Enabled: true},
					HaproxyRequestsDenied:       MetricSettings{Enabled: true},
					HaproxyRequestsErrors:       MetricSettings{Enabled: true},
					HaproxyRequestsQueued:       MetricSettings{Enabled: true},
					HaproxyRequestsRate:         MetricSettings{Enabled: true},
					HaproxyRequestsRedispatched: MetricSettings{Enabled: true},
					HaproxyRequestsTotal:        MetricSettings{Enabled: true},
					HaproxyResponsesDenied:      MetricSettings{Enabled: true},
					HaproxyResponsesErrors:      MetricSettings{Enabled: true},
					HaproxyServerSelectedTotal:  MetricSettings{Enabled: true},
					HaproxySessionsAverage:      MetricSettings{Enabled: true},
					HaproxySessionsCount:        MetricSettings{Enabled: true},
					HaproxySessionsRate:         MetricSettings{Enabled: true},
					HaproxySessionsTotal:        MetricSettings{Enabled: true},
				},
				ResourceAttributes: ResourceAttributesSettings{
					HaproxyAddr: ResourceAttributeSettings{Enabled: true},
					HaproxyAlgo: ResourceAttributeSettings{Enabled: true},
					HaproxyIid:  ResourceAttributeSettings{Enabled: true},
					HaproxyPid:  ResourceAttributeSettings{Enabled: true},
					HaproxySid:  ResourceAttributeSettings{Enabled: true},
					HaproxyType: ResourceAttributeSettings{Enabled: true},
					HaproxyURL:  ResourceAttributeSettings{Enabled: true},
					ProxyName:   ResourceAttributeSettings{Enabled: true},
					ServiceName: ResourceAttributeSettings{Enabled: true},
				},
			},
		},
		{
			name: "none_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsSettings{
					HaproxyBytesInput:           MetricSettings{Enabled: false},
					HaproxyBytesOutput:          MetricSettings{Enabled: false},
					HaproxyClientsCanceled:      MetricSettings{Enabled: false},
					HaproxyCompressionBypass:    MetricSettings{Enabled: false},
					HaproxyCompressionCount:     MetricSettings{Enabled: false},
					HaproxyCompressionInput:     MetricSettings{Enabled: false},
					HaproxyCompressionOutput:    MetricSettings{Enabled: false},
					HaproxyConnectionsErrors:    MetricSettings{Enabled: false},
					HaproxyConnectionsRate:      MetricSettings{Enabled: false},
					HaproxyConnectionsRetries:   MetricSettings{Enabled: false},
					HaproxyConnectionsTotal:     MetricSettings{Enabled: false},
					HaproxyDowntime:             MetricSettings{Enabled: false},
					HaproxyFailedChecks:         MetricSettings{Enabled: false},
					HaproxyRequestsDenied:       MetricSettings{Enabled: false},
					HaproxyRequestsErrors:       MetricSettings{Enabled: false},
					HaproxyRequestsQueued:       MetricSettings{Enabled: false},
					HaproxyRequestsRate:         MetricSettings{Enabled: false},
					HaproxyRequestsRedispatched: MetricSettings{Enabled: false},
					HaproxyRequestsTotal:        MetricSettings{Enabled: false},
					HaproxyResponsesDenied:      MetricSettings{Enabled: false},
					HaproxyResponsesErrors:      MetricSettings{Enabled: false},
					HaproxyServerSelectedTotal:  MetricSettings{Enabled: false},
					HaproxySessionsAverage:      MetricSettings{Enabled: false},
					HaproxySessionsCount:        MetricSettings{Enabled: false},
					HaproxySessionsRate:         MetricSettings{Enabled: false},
					HaproxySessionsTotal:        MetricSettings{Enabled: false},
				},
				ResourceAttributes: ResourceAttributesSettings{
					HaproxyAddr: ResourceAttributeSettings{Enabled: false},
					HaproxyAlgo: ResourceAttributeSettings{Enabled: false},
					HaproxyIid:  ResourceAttributeSettings{Enabled: false},
					HaproxyPid:  ResourceAttributeSettings{Enabled: false},
					HaproxySid:  ResourceAttributeSettings{Enabled: false},
					HaproxyType: ResourceAttributeSettings{Enabled: false},
					HaproxyURL:  ResourceAttributeSettings{Enabled: false},
					ProxyName:   ResourceAttributeSettings{Enabled: false},
					ServiceName: ResourceAttributeSettings{Enabled: false},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadMetricsBuilderConfig(t, tt.name)
			if diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(MetricSettings{}, ResourceAttributeSettings{})); diff != "" {
				t.Errorf("Config mismatch (-expected +actual):\n%s", diff)
			}
		})
	}
}

func loadResourceAttributesSettings(t *testing.T, name string) ResourceAttributesSettings {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	sub, err = sub.Sub("resource_attributes")
	require.NoError(t, err)
	cfg := DefaultResourceAttributesSettings()
	require.NoError(t, component.UnmarshalConfig(sub, &cfg))
	return cfg
}

func loadMetricsBuilderConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, component.UnmarshalConfig(sub, &cfg))
	return cfg
}
