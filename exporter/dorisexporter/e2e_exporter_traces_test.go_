// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

package dorisexporter // import "github.com/open-telemetry/opentelemetry-collector-contrib/exporter/dorisexporter"

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/require"
)

func TestE2E_StartTraces(t *testing.T) {
	config := createDefaultConfig().(*Config)
	config.MySQLEndpoint = "127.0.0.1:9030"
	config.Username = "admin"
	config.Password = "admin"
	config.Database = "otel2"
	config.Table.Traces = "traces"
	config.HistoryDays = 3

	exporter := newTracesExporter(nil, config, testTelemetrySettings)
	ctx := context.Background()
	defer exporter.shutdown(ctx)

	err := exporter.start(ctx, nil)
	require.NoError(t, err)
}

var traces = []*dTrace{
	{
		ServiceName:    "service_name",
		Timestamp:      time.Now().Format(timeFormat),
		TraceID:        "01020301000000000000000100000001",
		SpanID:         "0102030100000001",
		EndTime:        time.Now().Format(timeFormat),
		Duration:       1000,
		SpanAttributes: map[string]any{"k": "v", "a": 1},
		Events: []*dEvent{
			{
				Timestamp:  time.Now().Format(timeFormat),
				Name:       "event_name",
				Attributes: map[string]any{"k": "v", "a": 1},
			},
		},
		Links: []*dLink{
			{
				TraceID:    "01020301000000000000002000000000",
				SpanID:     "0102030100000001",
				TraceState: "trace_state",
				Attributes: map[string]any{"k": "v", "a": 1},
			},
		},
		ResourceAttributes: map[string]any{"k": "v", "a": 1},
	},
	{
		ServiceName:    "service_name",
		Timestamp:      time.Now().Format(timeFormat),
		TraceID:        "01020301000000000000000100000001",
		SpanID:         "0102030100000002",
		EndTime:        time.Now().Format(timeFormat),
		Duration:       1000,
		SpanAttributes: map[string]any{"k": "v", "a": 1},
		Events: []*dEvent{
			{
				Timestamp:  time.Now().Format(timeFormat),
				Name:       "event_name",
				Attributes: map[string]any{"k": "v", "a": 1},
			},
		},
		Links: []*dLink{
			{
				TraceID:    "01020301000000000000002000000000",
				SpanID:     "0102030100000001",
				TraceState: "trace_state",
				Attributes: map[string]any{"k": "v", "a": 1},
			},
		},
		ResourceAttributes: map[string]any{"k": "v", "a": 1},
	},
}

func TestE2E_PushTraceDataInternal(t *testing.T) {
	config := createDefaultConfig().(*Config)
	config.Endpoint = "http://127.0.0.1:8030"
	config.MySQLEndpoint = "127.0.0.1:9030"
	config.Username = "admin"
	config.Password = "admin"
	config.Database = "otel2"
	config.Table.Traces = "traces"
	config.HistoryDays = 3

	exporter := newTracesExporter(nil, config, testTelemetrySettings)
	ctx := context.Background()
	defer exporter.shutdown(ctx)

	err := exporter.start(ctx, nil)
	require.NoError(t, err)

	// no timezone
	err = exporter.pushTraceDataInternal(ctx, traces)
	require.NoError(t, err)
}

func TestE2E_PushTraceData(t *testing.T) {
	config := createDefaultConfig().(*Config)
	config.Endpoint = "http://127.0.0.1:8030"
	config.MySQLEndpoint = "127.0.0.1:9030"
	config.Username = "admin"
	config.Password = "admin"
	config.Database = "otel2"
	config.Table.Traces = "traces"
	config.HistoryDays = 3
	config.CreateHistoryDays = 1
	config.TimeZone = "America/New_York"

	err := config.Validate()
	require.NoError(t, err)

	exporter := newTracesExporter(nil, config, testTelemetrySettings)
	ctx := context.Background()
	defer exporter.shutdown(ctx)

	err = exporter.start(ctx, nil)
	require.NoError(t, err)

	err = exporter.pushTraceData(ctx, simpleTraces(10))
	require.NoError(t, err)
}
