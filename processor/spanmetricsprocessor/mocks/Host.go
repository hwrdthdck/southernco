// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	component "go.opentelemetry.io/collector/component"
	configmodels "go.opentelemetry.io/collector/config/configmodels"

	mock "github.com/stretchr/testify/mock"
)

// Host is an autogenerated mock type for the Host type
type Host struct {
	mock.Mock
}

// GetExporters provides a mock function with given fields:
func (_m *Host) GetExporters() map[configmodels.DataType]map[configmodels.Exporter]component.Exporter {
	ret := _m.Called()

	var r0 map[configmodels.DataType]map[configmodels.Exporter]component.Exporter
	if rf, ok := ret.Get(0).(func() map[configmodels.DataType]map[configmodels.Exporter]component.Exporter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[configmodels.DataType]map[configmodels.Exporter]component.Exporter)
		}
	}

	return r0
}

// GetExtensions provides a mock function with given fields:
func (_m *Host) GetExtensions() map[configmodels.Extension]component.ServiceExtension {
	ret := _m.Called()

	var r0 map[configmodels.Extension]component.ServiceExtension
	if rf, ok := ret.Get(0).(func() map[configmodels.Extension]component.ServiceExtension); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[configmodels.Extension]component.ServiceExtension)
		}
	}

	return r0
}

// GetFactory provides a mock function with given fields: kind, componentType
func (_m *Host) GetFactory(kind component.Kind, componentType configmodels.Type) component.Factory {
	ret := _m.Called(kind, componentType)

	var r0 component.Factory
	if rf, ok := ret.Get(0).(func(component.Kind, configmodels.Type) component.Factory); ok {
		r0 = rf(kind, componentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(component.Factory)
		}
	}

	return r0
}

// ReportFatalError provides a mock function with given fields: err
func (_m *Host) ReportFatalError(err error) {
	_m.Called(err)
}
