// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: opentelemetry/proto/metrics/v1/metrics.proto

package v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	v11 "github.com/open-telemetry/opentelemetry-collector-contrib/extension/dynamicconfig/proto/common/v1"
	v1 "github.com/open-telemetry/opentelemetry-collector-contrib/extension/dynamicconfig/proto/resource/v1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MeasurementValueType determines the value type for a measurement.
// TODO: There is an open question about whether this should control int64 vs
// double for Histogram. There are good arguments on both sides of this.
type MetricDescriptor_MeasurementValueType int32

const (
	// UNSPECIFIED is the default MeasurementValueType, it MUST not be
	// used.
	MetricDescriptor_MEASUREMENT_VALUE_TYPE_UNSPECIFIED MetricDescriptor_MeasurementValueType = 0
	// INT64 is the MeasurementValueType used when the measurements are int64.
	MetricDescriptor_MEASUREMENT_VALUE_TYPE_INT64 MetricDescriptor_MeasurementValueType = 1
	// DOUBLE is the MeasurementValueType used when the measurements are
	// floating point numbers.
	MetricDescriptor_MEASUREMENT_VALUE_TYPE_DOUBLE MetricDescriptor_MeasurementValueType = 2
)

var MetricDescriptor_MeasurementValueType_name = map[int32]string{
	0: "MEASUREMENT_VALUE_TYPE_UNSPECIFIED",
	1: "MEASUREMENT_VALUE_TYPE_INT64",
	2: "MEASUREMENT_VALUE_TYPE_DOUBLE",
}

var MetricDescriptor_MeasurementValueType_value = map[string]int32{
	"MEASUREMENT_VALUE_TYPE_UNSPECIFIED": 0,
	"MEASUREMENT_VALUE_TYPE_INT64":       1,
	"MEASUREMENT_VALUE_TYPE_DOUBLE":      2,
}

func (x MetricDescriptor_MeasurementValueType) String() string {
	return proto.EnumName(MetricDescriptor_MeasurementValueType_name, int32(x))
}

func (MetricDescriptor_MeasurementValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{4, 0}
}

// AggregationTemporality defines how a metric aggregator reports aggregated
// values. It describes how those values relate to the time interval over
// which they are aggregated.
type MetricDescriptor_AggregationTemporality int32

const (
	// UNSPECIFIED is the default AggregationTemporality, it MUST not be used.
	MetricDescriptor_AGGREGATION_TEMPORALITY_UNSPECIFIED MetricDescriptor_AggregationTemporality = 0
	// DELTA is an AggregationTemporality for a metric aggregator which reports
	// changes since last report time. Successive metrics contain aggregation of
	// values from continuous and non-overlapping intervals.
	//
	// The values for a DELTA metric are based only on the time interval
	// associated with one measurement cycle. There is no dependency on
	// previous measurements like is the case for CUMULATIVE metrics.
	//
	// For example, consider a system measuring the number of requests that
	// it receives and reports the sum of these requests every second as a
	// DELTA metric:
	//
	//   1. The system starts receiving at time=t_0.
	//   2. A request is received, the system measures 1 request.
	//   3. A request is received, the system measures 1 request.
	//   4. A request is received, the system measures 1 request.
	//   5. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_0 to
	//      t_0+1 with a value of 3.
	//   6. A request is received, the system measures 1 request.
	//   7. A request is received, the system measures 1 request.
	//   8. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_0+1 to
	//      t_0+2 with a value of 2.
	MetricDescriptor_AGGREGATION_TEMPORALITY_DELTA MetricDescriptor_AggregationTemporality = 1
	// CUMULATIVE is an AggregationTemporality for a metic aggregator which
	// reports changes since a fixed start time. This means that current values
	// of a CUMULATIVE metric depend on all previous measurements since the
	// start time. Because of this, the sender is required to retain this state
	// in some form. If this state is lost or invalidated, the CUMULATIVE metric
	// values MUST be reset and a new fixed start time following the last
	// reported measurement time sent MUST be used.
	//
	// For example, consider a system measuring the number of requests that
	// it receives and reports the sum of these requests every second as a
	// CUMULATIVE metric:
	//
	//   1. The system starts receiving at time=t_0.
	//   2. A request is received, the system measures 1 request.
	//   3. A request is received, the system measures 1 request.
	//   4. A request is received, the system measures 1 request.
	//   5. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_0 to
	//      t_0+1 with a value of 3.
	//   6. A request is received, the system measures 1 request.
	//   7. A request is received, the system measures 1 request.
	//   8. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_0 to
	//      t_0+2 with a value of 5.
	//   9. The system experiences a fault and loses state.
	//   10. The system recovers and resumes receiving at time=t_1.
	//   11. A request is received, the system measures 1 request.
	//   12. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_1 to
	//      t_0+1 with a value of 1.
	//
	// Note: Even though, when reporting changes since last report time, using
	// CUMULATIVE is valid, it is not recommended. This may cause problems for
	// systems that do not use start_time to determine when the aggregation
	// value was reset (e.g. Prometheus).
	MetricDescriptor_AGGREGATION_TEMPORALITY_CUMULATIVE MetricDescriptor_AggregationTemporality = 2
)

var MetricDescriptor_AggregationTemporality_name = map[int32]string{
	0: "AGGREGATION_TEMPORALITY_UNSPECIFIED",
	1: "AGGREGATION_TEMPORALITY_DELTA",
	2: "AGGREGATION_TEMPORALITY_CUMULATIVE",
}

var MetricDescriptor_AggregationTemporality_value = map[string]int32{
	"AGGREGATION_TEMPORALITY_UNSPECIFIED": 0,
	"AGGREGATION_TEMPORALITY_DELTA":       1,
	"AGGREGATION_TEMPORALITY_CUMULATIVE":  2,
}

func (x MetricDescriptor_AggregationTemporality) String() string {
	return proto.EnumName(MetricDescriptor_AggregationTemporality_name, int32(x))
}

func (MetricDescriptor_AggregationTemporality) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{4, 1}
}

// A collection of InstrumentationLibraryMetrics from a Resource.
type ResourceMetrics struct {
	// The resource for the metrics in this message.
	// If this field is not set then no resource info is known.
	Resource *v1.Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// A list of metrics that originate from a resource.
	InstrumentationLibraryMetrics []*InstrumentationLibraryMetrics `protobuf:"bytes,2,rep,name=instrumentation_library_metrics,json=instrumentationLibraryMetrics,proto3" json:"instrumentation_library_metrics,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}                         `json:"-"`
	XXX_unrecognized              []byte                           `json:"-"`
	XXX_sizecache                 int32                            `json:"-"`
}

func (m *ResourceMetrics) Reset()         { *m = ResourceMetrics{} }
func (m *ResourceMetrics) String() string { return proto.CompactTextString(m) }
func (*ResourceMetrics) ProtoMessage()    {}
func (*ResourceMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{0}
}
func (m *ResourceMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceMetrics.Unmarshal(m, b)
}
func (m *ResourceMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceMetrics.Marshal(b, m, deterministic)
}
func (m *ResourceMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceMetrics.Merge(m, src)
}
func (m *ResourceMetrics) XXX_Size() int {
	return xxx_messageInfo_ResourceMetrics.Size(m)
}
func (m *ResourceMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceMetrics proto.InternalMessageInfo

func (m *ResourceMetrics) GetResource() *v1.Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ResourceMetrics) GetInstrumentationLibraryMetrics() []*InstrumentationLibraryMetrics {
	if m != nil {
		return m.InstrumentationLibraryMetrics
	}
	return nil
}

// A collection of Metrics produced by an InstrumentationLibrary.
type InstrumentationLibraryMetrics struct {
	// The instrumentation library information for the metrics in this message.
	// If this field is not set then no library info is known.
	InstrumentationLibrary *v11.InstrumentationLibrary `protobuf:"bytes,1,opt,name=instrumentation_library,json=instrumentationLibrary,proto3" json:"instrumentation_library,omitempty"`
	// A list of metrics that originate from an instrumentation library.
	Metrics              []*Metric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *InstrumentationLibraryMetrics) Reset()         { *m = InstrumentationLibraryMetrics{} }
func (m *InstrumentationLibraryMetrics) String() string { return proto.CompactTextString(m) }
func (*InstrumentationLibraryMetrics) ProtoMessage()    {}
func (*InstrumentationLibraryMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{1}
}
func (m *InstrumentationLibraryMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentationLibraryMetrics.Unmarshal(m, b)
}
func (m *InstrumentationLibraryMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentationLibraryMetrics.Marshal(b, m, deterministic)
}
func (m *InstrumentationLibraryMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentationLibraryMetrics.Merge(m, src)
}
func (m *InstrumentationLibraryMetrics) XXX_Size() int {
	return xxx_messageInfo_InstrumentationLibraryMetrics.Size(m)
}
func (m *InstrumentationLibraryMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentationLibraryMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentationLibraryMetrics proto.InternalMessageInfo

func (m *InstrumentationLibraryMetrics) GetInstrumentationLibrary() *v11.InstrumentationLibrary {
	if m != nil {
		return m.InstrumentationLibrary
	}
	return nil
}

func (m *InstrumentationLibraryMetrics) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// A representation of an exemplar, which is a sample input measurement.
// Exemplars also hold information about the environment when the measurement was recorded,
// for example the span and trace ID of the active span when the exemplar was recorded.
type Exemplar struct {
	// The set of labels that were dropped by the aggregator, but recorded
	// alongside the original measurement. Only labels that were dropped by the aggregator should be included
	DroppedLabels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=dropped_labels,json=droppedLabels,proto3" json:"dropped_labels,omitempty"`
	// time_unix_nano is the exact time when this exemplar was recorded
	//
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimeUnixNano uint64 `protobuf:"fixed64,2,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// Numerical value of the measurement that was recorded. Only one of these
	// two fields is used for the data, based on MetricDescriptor.measurement_value_type
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	Int64Value  int64   `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	// (Optional) Span ID of the current trace.
	// span_id may be missing if the measurement is not recorded inside a trace or if the trace is not sampled.
	SpanId []byte `protobuf:"bytes,5,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// (Optional) Trace ID of the current trace.
	// trace_id may be missing if the measurement is not recorded inside a trace or if the trace is not sampled.
	TraceId              []byte   `protobuf:"bytes,6,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Exemplar) Reset()         { *m = Exemplar{} }
func (m *Exemplar) String() string { return proto.CompactTextString(m) }
func (*Exemplar) ProtoMessage()    {}
func (*Exemplar) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{2}
}
func (m *Exemplar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Exemplar.Unmarshal(m, b)
}
func (m *Exemplar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Exemplar.Marshal(b, m, deterministic)
}
func (m *Exemplar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Exemplar.Merge(m, src)
}
func (m *Exemplar) XXX_Size() int {
	return xxx_messageInfo_Exemplar.Size(m)
}
func (m *Exemplar) XXX_DiscardUnknown() {
	xxx_messageInfo_Exemplar.DiscardUnknown(m)
}

var xxx_messageInfo_Exemplar proto.InternalMessageInfo

func (m *Exemplar) GetDroppedLabels() []*v11.StringKeyValue {
	if m != nil {
		return m.DroppedLabels
	}
	return nil
}

func (m *Exemplar) GetTimeUnixNano() uint64 {
	if m != nil {
		return m.TimeUnixNano
	}
	return 0
}

func (m *Exemplar) GetDoubleValue() float64 {
	if m != nil {
		return m.DoubleValue
	}
	return 0
}

func (m *Exemplar) GetInt64Value() int64 {
	if m != nil {
		return m.Int64Value
	}
	return 0
}

func (m *Exemplar) GetSpanId() []byte {
	if m != nil {
		return m.SpanId
	}
	return nil
}

func (m *Exemplar) GetTraceId() []byte {
	if m != nil {
		return m.TraceId
	}
	return nil
}

// Defines a Metric which has one or more timeseries.
//
// The data model and relation between entities is shown in the
// diagram below. Here, "DataPoint" is the term used to refer to any
// one of the specific data point value types, and "points" is the term used
// to refer to any one of the lists of points contained in the Metric.
//
// - Metric is composed of a MetricDescriptor and a list of data points.
// - MetricDescriptor contains a name, description, unit, and type.
// - Points is a list of DataPoints (shown vertically).
// - DataPoint contains timestamps, labels, and one of the possible value type
//   fields.
//
//     Metric
//  +----------+         +------------------------+
//  |descriptor|-------->| MetricDescriptor       |
//  |          |         | name                   |
//  |          |         | description            |
//  |          |         | unit                   |
//  |    points|--+      | type                   |
//  +----------+  |      +------------------------+
//                |
//                |
//                |      +---------------------------+
//                |      |DataPoint 1                |
//                v      |+------+------+   +------+ |
//             +-----+   ||label |label |...|label | |
//             |  1  |-->||value1|value2|...|valueN| |
//             +-----+   |+------+------+   +------+ |
//             |  .  |   |+-----+                    |
//             |  .  |   ||value|                    |
//             |  .  |   |+-----+                    |
//             |  .  |   +---------------------------+
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |   +---------------------------+
//             |  .  |   |DataPoint M                |
//             +-----+   |+------+------+   +------+ |
//             |  M  |-->||label |label |...|label | |
//             +-----+   ||value1|value2|...|valueN| |
//                       |+------+------+   +------+ |
//                       |+-----+                    |
//                       ||value|                    |
//                       |+-----+                    |
//                       +---------------------------+
//
// All DataPoint types have three common fields:
// - Labels zero or more key-value pairs associated with the data point.
// - StartTimeUnixNano MUST be set to the start of the interval when the
//   descriptor's type includes an AggregationTemporality. This field is not set
//   otherwise.
// - TimeUnixNano MUST be set to:
//   - the moment when an aggregation is reported (independent of the
//     aggregation temporality).
//   - the instantaneous time of the event.
type Metric struct {
	// metric_descriptor describes the Metric.
	MetricDescriptor *MetricDescriptor `protobuf:"bytes,1,opt,name=metric_descriptor,json=metricDescriptor,proto3" json:"metric_descriptor,omitempty"`
	// Data is a list of one or more DataPoints for a single metric. Only one of the
	// following fields is used for the data, depending on the type of the metric defined
	// by MetricDescriptor.type field.
	Int64DataPoints      []*Int64DataPoint     `protobuf:"bytes,2,rep,name=int64_data_points,json=int64DataPoints,proto3" json:"int64_data_points,omitempty"`
	DoubleDataPoints     []*DoubleDataPoint    `protobuf:"bytes,3,rep,name=double_data_points,json=doubleDataPoints,proto3" json:"double_data_points,omitempty"`
	HistogramDataPoints  []*HistogramDataPoint `protobuf:"bytes,4,rep,name=histogram_data_points,json=histogramDataPoints,proto3" json:"histogram_data_points,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{3}
}
func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (m *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(m, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetMetricDescriptor() *MetricDescriptor {
	if m != nil {
		return m.MetricDescriptor
	}
	return nil
}

func (m *Metric) GetInt64DataPoints() []*Int64DataPoint {
	if m != nil {
		return m.Int64DataPoints
	}
	return nil
}

func (m *Metric) GetDoubleDataPoints() []*DoubleDataPoint {
	if m != nil {
		return m.DoubleDataPoints
	}
	return nil
}

func (m *Metric) GetHistogramDataPoints() []*HistogramDataPoint {
	if m != nil {
		return m.HistogramDataPoints
	}
	return nil
}

// Defines a metric type and its schema.
type MetricDescriptor struct {
	// name of the metric, including its DNS name prefix. It must be unique.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// description of the metric, which can be used in documentation.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// unit in which the metric value is reported. Follows the format
	// described by http://unitsofmeasure.org/ucum.html.
	Unit string `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	// Type determines the aggregation type (if any) of the metric, what is the
	// reported value type for the data points, as well as the relatationship to
	// the time interval over which they are reported.
	//
	// TODO: Update table after the decision on:
	// https://github.com/open-telemetry/opentelemetry-specification/issues/731.
	// By default, metrics recording using the OpenTelemetry API are exported as
	// (the table does not include MeasurementValueType to avoid extra rows):
	//
	//   Instrument         Type
	//   ----------------------------------------------
	//   Counter            Sum(aggregation_temporality=delta;is_monotonic=true)
	//   UpDownCounter      Sum(aggregation_temporality=delta;is_monotonic=false)
	//   ValueRecorder      TBD
	//   SumObserver        Sum(aggregation_temporality=cumulative;is_monotonic=true)
	//   UpDownSumObserver  Sum(aggregation_temporality=cumulative;is_monotonic=false)
	//   ValueObserver      Gauge()
	//
	// Types that are valid to be assigned to Type:
	//	*MetricDescriptor_Gauge_
	//	*MetricDescriptor_Sum_
	//	*MetricDescriptor_Histogram_
	Type                 isMetricDescriptor_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *MetricDescriptor) Reset()         { *m = MetricDescriptor{} }
func (m *MetricDescriptor) String() string { return proto.CompactTextString(m) }
func (*MetricDescriptor) ProtoMessage()    {}
func (*MetricDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{4}
}
func (m *MetricDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDescriptor.Unmarshal(m, b)
}
func (m *MetricDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDescriptor.Marshal(b, m, deterministic)
}
func (m *MetricDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDescriptor.Merge(m, src)
}
func (m *MetricDescriptor) XXX_Size() int {
	return xxx_messageInfo_MetricDescriptor.Size(m)
}
func (m *MetricDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDescriptor proto.InternalMessageInfo

type isMetricDescriptor_Type interface {
	isMetricDescriptor_Type()
}

type MetricDescriptor_Gauge_ struct {
	Gauge *MetricDescriptor_Gauge `protobuf:"bytes,4,opt,name=gauge,proto3,oneof" json:"gauge,omitempty"`
}
type MetricDescriptor_Sum_ struct {
	Sum *MetricDescriptor_Sum `protobuf:"bytes,5,opt,name=sum,proto3,oneof" json:"sum,omitempty"`
}
type MetricDescriptor_Histogram_ struct {
	Histogram *MetricDescriptor_Histogram `protobuf:"bytes,6,opt,name=histogram,proto3,oneof" json:"histogram,omitempty"`
}

func (*MetricDescriptor_Gauge_) isMetricDescriptor_Type()     {}
func (*MetricDescriptor_Sum_) isMetricDescriptor_Type()       {}
func (*MetricDescriptor_Histogram_) isMetricDescriptor_Type() {}

func (m *MetricDescriptor) GetType() isMetricDescriptor_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *MetricDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetricDescriptor) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *MetricDescriptor) GetGauge() *MetricDescriptor_Gauge {
	if x, ok := m.GetType().(*MetricDescriptor_Gauge_); ok {
		return x.Gauge
	}
	return nil
}

func (m *MetricDescriptor) GetSum() *MetricDescriptor_Sum {
	if x, ok := m.GetType().(*MetricDescriptor_Sum_); ok {
		return x.Sum
	}
	return nil
}

func (m *MetricDescriptor) GetHistogram() *MetricDescriptor_Histogram {
	if x, ok := m.GetType().(*MetricDescriptor_Histogram_); ok {
		return x.Histogram
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MetricDescriptor) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MetricDescriptor_Gauge_)(nil),
		(*MetricDescriptor_Sum_)(nil),
		(*MetricDescriptor_Histogram_)(nil),
	}
}

// Gauge represents the type of a scalar metric that always exports the
// "current value" for every data point. It should be used for an "unknown"
// aggregation.
//
// A Gauge does not support different aggregation temporalities. Given the
// aggregation is unknown, points cannot be combined using the same
// aggregation, regardless of aggregation temporalities. Therefore,
// AggregationTemporality is not included. Consequently, this also means
// "StartTimeUnixNano" is ignored for all data points.
//
// A Metric of this Type MUST store its values as Int64DataPoint or
// DoubleDataPoint.
type MetricDescriptor_Gauge struct {
	// It describes the value type of the measurement used to build this
	// aggregation.
	//
	// Determines if the points are Int64DataPoint or DoubleDataPoint, as well
	// as the value type of the exemplars.
	MeasurementValueType MetricDescriptor_MeasurementValueType `protobuf:"varint,1,opt,name=measurement_value_type,json=measurementValueType,proto3,enum=opentelemetry.proto.metrics.v1.MetricDescriptor_MeasurementValueType" json:"measurement_value_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *MetricDescriptor_Gauge) Reset()         { *m = MetricDescriptor_Gauge{} }
func (m *MetricDescriptor_Gauge) String() string { return proto.CompactTextString(m) }
func (*MetricDescriptor_Gauge) ProtoMessage()    {}
func (*MetricDescriptor_Gauge) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{4, 0}
}
func (m *MetricDescriptor_Gauge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDescriptor_Gauge.Unmarshal(m, b)
}
func (m *MetricDescriptor_Gauge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDescriptor_Gauge.Marshal(b, m, deterministic)
}
func (m *MetricDescriptor_Gauge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDescriptor_Gauge.Merge(m, src)
}
func (m *MetricDescriptor_Gauge) XXX_Size() int {
	return xxx_messageInfo_MetricDescriptor_Gauge.Size(m)
}
func (m *MetricDescriptor_Gauge) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDescriptor_Gauge.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDescriptor_Gauge proto.InternalMessageInfo

func (m *MetricDescriptor_Gauge) GetMeasurementValueType() MetricDescriptor_MeasurementValueType {
	if m != nil {
		return m.MeasurementValueType
	}
	return MetricDescriptor_MEASUREMENT_VALUE_TYPE_UNSPECIFIED
}

// Sum represents the type of a numeric scalar metric that is calculated as a
// sum of all reported measurements over a time interval.
//
// TODO: Decide if this should support only MonotonicSum
// https://github.com/open-telemetry/opentelemetry-specification/issues/725.
//
// A Metric of this Type MUST store its values as Int64DataPoint or
// DoubleDataPoint.
type MetricDescriptor_Sum struct {
	// It describes the value type of the measurement used to build this
	// aggregation.
	//
	// Determines if the points are Int64DataPoint or DoubleDataPoint, as well
	// as the value type of the exemplars.
	MeasurementValueType MetricDescriptor_MeasurementValueType `protobuf:"varint,1,opt,name=measurement_value_type,json=measurementValueType,proto3,enum=opentelemetry.proto.metrics.v1.MetricDescriptor_MeasurementValueType" json:"measurement_value_type,omitempty"`
	// aggregation_temporality describes if the aggregator reports delta changes
	// since last report time, or cumulative changes since a fixed start time.
	AggregationTemporality MetricDescriptor_AggregationTemporality `protobuf:"varint,2,opt,name=aggregation_temporality,json=aggregationTemporality,proto3,enum=opentelemetry.proto.metrics.v1.MetricDescriptor_AggregationTemporality" json:"aggregation_temporality,omitempty"`
	// If "true" means that the sum is monotonic.
	IsMonotonic          bool     `protobuf:"varint,3,opt,name=is_monotonic,json=isMonotonic,proto3" json:"is_monotonic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricDescriptor_Sum) Reset()         { *m = MetricDescriptor_Sum{} }
func (m *MetricDescriptor_Sum) String() string { return proto.CompactTextString(m) }
func (*MetricDescriptor_Sum) ProtoMessage()    {}
func (*MetricDescriptor_Sum) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{4, 1}
}
func (m *MetricDescriptor_Sum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDescriptor_Sum.Unmarshal(m, b)
}
func (m *MetricDescriptor_Sum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDescriptor_Sum.Marshal(b, m, deterministic)
}
func (m *MetricDescriptor_Sum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDescriptor_Sum.Merge(m, src)
}
func (m *MetricDescriptor_Sum) XXX_Size() int {
	return xxx_messageInfo_MetricDescriptor_Sum.Size(m)
}
func (m *MetricDescriptor_Sum) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDescriptor_Sum.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDescriptor_Sum proto.InternalMessageInfo

func (m *MetricDescriptor_Sum) GetMeasurementValueType() MetricDescriptor_MeasurementValueType {
	if m != nil {
		return m.MeasurementValueType
	}
	return MetricDescriptor_MEASUREMENT_VALUE_TYPE_UNSPECIFIED
}

func (m *MetricDescriptor_Sum) GetAggregationTemporality() MetricDescriptor_AggregationTemporality {
	if m != nil {
		return m.AggregationTemporality
	}
	return MetricDescriptor_AGGREGATION_TEMPORALITY_UNSPECIFIED
}

func (m *MetricDescriptor_Sum) GetIsMonotonic() bool {
	if m != nil {
		return m.IsMonotonic
	}
	return false
}

// Represents the type of a metric that is calculated by aggregating as a
// Histogram of all reported measurements over a time interval.
//
// A Metric of this Type MUST store its values as HistogramDataPoint.
type MetricDescriptor_Histogram struct {
	// It describes the value type of the measurement used to build this
	// aggregation.
	//
	// Determines the value type of the exemplars.
	MeasurementValueType MetricDescriptor_MeasurementValueType `protobuf:"varint,1,opt,name=measurement_value_type,json=measurementValueType,proto3,enum=opentelemetry.proto.metrics.v1.MetricDescriptor_MeasurementValueType" json:"measurement_value_type,omitempty"`
	// aggregation_temporality describes if the aggregator reports delta changes
	// since last report time, or cumulative changes since a fixed start time.
	AggregationTemporality MetricDescriptor_AggregationTemporality `protobuf:"varint,2,opt,name=aggregation_temporality,json=aggregationTemporality,proto3,enum=opentelemetry.proto.metrics.v1.MetricDescriptor_AggregationTemporality" json:"aggregation_temporality,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                                `json:"-"`
	XXX_unrecognized       []byte                                  `json:"-"`
	XXX_sizecache          int32                                   `json:"-"`
}

func (m *MetricDescriptor_Histogram) Reset()         { *m = MetricDescriptor_Histogram{} }
func (m *MetricDescriptor_Histogram) String() string { return proto.CompactTextString(m) }
func (*MetricDescriptor_Histogram) ProtoMessage()    {}
func (*MetricDescriptor_Histogram) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{4, 2}
}
func (m *MetricDescriptor_Histogram) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDescriptor_Histogram.Unmarshal(m, b)
}
func (m *MetricDescriptor_Histogram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDescriptor_Histogram.Marshal(b, m, deterministic)
}
func (m *MetricDescriptor_Histogram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDescriptor_Histogram.Merge(m, src)
}
func (m *MetricDescriptor_Histogram) XXX_Size() int {
	return xxx_messageInfo_MetricDescriptor_Histogram.Size(m)
}
func (m *MetricDescriptor_Histogram) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDescriptor_Histogram.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDescriptor_Histogram proto.InternalMessageInfo

func (m *MetricDescriptor_Histogram) GetMeasurementValueType() MetricDescriptor_MeasurementValueType {
	if m != nil {
		return m.MeasurementValueType
	}
	return MetricDescriptor_MEASUREMENT_VALUE_TYPE_UNSPECIFIED
}

func (m *MetricDescriptor_Histogram) GetAggregationTemporality() MetricDescriptor_AggregationTemporality {
	if m != nil {
		return m.AggregationTemporality
	}
	return MetricDescriptor_AGGREGATION_TEMPORALITY_UNSPECIFIED
}

// Int64DataPoint is a single data point in a timeseries that describes the time-varying
// values of a int64 metric.
type Int64DataPoint struct {
	// The set of labels that uniquely identify this timeseries.
	Labels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// start_time_unix_nano is the last time when the aggregation value was reset
	// to "zero". For some metric types this is ignored, see MetricsDescriptor
	// types for more details.
	//
	// The aggregation value is over the time interval (start_time_unix_nano,
	// time_unix_nano].
	//
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
	// 1970.
	//
	// Value of 0 indicates that the timestamp is unspecified. In that case the
	// timestamp may be decided by the backend.
	StartTimeUnixNano uint64 `protobuf:"fixed64,2,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	// time_unix_nano is the moment when this aggregation value was reported.
	//
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
	// 1970.
	TimeUnixNano uint64 `protobuf:"fixed64,3,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// value itself.
	Value int64 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	// (Optional) List of exemplars collected from
	// measurements that were used to form the data point
	Exemplars            []*Exemplar `protobuf:"bytes,5,rep,name=exemplars,proto3" json:"exemplars,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Int64DataPoint) Reset()         { *m = Int64DataPoint{} }
func (m *Int64DataPoint) String() string { return proto.CompactTextString(m) }
func (*Int64DataPoint) ProtoMessage()    {}
func (*Int64DataPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{5}
}
func (m *Int64DataPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Int64DataPoint.Unmarshal(m, b)
}
func (m *Int64DataPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Int64DataPoint.Marshal(b, m, deterministic)
}
func (m *Int64DataPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Int64DataPoint.Merge(m, src)
}
func (m *Int64DataPoint) XXX_Size() int {
	return xxx_messageInfo_Int64DataPoint.Size(m)
}
func (m *Int64DataPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Int64DataPoint.DiscardUnknown(m)
}

var xxx_messageInfo_Int64DataPoint proto.InternalMessageInfo

func (m *Int64DataPoint) GetLabels() []*v11.StringKeyValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Int64DataPoint) GetStartTimeUnixNano() uint64 {
	if m != nil {
		return m.StartTimeUnixNano
	}
	return 0
}

func (m *Int64DataPoint) GetTimeUnixNano() uint64 {
	if m != nil {
		return m.TimeUnixNano
	}
	return 0
}

func (m *Int64DataPoint) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Int64DataPoint) GetExemplars() []*Exemplar {
	if m != nil {
		return m.Exemplars
	}
	return nil
}

// DoubleDataPoint is a single data point in a timeseries that describes the time-varying
// value of a double metric.
type DoubleDataPoint struct {
	// The set of labels that uniquely identify this timeseries.
	Labels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// start_time_unix_nano is the last time when the aggregation value was reset
	// to "zero". For some metric types this is ignored, see MetricsDescriptor
	// types for more details.
	//
	// The aggregation value is over the time interval (start_time_unix_nano,
	// time_unix_nano].
	//
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
	// 1970.
	//
	// Value of 0 indicates that the timestamp is unspecified. In that case the
	// timestamp may be decided by the backend.
	StartTimeUnixNano uint64 `protobuf:"fixed64,2,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	// time_unix_nano is the moment when this aggregation value was reported.
	//
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
	// 1970.
	TimeUnixNano uint64 `protobuf:"fixed64,3,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// value itself.
	Value float64 `protobuf:"fixed64,4,opt,name=value,proto3" json:"value,omitempty"`
	// (Optional) List of exemplars collected from
	// measurements that were used to form the data point
	Exemplars            []*Exemplar `protobuf:"bytes,5,rep,name=exemplars,proto3" json:"exemplars,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DoubleDataPoint) Reset()         { *m = DoubleDataPoint{} }
func (m *DoubleDataPoint) String() string { return proto.CompactTextString(m) }
func (*DoubleDataPoint) ProtoMessage()    {}
func (*DoubleDataPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{6}
}
func (m *DoubleDataPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DoubleDataPoint.Unmarshal(m, b)
}
func (m *DoubleDataPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DoubleDataPoint.Marshal(b, m, deterministic)
}
func (m *DoubleDataPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoubleDataPoint.Merge(m, src)
}
func (m *DoubleDataPoint) XXX_Size() int {
	return xxx_messageInfo_DoubleDataPoint.Size(m)
}
func (m *DoubleDataPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_DoubleDataPoint.DiscardUnknown(m)
}

var xxx_messageInfo_DoubleDataPoint proto.InternalMessageInfo

func (m *DoubleDataPoint) GetLabels() []*v11.StringKeyValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *DoubleDataPoint) GetStartTimeUnixNano() uint64 {
	if m != nil {
		return m.StartTimeUnixNano
	}
	return 0
}

func (m *DoubleDataPoint) GetTimeUnixNano() uint64 {
	if m != nil {
		return m.TimeUnixNano
	}
	return 0
}

func (m *DoubleDataPoint) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *DoubleDataPoint) GetExemplars() []*Exemplar {
	if m != nil {
		return m.Exemplars
	}
	return nil
}

// HistogramDataPoint is a single data point in a timeseries that describes the time-varying
// values of a Histogram. A Histogram contains summary statistics for a population of values,
// it may optionally contain the distribution of those values across a set of buckets.
type HistogramDataPoint struct {
	// The set of labels that uniquely identify this timeseries.
	Labels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// start_time_unix_nano is the last time when the aggregation value was reset
	// to "zero". For some metric types this is ignored, see MetricsDescriptor
	// types for more details.
	//
	// The aggregation value is over the time interval (start_time_unix_nano,
	// time_unix_nano].
	//
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
	// 1970.
	//
	// Value of 0 indicates that the timestamp is unspecified. In that case the
	// timestamp may be decided by the backend.
	StartTimeUnixNano uint64 `protobuf:"fixed64,2,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	// time_unix_nano is the moment when this aggregation value was reported.
	//
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
	// 1970.
	TimeUnixNano uint64 `protobuf:"fixed64,3,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// count is the number of values in the population. Must be non-negative. This value
	// must be equal to the sum of the "count" fields in buckets if a histogram is provided.
	Count uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// sum of the values in the population. If count is zero then this field
	// must be zero. This value must be equal to the sum of the "sum" fields in buckets if
	// a histogram is provided.
	Sum float64 `protobuf:"fixed64,5,opt,name=sum,proto3" json:"sum,omitempty"`
	// bucket_counts is an optional field contains the count values of histogram
	// for each bucket.
	//
	// The sum of the bucket_counts must equal the value in the count field.
	//
	// The number of elements in bucket_counts array must be by one greater than
	// the number of elements in explicit_bounds array.
	BucketCounts []uint64 `protobuf:"varint,6,rep,packed,name=bucket_counts,json=bucketCounts,proto3" json:"bucket_counts,omitempty"`
	// explicit_bounds specifies buckets with explicitly defined bounds for values.
	// The bucket boundaries are described by "bounds" field.
	//
	// This defines size(bounds) + 1 (= N) buckets. The boundaries for bucket
	// at index i are:
	//
	// (-infinity, bounds[i]) for i == 0
	// [bounds[i-1], bounds[i]) for 0 < i < N-1
	// [bounds[i], +infinity) for i == N-1
	// The values in bounds array must be strictly increasing.
	//
	// Note: only [a, b) intervals are currently supported for each bucket except the first one.
	// If we decide to also support (a, b] intervals we should add support for these by defining
	// a boolean value which decides what type of intervals to use.
	ExplicitBounds []float64 `protobuf:"fixed64,7,rep,packed,name=explicit_bounds,json=explicitBounds,proto3" json:"explicit_bounds,omitempty"`
	// (Optional) List of exemplars collected from
	// measurements that were used to form the data point
	Exemplars            []*Exemplar `protobuf:"bytes,8,rep,name=exemplars,proto3" json:"exemplars,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *HistogramDataPoint) Reset()         { *m = HistogramDataPoint{} }
func (m *HistogramDataPoint) String() string { return proto.CompactTextString(m) }
func (*HistogramDataPoint) ProtoMessage()    {}
func (*HistogramDataPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{7}
}
func (m *HistogramDataPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistogramDataPoint.Unmarshal(m, b)
}
func (m *HistogramDataPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistogramDataPoint.Marshal(b, m, deterministic)
}
func (m *HistogramDataPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistogramDataPoint.Merge(m, src)
}
func (m *HistogramDataPoint) XXX_Size() int {
	return xxx_messageInfo_HistogramDataPoint.Size(m)
}
func (m *HistogramDataPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_HistogramDataPoint.DiscardUnknown(m)
}

var xxx_messageInfo_HistogramDataPoint proto.InternalMessageInfo

func (m *HistogramDataPoint) GetLabels() []*v11.StringKeyValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *HistogramDataPoint) GetStartTimeUnixNano() uint64 {
	if m != nil {
		return m.StartTimeUnixNano
	}
	return 0
}

func (m *HistogramDataPoint) GetTimeUnixNano() uint64 {
	if m != nil {
		return m.TimeUnixNano
	}
	return 0
}

func (m *HistogramDataPoint) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *HistogramDataPoint) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *HistogramDataPoint) GetBucketCounts() []uint64 {
	if m != nil {
		return m.BucketCounts
	}
	return nil
}

func (m *HistogramDataPoint) GetExplicitBounds() []float64 {
	if m != nil {
		return m.ExplicitBounds
	}
	return nil
}

func (m *HistogramDataPoint) GetExemplars() []*Exemplar {
	if m != nil {
		return m.Exemplars
	}
	return nil
}

func init() {
	proto.RegisterEnum("opentelemetry.proto.metrics.v1.MetricDescriptor_MeasurementValueType", MetricDescriptor_MeasurementValueType_name, MetricDescriptor_MeasurementValueType_value)
	proto.RegisterEnum("opentelemetry.proto.metrics.v1.MetricDescriptor_AggregationTemporality", MetricDescriptor_AggregationTemporality_name, MetricDescriptor_AggregationTemporality_value)
	proto.RegisterType((*ResourceMetrics)(nil), "opentelemetry.proto.metrics.v1.ResourceMetrics")
	proto.RegisterType((*InstrumentationLibraryMetrics)(nil), "opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics")
	proto.RegisterType((*Exemplar)(nil), "opentelemetry.proto.metrics.v1.Exemplar")
	proto.RegisterType((*Metric)(nil), "opentelemetry.proto.metrics.v1.Metric")
	proto.RegisterType((*MetricDescriptor)(nil), "opentelemetry.proto.metrics.v1.MetricDescriptor")
	proto.RegisterType((*MetricDescriptor_Gauge)(nil), "opentelemetry.proto.metrics.v1.MetricDescriptor.Gauge")
	proto.RegisterType((*MetricDescriptor_Sum)(nil), "opentelemetry.proto.metrics.v1.MetricDescriptor.Sum")
	proto.RegisterType((*MetricDescriptor_Histogram)(nil), "opentelemetry.proto.metrics.v1.MetricDescriptor.Histogram")
	proto.RegisterType((*Int64DataPoint)(nil), "opentelemetry.proto.metrics.v1.Int64DataPoint")
	proto.RegisterType((*DoubleDataPoint)(nil), "opentelemetry.proto.metrics.v1.DoubleDataPoint")
	proto.RegisterType((*HistogramDataPoint)(nil), "opentelemetry.proto.metrics.v1.HistogramDataPoint")
}

func init() {
	proto.RegisterFile("opentelemetry/proto/metrics/v1/metrics.proto", fileDescriptor_3c3112f9fa006917)
}

var fileDescriptor_3c3112f9fa006917 = []byte{
	// 1104 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x57, 0xd1, 0x6e, 0x2a, 0x45,
	0x18, 0xee, 0x02, 0xa5, 0xe5, 0xa7, 0x87, 0xd2, 0xb1, 0xb6, 0xd8, 0x58, 0x0f, 0xe5, 0x98, 0x73,
	0xd0, 0x58, 0xb0, 0x58, 0x7b, 0x61, 0x62, 0x94, 0x96, 0x3d, 0x2d, 0x11, 0x28, 0x99, 0x2e, 0x4d,
	0x4e, 0x93, 0x93, 0xcd, 0x02, 0x23, 0x9d, 0xc8, 0xce, 0x6e, 0x76, 0x67, 0x9b, 0x12, 0x6f, 0x4c,
	0xd4, 0x1b, 0x3d, 0xbe, 0x87, 0x77, 0x3e, 0x8b, 0x6f, 0xe0, 0x23, 0xf8, 0x04, 0xc6, 0xec, 0xcc,
	0x2e, 0x94, 0x76, 0x29, 0x56, 0x4d, 0xd4, 0x78, 0x37, 0xf3, 0xcd, 0xff, 0x7f, 0xf3, 0xed, 0x37,
	0x3f, 0xf3, 0x33, 0xf0, 0x9e, 0x65, 0x13, 0xc6, 0xc9, 0x90, 0x98, 0x84, 0x3b, 0xa3, 0xb2, 0xed,
	0x58, 0xdc, 0x2a, 0xfb, 0x63, 0xda, 0x73, 0xcb, 0x57, 0x7b, 0xe1, 0xb0, 0x24, 0x16, 0xd0, 0x5b,
	0x53, 0xd1, 0x12, 0x2c, 0x85, 0x21, 0x57, 0x7b, 0x5b, 0xef, 0x46, 0xb1, 0xf5, 0x2c, 0xd3, 0xb4,
	0x98, 0x4f, 0x26, 0x47, 0x32, 0x6d, 0xab, 0x14, 0x15, 0xeb, 0x10, 0xd7, 0xf2, 0x9c, 0x1e, 0xf1,
	0xa3, 0xc3, 0xb1, 0x8c, 0x2f, 0xfc, 0xa2, 0xc0, 0x2a, 0x0e, 0xa0, 0xa6, 0xdc, 0x12, 0xa9, 0xb0,
	0x1c, 0x46, 0xe5, 0x94, 0xbc, 0x52, 0x4c, 0x57, 0xde, 0x29, 0x45, 0x49, 0x1c, 0x53, 0x5d, 0xed,
	0x95, 0x42, 0x0e, 0x3c, 0x4e, 0x45, 0xdf, 0x2a, 0xf0, 0x98, 0x32, 0x97, 0x3b, 0x9e, 0x49, 0x18,
	0x37, 0x38, 0xb5, 0x98, 0x3e, 0xa4, 0x5d, 0xc7, 0x70, 0x46, 0x7a, 0xf0, 0x75, 0xb9, 0x58, 0x3e,
	0x5e, 0x4c, 0x57, 0x3e, 0x2e, 0xdd, 0xef, 0x40, 0xa9, 0x3e, 0x4d, 0xd3, 0x90, 0x2c, 0x81, 0x5e,
	0xbc, 0x4d, 0xef, 0x5b, 0x2e, 0xfc, 0xac, 0xc0, 0xf6, 0xbd, 0x04, 0x88, 0xc1, 0xe6, 0x0c, 0xa1,
	0xc1, 0xf7, 0x7f, 0x18, 0x29, 0x30, 0x30, 0x7e, 0xa6, 0x3e, 0xbc, 0x11, 0x2d, 0x0c, 0x7d, 0x0a,
	0x4b, 0xd3, 0x06, 0x3c, 0x9d, 0x67, 0x80, 0x54, 0x8a, 0xc3, 0xb4, 0xc2, 0x6f, 0x0a, 0x2c, 0xab,
	0xd7, 0xc4, 0xb4, 0x87, 0x86, 0x83, 0x34, 0xc8, 0xf4, 0x1d, 0xcb, 0xb6, 0x49, 0x5f, 0x1f, 0x1a,
	0x5d, 0x32, 0x74, 0x73, 0x8a, 0x60, 0xdd, 0x9d, 0xa3, 0xfa, 0x8c, 0x3b, 0x94, 0x0d, 0x3e, 0x23,
	0xa3, 0x73, 0x63, 0xe8, 0x11, 0xfc, 0x28, 0x20, 0x69, 0x08, 0x0e, 0xf4, 0x36, 0x64, 0x38, 0x35,
	0x89, 0xee, 0x31, 0x7a, 0xad, 0x33, 0x83, 0x59, 0xb9, 0x58, 0x5e, 0x29, 0x26, 0xf1, 0x8a, 0x8f,
	0x76, 0x18, 0xbd, 0x6e, 0x19, 0xcc, 0x42, 0x3b, 0xb0, 0xd2, 0xb7, 0xbc, 0xee, 0x90, 0xe8, 0x57,
	0x3e, 0x49, 0x2e, 0x9e, 0x57, 0x8a, 0x0a, 0x4e, 0x4b, 0x4c, 0xf0, 0xa2, 0xc7, 0x90, 0xa6, 0x8c,
	0x1f, 0xec, 0x07, 0x11, 0x89, 0xbc, 0x52, 0x8c, 0x63, 0x10, 0x90, 0x0c, 0xd8, 0x84, 0x25, 0xd7,
	0x36, 0x98, 0x4e, 0xfb, 0xb9, 0xc5, 0xbc, 0x52, 0x5c, 0xc1, 0x49, 0x7f, 0x5a, 0xef, 0xa3, 0x37,
	0x60, 0x99, 0x3b, 0x46, 0x8f, 0xf8, 0x2b, 0x49, 0xb1, 0xb2, 0x24, 0xe6, 0xf5, 0x7e, 0xe1, 0xbb,
	0x38, 0x24, 0xa5, 0x29, 0xe8, 0x25, 0xac, 0x49, 0x5b, 0xf4, 0x3e, 0x71, 0x7b, 0x0e, 0xb5, 0xb9,
	0xe5, 0x04, 0xe7, 0xf6, 0xfe, 0x1f, 0xf3, 0xb5, 0x36, 0xce, 0xc3, 0x59, 0xf3, 0x16, 0x82, 0x2e,
	0x60, 0x4d, 0xca, 0xef, 0x1b, 0xdc, 0xd0, 0x6d, 0x8b, 0x32, 0x1e, 0x1e, 0x5b, 0x69, 0x7e, 0xdd,
	0xf2, 0x83, 0xfd, 0x9a, 0xc1, 0x8d, 0xb6, 0x9f, 0x86, 0x57, 0xe9, 0xd4, 0xdc, 0x45, 0x2f, 0x01,
	0x05, 0xee, 0xdd, 0x24, 0x8f, 0x0b, 0xf2, 0xf2, 0x3c, 0xf2, 0x9a, 0xc8, 0x9c, 0xb0, 0x67, 0xfb,
	0xd3, 0x80, 0x8b, 0x3e, 0x87, 0xd7, 0x2f, 0xa9, 0xcb, 0xad, 0x81, 0x63, 0x98, 0x53, 0x3b, 0x24,
	0xc4, 0x0e, 0x95, 0x79, 0x3b, 0x9c, 0x84, 0xc9, 0x93, 0x4d, 0x5e, 0xbb, 0xbc, 0x83, 0xb9, 0x85,
	0x9f, 0x00, 0xb2, 0xb7, 0x9d, 0x44, 0x08, 0x12, 0xcc, 0x30, 0xe5, 0x0d, 0x92, 0xc2, 0x62, 0x8c,
	0xf2, 0x90, 0x0e, 0xcf, 0x88, 0x5a, 0x4c, 0x14, 0x54, 0x0a, 0xdf, 0x84, 0xfc, 0x2c, 0x8f, 0x51,
	0x2e, 0xea, 0x28, 0x85, 0xc5, 0x18, 0xb5, 0x60, 0x71, 0x60, 0x78, 0x03, 0x59, 0x3a, 0xe9, 0xca,
	0xc1, 0x43, 0x0f, 0xb5, 0x74, 0xec, 0x67, 0x9f, 0x2c, 0x60, 0x49, 0x83, 0x4e, 0x20, 0xee, 0x7a,
	0xa6, 0xa8, 0xb5, 0x74, 0x65, 0xff, 0xc1, 0x6c, 0x67, 0x9e, 0x79, 0xb2, 0x80, 0x7d, 0x0a, 0x74,
	0x01, 0xa9, 0xb1, 0x1f, 0xa2, 0x42, 0xd3, 0x95, 0x8f, 0x1e, 0xcc, 0x37, 0x76, 0xf9, 0x64, 0x01,
	0x4f, 0xe8, 0xb6, 0xbe, 0x51, 0x60, 0x51, 0x08, 0x47, 0x5f, 0xc2, 0x86, 0x49, 0x0c, 0xd7, 0x73,
	0x88, 0x7f, 0x93, 0xc8, 0x9f, 0x91, 0xce, 0x47, 0xb6, 0xf4, 0x36, 0x53, 0x51, 0x1f, 0xbc, 0x65,
	0x73, 0x42, 0x27, 0x7e, 0x82, 0xda, 0xc8, 0x26, 0x78, 0xdd, 0x8c, 0x40, 0xb7, 0x7e, 0x8c, 0x41,
	0xfc, 0xcc, 0x33, 0xff, 0x51, 0x11, 0xe8, 0x2b, 0x05, 0x36, 0x8d, 0xc1, 0xc0, 0x21, 0x03, 0x79,
	0x3b, 0x73, 0x62, 0xda, 0x96, 0x63, 0x0c, 0x29, 0x1f, 0x89, 0x22, 0xca, 0x54, 0x8e, 0x1f, 0xbc,
	0x7d, 0x75, 0xc2, 0xa7, 0x4d, 0xe8, 0xf0, 0x86, 0x11, 0x89, 0xfb, 0x17, 0x1d, 0x75, 0x75, 0xd3,
	0x62, 0x16, 0xb7, 0x18, 0xed, 0x89, 0x02, 0x5d, 0xc6, 0x69, 0xea, 0x36, 0x43, 0x68, 0xeb, 0xfb,
	0x18, 0xa4, 0xc6, 0x87, 0xf9, 0x7f, 0x37, 0xac, 0xf0, 0xb5, 0x02, 0xeb, 0x51, 0x8a, 0xd1, 0x53,
	0x28, 0x34, 0xd5, 0xea, 0x59, 0x07, 0xab, 0x4d, 0xb5, 0xa5, 0xe9, 0xe7, 0xd5, 0x46, 0x47, 0xd5,
	0xb5, 0x17, 0x6d, 0x55, 0xef, 0xb4, 0xce, 0xda, 0xea, 0x51, 0xfd, 0x79, 0x5d, 0xad, 0x65, 0x17,
	0x50, 0x1e, 0xde, 0x9c, 0x11, 0x57, 0x6f, 0x69, 0x07, 0xfb, 0x59, 0x05, 0xed, 0xc0, 0xf6, 0x8c,
	0x88, 0xda, 0x69, 0xe7, 0xb0, 0xa1, 0x66, 0x63, 0x85, 0x57, 0x0a, 0x6c, 0x44, 0x0b, 0x47, 0xcf,
	0xe0, 0x49, 0xf5, 0xf8, 0x18, 0xab, 0xc7, 0x55, 0xad, 0x7e, 0xda, 0xd2, 0x35, 0xb5, 0xd9, 0x3e,
	0xc5, 0xd5, 0x46, 0x5d, 0x7b, 0x71, 0x4b, 0xc8, 0x0e, 0x6c, 0xcf, 0x0a, 0xac, 0xa9, 0x0d, 0xad,
	0x9a, 0x55, 0xfc, 0x6f, 0x9a, 0x15, 0x72, 0xd4, 0x69, 0x76, 0x1a, 0x55, 0xad, 0x7e, 0xae, 0x66,
	0x63, 0x87, 0x49, 0x48, 0xf8, 0x25, 0x50, 0x78, 0x15, 0x83, 0xcc, 0x74, 0x73, 0x40, 0x2a, 0x24,
	0xff, 0x4a, 0xf7, 0x0e, 0x92, 0x51, 0x19, 0xd6, 0x5d, 0x6e, 0x38, 0x5c, 0x8f, 0x6c, 0xde, 0x6b,
	0x62, 0x4d, 0xbb, 0xd9, 0xc1, 0xef, 0xf6, 0xf9, 0x78, 0x44, 0x9f, 0x5f, 0x87, 0xc5, 0x9b, 0xed,
	0x5b, 0x4e, 0xd0, 0x73, 0x48, 0x91, 0xe0, 0x5f, 0x88, 0x9b, 0x5b, 0x14, 0xb2, 0x8b, 0xf3, 0xea,
	0x2a, 0xfc, 0xdb, 0x82, 0x27, 0xa9, 0x85, 0x1f, 0x62, 0xb0, 0x7a, 0xab, 0x9d, 0xfd, 0x97, 0xfc,
	0x50, 0xfe, 0x6e, 0x3f, 0x7e, 0x8d, 0x01, 0xba, 0xdb, 0x7c, 0xff, 0xfd, 0x96, 0xf4, 0x2c, 0x8f,
	0x71, 0x61, 0x49, 0x02, 0xcb, 0x09, 0xca, 0x4e, 0x9a, 0xad, 0x22, 0x9b, 0xe6, 0x13, 0x78, 0xd4,
	0xf5, 0x7a, 0x5f, 0x10, 0xae, 0x8b, 0x08, 0x37, 0x97, 0xcc, 0xc7, 0x8b, 0x09, 0xbc, 0x22, 0xc1,
	0x23, 0x81, 0xa1, 0x67, 0xb0, 0x4a, 0xae, 0xed, 0x21, 0xed, 0x51, 0xae, 0x77, 0x2d, 0x8f, 0xf5,
	0xdd, 0xdc, 0x52, 0x3e, 0x5e, 0x54, 0x70, 0x26, 0x84, 0x0f, 0x05, 0x3a, 0x6d, 0xf9, 0xf2, 0x9f,
	0xb6, 0xfc, 0x90, 0xc3, 0x0e, 0xb5, 0xe6, 0x24, 0x1e, 0xae, 0x04, 0x2f, 0x86, 0xb6, 0xbf, 0xd0,
	0x56, 0x2e, 0x3e, 0x19, 0x50, 0x7e, 0xe9, 0x75, 0x7d, 0xcb, 0xcb, 0x7e, 0xea, 0xee, 0xe4, 0xe5,
	0x35, 0xc5, 0xb4, 0x2b, 0xdf, 0x61, 0x03, 0xc2, 0xca, 0x83, 0x9b, 0x0f, 0xc1, 0x6e, 0x52, 0x2c,
	0x7c, 0xf0, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x98, 0xb8, 0x0a, 0x31, 0x0e, 0x00, 0x00,
}
